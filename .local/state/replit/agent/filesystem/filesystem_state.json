{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nResellerPro is a comprehensive Amazon reselling management platform designed to streamline deal evaluation, purchasing planning, and SKU management. The application serves as a central hub for Virtual Assistants (VAs) and administrators to efficiently manage the entire product lifecycle from initial deal submission to final SKU generation and Amazon synchronization.\n\nThe platform features a role-based system where VAs can submit product deals for evaluation, while administrators review and approve deals, manage purchasing plans, and oversee SKU operations. The system tracks profit margins, manages inventory planning, and provides detailed analytics through an intuitive dashboard interface.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client-side application is built using React with TypeScript, utilizing a component-based architecture. The frontend leverages Vite as the build tool and development server, with Wouter for client-side routing. The UI is constructed using shadcn/ui components built on top of Radix UI primitives, providing a consistent and accessible design system. Styling is handled through Tailwind CSS with a custom design token system defined in CSS variables.\n\nThe application follows a page-based routing structure with protected routes based on user roles. State management is handled through TanStack Query for server state and React's built-in state management for local component state. The frontend communicates with the backend through a custom API client that handles authentication, error management, and request/response processing.\n\n## Backend Architecture\nThe server-side is built on Express.js with TypeScript, following a modular architecture pattern. The application uses a three-layer architecture consisting of route handlers, business logic (storage layer), and database access. The server implements session-based authentication using Replit's OpenID Connect integration with PostgreSQL session storage.\n\nAPI routes are organized by feature domains (deals, products, purchasing, etc.) and implement proper error handling and validation. The backend uses Zod for request/response validation and provides comprehensive logging for debugging and monitoring purposes.\n\n## Database Design\nThe application uses PostgreSQL as the primary database with Drizzle ORM for type-safe database operations. The schema includes core entities for users, products, deals, purchasing plans, SKUs, and activity logging. The database design supports role-based access control with enum types for user roles and entity statuses.\n\nKey relationships include products linked to deals through ASINs, deals connected to purchasing plans for volume planning, and comprehensive activity logging for audit trails. The schema supports both manual data entry and future integrations with external systems.\n\n## Authentication & Authorization\nAuthentication is implemented using Replit's OpenID Connect provider with session-based state management. User sessions are stored in PostgreSQL using connect-pg-simple for persistence across server restarts. The system implements role-based authorization with admin and VA roles, controlling access to different features and API endpoints.\n\nThe authentication layer includes middleware for protected routes, user session management, and automatic token refresh handling. Authorization is enforced both at the API level and in the frontend UI to prevent unauthorized access to administrative features.\n\n# External Dependencies\n\n## Database Infrastructure\n- **PostgreSQL**: Primary database using Neon serverless PostgreSQL for scalable data storage\n- **Drizzle ORM**: Type-safe database operations with automatic migration support\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n## Authentication Services\n- **Replit OpenID Connect**: Primary authentication provider for user management\n- **Passport.js**: Authentication middleware with OpenID Connect strategy\n- **Express Session**: Session management with PostgreSQL persistence\n\n## UI Framework & Styling\n- **React**: Frontend framework with TypeScript support\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **shadcn/ui**: Pre-built component library with consistent design patterns\n- **Tailwind CSS**: Utility-first CSS framework with custom design token system\n- **Lucide React**: Icon library for consistent iconography\n\n## Development & Build Tools\n- **Vite**: Fast development server and build tool with React plugin support\n- **ESBuild**: Fast bundler for server-side code compilation\n- **TypeScript**: Type safety across the entire application stack\n- **Replit Development Tools**: Cartographer plugin for enhanced development experience\n\n## State Management & Data Fetching\n- **TanStack Query**: Server state management with caching and synchronization\n- **React Hook Form**: Form state management with validation support\n- **Zod**: Runtime type validation for API requests and responses\n\n## Future Integration Targets\n- **Amazon APIs**: Product data synchronization and marketplace integration\n- **Google Sheets**: Data import/export capabilities for deal management\n- **PrepMyBusiness**: SKU synchronization and inventory management","size_bytes":5307},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/content-1756819787966.md":{"content":"```\nYou are receiving this error either because your input OAuth2 scope name is invalid or it refers to a newer scope that is outside the domain of this legacy API.\n\nThis API was built at a time when the scope name format was not yet standardized. This is no longer the case and all valid scope names (both old and new) are catalogued at https://developers.google.com/identity/protocols/oauth2/scopes. Use that webpage to lookup (manually) the scope name associated with the API you are trying to call and use it to craft your OAuth2 request.\n\n```","size_bytes":547},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/googleSheetsService.ts":{"content":"import { google } from \"googleapis\";\nimport * as path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ninterface GoogleSheetsRow {\n  datum?: string; // A: Datum\n  imageUrl?: string; // B: Image URL\n  image?: string; // C: Image\n  brand?: string; // D: Brand\n  productName: string; // E: Product Name\n  asin: string; // F: ASIN\n  eanBarcode?: string; // G: EAN Barcode\n  sourceUrl?: string; // H: Source URL\n  amazonUrl?: string; // I: Amazon URL\n  costPrice: string; // J: Cost Price\n  salePrice?: string; // K: Sale Price\n  buyBoxAverage90Days?: string; // L: Buy Box (Average Last 90 Days)\n  profit?: string; // M: Profit\n  profitMargin?: string; // N: Profit Margin\n  roi?: string; // O: R.O.I.\n  estimatedSales?: string; // P: Estimated Sales\n  fbaSellerCount?: string; // Q: FBA Seller Count\n  fbmSellerCount?: string; // R: FBM Seller Count\n  productReview?: string; // S: Product Review\n  notes?: string; // T: Notes\n  sourcingMethod?: string; // U: Sourcing Method\n}\n\nexport class GoogleSheetsService {\n  private sheets: any;\n  private spreadsheetId: string;\n\n  constructor() {\n    // Use the new spreadsheet ID directly\n    this.spreadsheetId = \"1S06m7tQuejVvVpStS-gNKZMzrvdEsRCPuipxv1vEiTM\";\n    console.log(\n      `🔧 GoogleSheetsService initialized with ID: ${this.spreadsheetId}`,\n    );\n    this.sheets = null; // Initialize later\n  }\n\n  private async getGoogleAuth() {\n    const raw =\n      process.env.GOOGLE_CREDENTIALS || process.env.GOOGLE_SERVICE_ACCOUNT_JSON;\n    if (!raw) {\n      throw new Error(\n        \"GOOGLE_CREDENTIALS or GOOGLE_SERVICE_ACCOUNT_JSON environment variable is required\",\n      );\n    }\n\n    const creds = JSON.parse(raw);\n\n    // WICHTIG: Newlines im Private Key korrekt einsetzen\n    if (creds.private_key && creds.private_key.includes(\"\\\\n\")) {\n      creds.private_key = creds.private_key.replace(/\\\\n/g, \"\\n\");\n    }\n\n    return new google.auth.GoogleAuth({\n      credentials: {\n        client_email: creds.client_email,\n        private_key: creds.private_key,\n      },\n      scopes: [\"https://www.googleapis.com/auth/spreadsheets\"],\n    });\n  }\n\n  private async getSheets() {\n    if (!this.sheets) {\n      const auth = await this.getGoogleAuth();\n      this.sheets = google.sheets({ version: \"v4\", auth });\n    }\n    return this.sheets;\n  }\n\n  async testConnection(): Promise<{\n    success: boolean;\n    spreadsheet?: any;\n    error?: string;\n  }> {\n    try {\n      const sheets = await this.getSheets();\n\n      // First test - get spreadsheet metadata\n      const metadataResponse = await sheets.spreadsheets.get({\n        spreadsheetId: this.spreadsheetId,\n      });\n\n      const spreadsheet = metadataResponse.data;\n\n      // Get all sheet names to find the correct one\n      const sheetNames =\n        spreadsheet.sheets?.map((s: any) => s.properties?.title) || [];\n      console.log(`📋 Available sheet names: ${sheetNames.join(\", \")}`);\n\n      // Try to find the correct sheet name - could be \"Sourcing Sheet\" or first sheet\n      let sheetName =\n        sheetNames.find((name: string) =>\n          name.toLowerCase().includes(\"sourcing\"),\n        ) ||\n        sheetNames[0] ||\n        \"Sheet1\";\n\n      console.log(`🎯 Using sheet: \"${sheetName}\"`);\n\n      // Second test - try to read headers and data from correct sheet\n      const headerResponse = await sheets.spreadsheets.values.get({\n        spreadsheetId: this.spreadsheetId,\n        range: `'${sheetName}'!A1:U1`, // Headers (21 columns A-U)\n      });\n\n      const dataResponse = await sheets.spreadsheets.values.get({\n        spreadsheetId: this.spreadsheetId,\n        range: `'${sheetName}'!A2:U10`, // Data rows 2-10 (21 columns A-U)\n      });\n\n      return {\n        success: true,\n        spreadsheet: {\n          title: spreadsheet.properties?.title,\n          sheets:\n            spreadsheet.sheets?.map((s: any) => s.properties?.title) || [],\n          rowCount: dataResponse.data.values?.length || 0,\n          hasData:\n            dataResponse.data.values && dataResponse.data.values.length > 0,\n          headers: headerResponse.data.values?.[0] || [],\n          firstRow: dataResponse.data.values?.[0] || [],\n          sourcingTabFound:\n            spreadsheet.sheets?.some(\n              (s: any) => s.properties?.title === \"Sourcing\",\n            ) || false,\n        },\n      };\n    } catch (error: any) {\n      console.error(\"Google Sheets connection test failed:\", error);\n      return {\n        success: false,\n        error: error.message || \"Unknown connection error\",\n      };\n    }\n  }\n\n  async fetchSheetData(\n    range: string = \"Sourcing!A2:AB\",\n  ): Promise<GoogleSheetsRow[]> {\n    try {\n      const sheets = await this.getSheets();\n      const response = await sheets.spreadsheets.values.get({\n        spreadsheetId: this.spreadsheetId,\n        range: range,\n      });\n\n      const data = response.data;\n\n      if (!data.values || data.values.length === 0) {\n        return [];\n      }\n\n      // First row is headers, skip it\n      const headers = data.values[0];\n      const rows = data.values.slice(1);\n      console.log(\"rows---------------\", rows);\n      return rows.map((row: string[]) => this.mapRowToObject(headers, row));\n    } catch (error) {\n      console.error(\"Error fetching Google Sheets data:\", error);\n      throw error;\n    }\n  }\n\n  private mapRowToObject(headers: string[], row: string[]): GoogleSheetsRow {\n    // Column mapping for new 21-field CSV structure (A-U)\n    const columnMapping: Record<number, keyof GoogleSheetsRow> = {\n      0: \"datum\", // A: Datum\n      1: \"imageUrl\", // B: Image URL\n      2: \"image\", // C: Image\n      3: \"brand\", // D: Brand\n      4: \"productName\", // E: Product Name\n      5: \"asin\", // F: ASIN\n      6: \"eanBarcode\", // G: EAN Barcode\n      7: \"sourceUrl\", // H: Source URL\n      8: \"amazonUrl\", // I: Amazon URL\n      9: \"costPrice\", // J: Cost Price\n      10: \"salePrice\", // K: Sale Price\n      11: \"buyBoxAverage90Days\", // L: Buy Box (Average Last 90 Days)\n      12: \"profit\", // M: Profit\n      13: \"profitMargin\", // N: Profit Margin\n      14: \"roi\", // O: R.O.I.\n      15: \"estimatedSales\", // P: Estimated Sales\n      16: \"fbaSellerCount\", // Q: FBA Seller Count\n      17: \"fbmSellerCount\", // R: FBM Seller Count\n      18: \"productReview\", // S: Product Review\n      19: \"notes\", // T: Notes\n      20: \"sourcingMethod\", // U: Sourcing Method\n    };\n\n    const result: any = {};\n\n    for (let i = 0; i < row.length && i < 21; i++) {\n      const fieldName = columnMapping[i];\n      if (fieldName && row[i] && row[i].trim() !== \"\") {\n        result[fieldName] = row[i].trim();\n      }\n    }\n\n    // Ensure required fields have values\n    if (!result.productName) {\n      throw new Error(\"Product Name is required (Column E)\");\n    }\n    if (!result.asin) {\n      throw new Error(\"ASIN is required (Column F)\");\n    }\n    if (!result.costPrice) {\n      throw new Error(\"Cost Price is required (Column J)\");\n    }\n\n    return result as GoogleSheetsRow;\n  }\n\n  validateRow(row: GoogleSheetsRow): string[] {\n    const errors: string[] = [];\n\n    // Validate required fields\n    if (!row.productName || row.productName.trim() === \"\") {\n      errors.push(\"Product Name ist erforderlich\");\n    }\n    if (!row.asin || row.asin.trim() === \"\") {\n      errors.push(\"ASIN ist erforderlich\");\n    }\n    if (!row.costPrice || row.costPrice.trim() === \"\") {\n      errors.push(\"Cost Price ist erforderlich\");\n    }\n    // Validate numeric fields\n    if (row.costPrice && isNaN(parseFloat(row.costPrice))) {\n      errors.push(\"Cost Price muss eine gültige Zahl sein\");\n    }\n    if (row.salePrice && isNaN(parseFloat(row.salePrice))) {\n      errors.push(\"Sale Price muss eine gültige Zahl sein\");\n    }\n    if (row.buyBoxAverage90Days && isNaN(parseFloat(row.buyBoxAverage90Days))) {\n      errors.push(\"BuyBox Average muss eine gültige Zahl sein\");\n    }\n    if (row.estimatedSales && isNaN(parseInt(row.estimatedSales))) {\n      errors.push(\"Estimated Sales muss eine ganze Zahl sein\");\n    }\n    if (row.profit && isNaN(parseFloat(row.profit))) {\n      errors.push(\"Profit muss eine gültige Zahl sein\");\n    }\n    if (row.profitMargin && isNaN(parseFloat(row.profitMargin))) {\n      errors.push(\"Profit Margin muss eine gültige Zahl sein\");\n    }\n    if (row.roi && isNaN(parseFloat(row.roi))) {\n      errors.push(\"ROI muss eine gültige Zahl sein\");\n    }\n\n    // Validate URLs\n    if (row.imageUrl && !this.isValidUrl(row.imageUrl)) {\n      errors.push(\"Image URL ist nicht gültig\");\n    }\n    if (row.sourceUrl && !this.isValidUrl(row.sourceUrl)) {\n      errors.push(\"Source URL ist nicht gültig\");\n    }\n    if (row.amazonUrl && !this.isValidUrl(row.amazonUrl)) {\n      errors.push(\"Amazon URL ist nicht gültig\");\n    }\n\n    return errors;\n  }\n\n  private isValidUrl(urlString: string): boolean {\n    try {\n      new URL(urlString);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  transformRowForDatabase(row: GoogleSheetsRow, submittedBy: string) {\n    const costPrice = parseFloat(row.costPrice);\n\n    // Direkt aus Spreadsheet übernehmen - KEINE Berechnung\n    const profit = row.profit ? parseFloat(row.profit) : null;\n    const profitMargin = row.profitMargin ? parseFloat(row.profitMargin) : null;\n    const roi = row.roi ? parseFloat(row.roi) : null;\n\n    // Sale Price direkt aus Spreadsheet verwenden\n    const salePrice = row.salePrice\n      ? parseFloat(row.salePrice)\n      : row.buyBoxAverage90Days\n        ? parseFloat(row.buyBoxAverage90Days)\n        : costPrice;\n\n    return {\n      datum: row.datum ? new Date(row.datum) : new Date(),\n      imageUrl: row.imageUrl || null,\n      image: row.image || null,\n      brand: row.brand || null,\n      productName: row.productName,\n      asin: row.asin,\n      eanBarcode: row.eanBarcode || null,\n      sourceUrl: row.sourceUrl || null,\n      amazonUrl: row.amazonUrl || null,\n      costPrice: costPrice.toString(),\n      salePrice: salePrice.toString(),\n      buyBoxCurrent: null, // Not in new CSV structure\n      buyBoxAverage90Days: row.buyBoxAverage90Days\n        ? parseFloat(row.buyBoxAverage90Days).toString()\n        : null,\n      profit: profit !== null ? profit.toString() : null,\n      profitMargin: profitMargin !== null ? profitMargin.toString() : null,\n      roi: roi !== null ? roi.toString() : null,\n      estimatedSales: row.estimatedSales ? parseInt(row.estimatedSales) : null,\n      fbaSellerCount: row.fbaSellerCount ? parseInt(row.fbaSellerCount) : null,\n      fbmSellerCount: row.fbmSellerCount ? parseInt(row.fbmSellerCount) : null,\n      productReview: row.productReview ? parseFloat(row.productReview) : null,\n      notes: row.notes || null,\n      sourcingMethod: row.sourcingMethod || \"google-sheets\",\n      submittedBy,\n    };\n  }\n  // Utility functions for parsing\n  parseMoneySmart(value: string): number {\n    if (!value) return 0;\n    // Remove currency symbols, spaces, and convert German decimal separators\n    const cleanValue = String(value)\n      .replace(/[€$£¥₹]/g, \"\")\n      .replace(/\\s/g, \"\")\n      .replace(/,/g, \".\");\n\n    return parseFloat(cleanValue) || 0;\n  }\n\n  parsePercentMaybe(value: string): number | null {\n    if (!value) return null;\n    // Remove % symbol and spaces, convert German decimal separators\n    const cleanValue = String(value)\n      .replace(/%/g, \"\")\n      .replace(/\\s/g, \"\")\n      .replace(/,/g, \".\");\n\n    const parsed = parseFloat(cleanValue);\n    return isNaN(parsed) ? null : parsed;\n  }\n\n  async readSourcingSheet(): Promise<{\n    headers: string[];\n    items: Record<string, string>[];\n  }> {\n    try {\n      const sheets = await this.getSheets();\n\n      // Get sheet metadata to find correct sheet name\n      const metadataResponse = await sheets.spreadsheets.get({\n        spreadsheetId: this.spreadsheetId,\n      });\n\n      const sheetNames =\n        metadataResponse.data.sheets?.map((s: any) => s.properties?.title) ||\n        [];\n      console.log(`📋 Available sheets: ${sheetNames.join(\", \")}`);\n\n      // Find the correct sheet name\n      let sheetName =\n        sheetNames.find((name: string) =>\n          name.toLowerCase().includes(\"sourcing\"),\n        ) ||\n        sheetNames[0] ||\n        \"Sheet1\";\n\n      console.log(`🎯 Reading from sheet: \"${sheetName}\"`);\n\n      // Get headers (21 columns: A-U)\n      const headerResponse = await sheets.spreadsheets.values.get({\n        spreadsheetId: this.spreadsheetId,\n        range: `'${sheetName}'!A1:U1`,\n      });\n\n      // Get data (21 columns: A-U)\n      const dataResponse = await sheets.spreadsheets.values.get({\n        spreadsheetId: this.spreadsheetId,\n        range: `'${sheetName}'!A2:U`,\n      });\n\n      const headers = headerResponse.data.values?.[0] || [];\n      const rows = dataResponse.data.values || [];\n\n      // Convert rows to objects with header keys\n      const items = rows.map((row: string[]) => {\n        const item: Record<string, string> = {};\n        headers.forEach((header: string, index: number) => {\n          item[header] = row[index] || \"\";\n        });\n        return item;\n      });\n      return { headers, items };\n    } catch (error) {\n      console.error(\"Error reading sourcing sheet:\", error);\n      throw error;\n    }\n  }\n\n  async updateProductReview(rowIndex: number, newValue: string) {\n    try {\n      console.log(\n        `🔄 Updating Product Review for row ${rowIndex + 2} to \"${newValue}\"`,\n      );\n\n      const sheets = await this.getSheets();\n\n      // Get sheet metadata to find correct sheet name\n      const metadataResponse = await sheets.spreadsheets.get({\n        spreadsheetId: this.spreadsheetId,\n      });\n\n      const sheetNames =\n        metadataResponse.data.sheets?.map((s: any) => s.properties?.title) ||\n        [];\n\n      // Find the correct sheet name\n      let sheetName =\n        sheetNames.find((name: string) =>\n          name.toLowerCase().includes(\"sourcing\"),\n        ) ||\n        sheetNames[0] ||\n        \"Sheet1\";\n\n      console.log(`🎯 Updating in sheet: \"${sheetName}\"`);\n\n      // Product Review is column S (19th column in our A-U range)\n      const columnLetter = \"S\";\n      const cellRange = `'${sheetName}'!${columnLetter}${rowIndex + 2}`; // +2 because row 1 is headers and we're 0-indexed\n\n      await sheets.spreadsheets.values.update({\n        spreadsheetId: this.spreadsheetId,\n        range: cellRange,\n        valueInputOption: \"USER_ENTERED\",\n        requestBody: {\n          values: [[newValue]],\n        },\n      });\n\n      console.log(`✅ Successfully updated ${cellRange} to \"${newValue}\"`);\n\n      // If marked as \"Winner\", copy the row to the Purchasing tab\n      if (newValue === \"Winner\") {\n        await this.copyRowToPurchasing(rowIndex, sheetName);\n      }\n\n      return { success: true };\n    } catch (error) {\n      console.error(\"❌ Error updating Product Review:\", error);\n      throw error;\n    }\n  }\n\n  async copyRowToPurchasing(rowIndex: number, sourceSheetName: string) {\n    try {\n      console.log(`📋 Copying row ${rowIndex + 2} to Purchasing tab`);\n\n      const sheets = await this.getSheets();\n\n      // Get the complete row data from source sheet (A-U columns)\n      const rowRange = `'${sourceSheetName}'!A${rowIndex + 2}:U${rowIndex + 2}`;\n      const rowResponse = await sheets.spreadsheets.values.get({\n        spreadsheetId: this.spreadsheetId,\n        range: rowRange,\n      });\n\n      const rowData = rowResponse.data.values?.[0];\n      if (!rowData) {\n        throw new Error(`No data found for row ${rowIndex + 2}`);\n      }\n\n      console.log(`📦 Row data to copy:`, rowData);\n\n      // Check if Purchasing sheet exists\n      const metadataResponse = await sheets.spreadsheets.get({\n        spreadsheetId: this.spreadsheetId,\n      });\n\n      const sheetNames =\n        metadataResponse.data.sheets?.map((s: any) => s.properties?.title) ||\n        [];\n\n      const purchasingSheetName = sheetNames.find((name: string) =>\n        name.toLowerCase().includes(\"purchasing\"),\n      );\n\n      if (!purchasingSheetName) {\n        console.warn(\"⚠️ Purchasing sheet not found. Creating it...\");\n        await this.createPurchasingSheet();\n      }\n\n      // Find the next empty row in Purchasing sheet\n      const purchasingDataResponse = await sheets.spreadsheets.values.get({\n        spreadsheetId: this.spreadsheetId,\n        range: `'${purchasingSheetName || \"Purchasing\"}'!A:A`,\n      });\n\n      const nextRow = (purchasingDataResponse.data.values?.length || 0) + 1;\n\n      // Append the row to Purchasing sheet\n      const targetRange = `'${purchasingSheetName || \"Purchasing\"}'!A${nextRow}:U${nextRow}`;\n\n      await sheets.spreadsheets.values.update({\n        spreadsheetId: this.spreadsheetId,\n        range: targetRange,\n        valueInputOption: \"USER_ENTERED\",\n        requestBody: {\n          values: [rowData],\n        },\n      });\n\n      console.log(\n        `✅ Successfully copied row to Purchasing sheet at row ${nextRow}`,\n      );\n    } catch (error) {\n      console.error(\"❌ Error copying row to Purchasing:\", error);\n      throw error;\n    }\n  }\n\n  async createPurchasingSheet() {\n    try {\n      console.log(\"🔧 Creating Purchasing sheet...\");\n\n      const sheets = await this.getSheets();\n\n      // Create the Purchasing sheet\n      await sheets.spreadsheets.batchUpdate({\n        spreadsheetId: this.spreadsheetId,\n        requestBody: {\n          requests: [\n            {\n              addSheet: {\n                properties: {\n                  title: \"Purchasing\",\n                },\n              },\n            },\n          ],\n        },\n      });\n\n      // Add headers to the new sheet (same as sourcing sheet)\n      const headers = [\n        \"Datum\",\n        \"Image URL\",\n        \"Image\",\n        \"Brand\",\n        \"Product Name\",\n        \"ASIN\",\n        \"EAN Barcode\",\n        \"Source URL\",\n        \"Amazon URL\",\n        \"Cost Price\",\n        \"Sale Price\",\n        \"Buy Box (Average Last 90 Days)\",\n        \"Profit\",\n        \"Profit Margin\",\n        \"R.O.I.\",\n        \"Estimated Sales\",\n        \"FBA Seller Count\",\n        \"FBM Seller Count\",\n        \"Product Review\",\n        \"Notes\",\n        \"Sourcing Method\",\n      ];\n\n      await sheets.spreadsheets.values.update({\n        spreadsheetId: this.spreadsheetId,\n        range: \"Purchasing!A1:U1\",\n        valueInputOption: \"USER_ENTERED\",\n        requestBody: {\n          values: [headers],\n        },\n      });\n\n      console.log(\"✅ Purchasing sheet created with headers\");\n    } catch (error) {\n      console.error(\"❌ Error creating Purchasing sheet:\", error);\n      throw error;\n    }\n  }\n\n  async updateNotes(rowIndex: number, newValue: string) {\n    try {\n      console.log(`🔄 Updating Notes for row ${rowIndex + 2} to \"${newValue}\"`);\n\n      const sheets = await this.getSheets();\n\n      // Get sheet metadata to find correct sheet name\n      const metadataResponse = await sheets.spreadsheets.get({\n        spreadsheetId: this.spreadsheetId,\n      });\n\n      const sheetNames =\n        metadataResponse.data.sheets?.map((s: any) => s.properties?.title) ||\n        [];\n\n      // Find the correct sheet name\n      let sheetName =\n        sheetNames.find((name: string) =>\n          name.toLowerCase().includes(\"sourcing\"),\n        ) ||\n        sheetNames[0] ||\n        \"Sheet1\";\n\n      console.log(`🎯 Updating Notes in sheet: \"${sheetName}\"`);\n\n      // Notes is column T (20th column in our A-U range)\n      const columnLetter = \"T\";\n      const cellRange = `'${sheetName}'!${columnLetter}${rowIndex + 2}`; // +2 because row 1 is headers and we're 0-indexed\n\n      await sheets.spreadsheets.values.update({\n        spreadsheetId: this.spreadsheetId,\n        range: cellRange,\n        valueInputOption: \"USER_ENTERED\",\n        requestBody: {\n          values: [[newValue]],\n        },\n      });\n\n      console.log(\n        `✅ Successfully updated Notes at ${cellRange} to \"${newValue}\"`,\n      );\n      return { success: true };\n    } catch (error) {\n      console.error(\"❌ Error updating Notes:\", error);\n      throw error;\n    }\n  }\n\n  async updateSourcingMethod(rowIndex: number, newValue: string) {\n    try {\n      console.log(`🔄 Updating Sourcing Method for row ${rowIndex + 2} to \"${newValue}\"`);\n\n      const sheets = await this.getSheets();\n\n      // Get sheet metadata to find correct sheet name\n      const metadataResponse = await sheets.spreadsheets.get({\n        spreadsheetId: this.spreadsheetId,\n      });\n\n      const sheetNames =\n        metadataResponse.data.sheets?.map((s: any) => s.properties?.title) ||\n        [];\n\n      // Find the correct sheet name\n      let sheetName =\n        sheetNames.find((name: string) =>\n          name.toLowerCase().includes(\"sourcing\"),\n        ) ||\n        sheetNames[0] ||\n        \"Sheet1\";\n\n      console.log(`🎯 Updating Sourcing Method in sheet: \"${sheetName}\"`);\n\n      // Sourcing Method is column U (21st column in our A-U range)\n      const columnLetter = \"U\";\n      const cellRange = `'${sheetName}'!${columnLetter}${rowIndex + 2}`; // +2 because row 1 is headers and we're 0-indexed\n\n      await sheets.spreadsheets.values.update({\n        spreadsheetId: this.spreadsheetId,\n        range: cellRange,\n        valueInputOption: \"USER_ENTERED\",\n        requestBody: {\n          values: [[newValue]],\n        },\n      });\n\n      console.log(\n        `✅ Successfully updated Sourcing Method at ${cellRange} to \"${newValue}\"`,\n      );\n      return { success: true };\n    } catch (error) {\n      console.error(\"❌ Error updating Sourcing Method:\", error);\n      throw error;\n    }\n  }\n\n  async deleteRow(rowIndex: number): Promise<{ success: boolean }> {\n    try {\n      console.log(`🗑️ Deleting row ${rowIndex + 2} from Google Sheets`);\n\n      const sheets = await this.getSheets();\n\n      // Get sheet metadata to find correct sheet name\n      const metadataResponse = await sheets.spreadsheets.get({\n        spreadsheetId: this.spreadsheetId,\n      });\n\n      const sheetNames =\n        metadataResponse.data.sheets?.map((s: any) => s.properties?.title) ||\n        [];\n\n      // Find the correct sheet name - be more specific\n      let sheetName = \n        sheetNames.find((name: string) => name === \"Sourcing\") || // Exact match first\n        sheetNames.find((name: string) =>\n          name.toLowerCase().includes(\"sourcing\"),\n        ) ||\n        sheetNames[0] ||\n        \"Sheet1\";\n\n      console.log(`📋 Available sheets: ${sheetNames.join(', ')}`);\n      console.log(`🎯 Using sheet: \"${sheetName}\"`);\n\n      const targetSheet = metadataResponse.data.sheets?.find(\n        (sheet: any) => sheet.properties?.title === sheetName,\n      );\n\n      const sheetId = targetSheet?.properties?.sheetId;\n\n      console.log(`🎯 Deleting from sheet: \"${sheetName}\" (ID: ${sheetId})`);\n      console.log(`📊 Target sheet object:`, targetSheet?.properties);\n\n      if (sheetId === undefined || sheetId === null) {\n        console.error(\"❌ Available sheets:\", metadataResponse.data.sheets?.map(s => s.properties));\n        throw new Error(`Sheet ID not found for sheet \"${sheetName}\". Available sheets: ${sheetNames.join(', ')}`);\n      }\n\n      // Delete the row using batchUpdate\n      await sheets.spreadsheets.batchUpdate({\n        spreadsheetId: this.spreadsheetId,\n        requestBody: {\n          requests: [\n            {\n              deleteDimension: {\n                range: {\n                  sheetId: sheetId,\n                  dimension: \"ROWS\",\n                  startIndex: rowIndex + 1, // +1 because we want to delete the actual row (headers are row 0)\n                  endIndex: rowIndex + 2, // +2 because endIndex is exclusive\n                },\n              },\n            },\n          ],\n        },\n      });\n\n      console.log(\n        `✅ Successfully deleted row ${rowIndex + 2} from Google Sheets`,\n      );\n      return { success: true };\n    } catch (error) {\n      console.error(\"❌ Error deleting row from Google Sheets:\", error);\n      throw error;\n    }\n  }\n\n  async readPurchasingSheet(): Promise<{\n    headers: string[];\n    items: Record<string, string>[];\n  }> {\n    try {\n      const sheets = await this.getSheets();\n\n      // Get sheet metadata to find correct sheet name\n      const metadataResponse = await sheets.spreadsheets.get({\n        spreadsheetId: this.spreadsheetId,\n      });\n\n      const sheetNames =\n        metadataResponse.data.sheets?.map((s: any) => s.properties?.title) ||\n        [];\n      console.log(`📋 Available sheets: ${sheetNames.join(\", \")}`);\n\n      // Find the Purchasing sheet\n      let sheetName = sheetNames.find((name: string) =>\n        name.toLowerCase().includes(\"purchasing\"),\n      );\n\n      if (!sheetName) {\n        console.log(`⚠️ Purchasing sheet not found, returning empty data`);\n        return { headers: [], items: [] };\n      }\n\n      console.log(`🎯 Reading from Purchasing sheet: \"${sheetName}\"`);\n\n      // Get headers (A1-AC1 - 29 columns)\n      const headerResponse = await sheets.spreadsheets.values.get({\n        spreadsheetId: this.spreadsheetId,\n        range: `'${sheetName}'!A1:AC1`,\n      });\n\n      // Get data (A2-AC)\n      const dataResponse = await sheets.spreadsheets.values.get({\n        spreadsheetId: this.spreadsheetId,\n        range: `'${sheetName}'!A2:AC`,\n      });\n\n      const headers = headerResponse.data.values?.[0] || [];\n      const rows = dataResponse.data.values || [];\n\n      // Convert rows to objects with header keys\n      const items = rows.map((row: string[]) => {\n        const item: Record<string, string> = {};\n        headers.forEach((header: string, index: number) => {\n          item[header] = row[index] || \"\";\n        });\n        return item;\n      });\n\n      // Filter out rows where Product Name and ASIN are both missing or empty\n      const filteredItems = items.filter((item) => {\n        const productName = item[\"Product Name\"]?.trim();\n        const asin = item[\"ASIN\"]?.trim();\n        return productName && productName !== \"\" && asin && asin !== \"\";\n      });\n\n      console.log(\n        `📦 Found ${items.length} total items, ${filteredItems.length} items after filtering out empty Product Name/ASIN`,\n      );\n      return { headers, items: filteredItems };\n    } catch (error) {\n      console.error(\"Error reading Purchasing sheet:\", error);\n      throw error;\n    }\n  }\n\n  // Purchasing Sheet Update Methods\n  async updatePurchasingProductReview(rowIndex: number, newValue: string) {\n    try {\n      console.log(`🔄 Updating Purchasing Product Review for row ${rowIndex + 2} to \"${newValue}\"`);\n\n      const sheets = await this.getSheets();\n\n      // Get sheet metadata to find purchasing sheet\n      const metadataResponse = await sheets.spreadsheets.get({\n        spreadsheetId: this.spreadsheetId,\n      });\n\n      const sheetNames = metadataResponse.data.sheets?.map((s: any) => s.properties?.title) || [];\n\n      // Find the purchasing sheet\n      let sheetName = sheetNames.find((name: string) => name.toLowerCase().includes(\"purchasing\")) || \"Purchasing\";\n\n      console.log(`🎯 Updating Purchasing Product Review in sheet: \"${sheetName}\"`);\n\n      // Product Review is column S (19th column)\n      const columnLetter = \"S\";\n      const cellRange = `'${sheetName}'!${columnLetter}${rowIndex + 2}`;\n\n      await sheets.spreadsheets.values.update({\n        spreadsheetId: this.spreadsheetId,\n        range: cellRange,\n        valueInputOption: \"USER_ENTERED\",\n        requestBody: {\n          values: [[newValue]],\n        },\n      });\n\n      console.log(`✅ Successfully updated Purchasing Product Review at ${cellRange} to \"${newValue}\"`);\n      return { success: true };\n    } catch (error) {\n      console.error(\"❌ Error updating Purchasing Product Review:\", error);\n      throw error;\n    }\n  }\n\n  async updatePurchasingSourcingMethod(rowIndex: number, newValue: string) {\n    try {\n      console.log(`🔄 Updating Purchasing Sourcing Method for row ${rowIndex + 2} to \"${newValue}\"`);\n\n      const sheets = await this.getSheets();\n\n      // Get sheet metadata to find purchasing sheet\n      const metadataResponse = await sheets.spreadsheets.get({\n        spreadsheetId: this.spreadsheetId,\n      });\n\n      const sheetNames = metadataResponse.data.sheets?.map((s: any) => s.properties?.title) || [];\n\n      // Find the purchasing sheet\n      let sheetName = sheetNames.find((name: string) => name.toLowerCase().includes(\"purchasing\")) || \"Purchasing\";\n\n      console.log(`🎯 Updating Purchasing Sourcing Method in sheet: \"${sheetName}\"`);\n\n      // Sourcing Method is column U (21st column)\n      const columnLetter = \"U\";\n      const cellRange = `'${sheetName}'!${columnLetter}${rowIndex + 2}`;\n\n      await sheets.spreadsheets.values.update({\n        spreadsheetId: this.spreadsheetId,\n        range: cellRange,\n        valueInputOption: \"USER_ENTERED\",\n        requestBody: {\n          values: [[newValue]],\n        },\n      });\n\n      console.log(`✅ Successfully updated Purchasing Sourcing Method at ${cellRange} to \"${newValue}\"`);\n      return { success: true };\n    } catch (error) {\n      console.error(\"❌ Error updating Purchasing Sourcing Method:\", error);\n      throw error;\n    }\n  }\n\n  async updatePurchasingNotes(rowIndex: number, newValue: string) {\n    try {\n      console.log(`🔄 Updating Purchasing Notes for row ${rowIndex + 2} to \"${newValue}\"`);\n\n      const sheets = await this.getSheets();\n\n      // Get sheet metadata to find purchasing sheet\n      const metadataResponse = await sheets.spreadsheets.get({\n        spreadsheetId: this.spreadsheetId,\n      });\n\n      const sheetNames = metadataResponse.data.sheets?.map((s: any) => s.properties?.title) || [];\n\n      // Find the purchasing sheet\n      let sheetName = sheetNames.find((name: string) => name.toLowerCase().includes(\"purchasing\")) || \"Purchasing\";\n\n      console.log(`🎯 Updating Purchasing Notes in sheet: \"${sheetName}\"`);\n\n      // Notes is column T (20th column)\n      const columnLetter = \"T\";\n      const cellRange = `'${sheetName}'!${columnLetter}${rowIndex + 2}`;\n\n      await sheets.spreadsheets.values.update({\n        spreadsheetId: this.spreadsheetId,\n        range: cellRange,\n        valueInputOption: \"USER_ENTERED\",\n        requestBody: {\n          values: [[newValue]],\n        },\n      });\n\n      console.log(`✅ Successfully updated Purchasing Notes at ${cellRange} to \"${newValue}\"`);\n      return { success: true };\n    } catch (error) {\n      console.error(\"❌ Error updating Purchasing Notes:\", error);\n      throw error;\n    }\n  }\n\n  async readPurchasingSheet(): Promise<{\n    headers: string[];\n    items: Record<string, string>[];\n  }> {\n    try {\n      const sheets = await this.getSheets();\n\n      // Get sheet metadata to find purchasing sheet\n      const metadataResponse = await sheets.spreadsheets.get({\n        spreadsheetId: this.spreadsheetId,\n      });\n\n      const sheetNames =\n        metadataResponse.data.sheets?.map((s: any) => s.properties?.title) ||\n        [];\n      console.log(`📋 Available sheets: ${sheetNames.join(\", \")}`);\n\n      // Find the purchasing sheet\n      let sheetName = sheetNames.find((name: string) =>\n        name.toLowerCase().includes(\"purchasing\"),\n      ) || \"Purchasing\";\n\n      console.log(`🎯 Reading from Purchasing sheet: \"${sheetName}\"`);\n\n      // Get headers (29 columns: A-AC as requested)\n      const headerResponse = await sheets.spreadsheets.values.get({\n        spreadsheetId: this.spreadsheetId,\n        range: `'${sheetName}'!A1:AC1`,\n      });\n\n      // Get data (29 columns: A2-AC as requested)\n      const dataResponse = await sheets.spreadsheets.values.get({\n        spreadsheetId: this.spreadsheetId,\n        range: `'${sheetName}'!A2:AC`,\n      });\n\n      const headers = headerResponse.data.values?.[0] || [];\n      const rows = dataResponse.data.values || [];\n\n      // Filter out rows with empty Product Name or ASIN\n      const validRows = rows.filter((row: string[]) => {\n        const productName = row[4]; // Column E (Product Name)\n        const asin = row[5]; // Column F (ASIN)\n        return productName && productName.trim() !== '' && asin && asin.trim() !== '';\n      });\n\n      console.log(`📦 Found ${rows.length} total items, ${validRows.length} items after filtering out empty Product Name/ASIN`);\n\n      // Convert rows to objects with header keys, and clean currency values\n      const items = validRows.map((row: string[]) => {\n        const item: Record<string, string> = {};\n        headers.forEach((header: string, index: number) => {\n          let value = row[index] || \"\";\n          \n          // Clean European currency format for numeric columns\n          if (value && (header.includes('Price') || header.includes('Profit') || header.includes('Cost') || \n                       header.includes('Buy Box') || header.includes('Revenue') || header.includes('Spent') ||\n                       header.includes('Transfer') || header.includes('VAT'))) {\n            // Remove €, spaces, and convert comma decimal separator to dot\n            value = value.replace(/[€$£¥₹]/g, \"\")\n                        .replace(/\\s/g, \"\")\n                        .replace(/,/g, \".\");\n          }\n          \n          item[header] = value;\n        });\n        return item;\n      });\n      \n      return { headers, items };\n    } catch (error) {\n      console.error(\"Error reading purchasing sheet:\", error);\n      throw error;\n    }\n  }\n\n  async updatePurchasingStatus(rowIndex: number, newValue: string) {\n    try {\n      console.log(`🔄 Updating Purchasing Status for row ${rowIndex + 2} to \"${newValue}\"`);\n\n      const sheets = await this.getSheets();\n\n      // Get sheet metadata to find purchasing sheet\n      const metadataResponse = await sheets.spreadsheets.get({\n        spreadsheetId: this.spreadsheetId,\n      });\n\n      const sheetNames = metadataResponse.data.sheets?.map((s: any) => s.properties?.title) || [];\n\n      // Find the purchasing sheet\n      let sheetName = sheetNames.find((name: string) => name.toLowerCase().includes(\"purchasing\")) || \"Purchasing\";\n\n      console.log(`🎯 Updating Purchasing Status in sheet: \"${sheetName}\"`);\n\n      // Status is column V (22nd column)\n      const columnLetter = \"V\";\n      const cellRange = `'${sheetName}'!${columnLetter}${rowIndex + 2}`;\n\n      await sheets.spreadsheets.values.update({\n        spreadsheetId: this.spreadsheetId,\n        range: cellRange,\n        valueInputOption: \"USER_ENTERED\",\n        requestBody: {\n          values: [[newValue]],\n        },\n      });\n\n      console.log(`✅ Successfully updated Purchasing Status at ${cellRange} to \"${newValue}\"`);\n      return { success: true };\n    } catch (error) {\n      console.error(\"❌ Error updating Purchasing Status:\", error);\n      throw error;\n    }\n  }\n}\n\n// Export utility functions for external use\nexport function parseMoneySmart(value: string): number {\n  return googleSheetsService.parseMoneySmart(value);\n}\n\nexport function parsePercentMaybe(value: string): number | null {\n  return googleSheetsService.parsePercentMaybe(value);\n}\n\nexport function parseNumericValue(value: any): number | null {\n  if (value === null || value === undefined || value === \"\") return null;\n\n  const str = String(value).trim();\n  if (!str) return null;\n\n  // Handle special cases like \"> 29\", \"< 5\", etc.\n  const numericStr = str.replace(/[^\\d,-]/g, \"\");\n  if (!numericStr) return null;\n\n  // Handle German decimal comma\n  const normalized = numericStr.replace(\",\", \".\");\n  const parsed = parseFloat(normalized);\n\n  return isNaN(parsed) ? null : parsed;\n}\n\nexport async function readSourcingSheet() {\n  return googleSheetsService.readSourcingSheet();\n}\n\nexport const googleSheetsService = new GoogleSheetsService();\n","size_bytes":35771},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport aws4 from \"aws4\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertSourcingSchema, insertPurchasingPlanSchema, insertListingSchema, insertSourcingFileSchema } from \"@shared/schema\";\nimport { googleSheetsService, parseMoneySmart, parsePercentMaybe, parseNumericValue, readSourcingSheet } from \"./googleSheetsService\";\nimport { z } from \"zod\";\n\n// Amazon SP-API SDK imports (for catalog items only)\nimport { CatalogItemsApiClient } from '@scaleleap/selling-partner-api-sdk';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configure multer for file uploads\n  const uploadStorage = multer.diskStorage({\n    destination: (req, file, cb) => {\n      const uploadDir = 'uploads/sourcing';\n      if (!fs.existsSync(uploadDir)) {\n        fs.mkdirSync(uploadDir, { recursive: true });\n      }\n      cb(null, uploadDir);\n    },\n    filename: (req, file, cb) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      const extension = path.extname(file.originalname);\n      cb(null, file.fieldname + '-' + uniqueSuffix + extension);\n    }\n  });\n\n  const upload = multer({\n    storage: uploadStorage,\n    limits: {\n      fileSize: 10 * 1024 * 1024, // 10MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      const allowedTypes = /jpeg|jpg|png|gif|pdf|doc|docx|xls|xlsx/;\n      const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n      const mimetype = allowedTypes.test(file.mimetype);\n      if (mimetype && extname) {\n        return cb(null, true);\n      } else {\n        cb(new Error('Invalid file type'));\n      }\n    }\n  });\n\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUserStats(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Sourcing routes (Google Sheets Integration)\n  app.post('/api/sourcing', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const sourcingData = insertSourcingSchema.parse(req.body);\n\n      // Calculate profit and margin\n      const costPrice = Number(sourcingData.costPrice);\n      const salePrice = Number(sourcingData.salePrice);\n      const profit = salePrice - costPrice;\n      const profitMargin = salePrice > 0 ? (profit / salePrice) * 100 : 0;\n      const roi = costPrice > 0 ? (profit / costPrice) * 100 : 0;\n\n      const sourcing = await storage.createSourcing({\n        ...sourcingData,\n        submittedBy: userId,\n        profit: profit.toString(),\n        profitMargin: profitMargin.toString(),\n        roi: roi.toString(),\n      });\n\n      // Log activity\n      await storage.logActivity({\n        userId,\n        action: 'sourcing_submitted',\n        entityType: 'sourcing',\n        entityId: sourcing.id,\n        description: `Sourcing für \"${sourcingData.productName}\" eingereicht`,\n      });\n\n      res.json(sourcing);\n    } catch (error) {\n      console.error(\"Error creating sourcing:\", error);\n      res.status(400).json({ message: \"Failed to create sourcing item\" });\n    }\n  });\n\n  app.get('/api/sourcing', isAuthenticated, async (req: any, res) => {\n    try {\n      const { status, limit } = req.query;\n      const userId = req.user.claims.sub;\n      const userRole = req.user.claims.role || 'va';\n\n      const options: any = {};\n      if (status) options.status = status;\n      if (limit) options.limit = parseInt(limit);\n      \n      // VAs can only see their own sourcing\n      if (userRole === 'va') {\n        options.submittedBy = userId;\n      }\n\n      const sourcing = await storage.getSourcing(options);\n      res.json(sourcing);\n    } catch (error) {\n      console.error(\"Error fetching sourcing:\", error);\n      res.status(500).json({ message: \"Failed to fetch sourcing items\" });\n    }\n  });\n\n  app.patch('/api/sourcing/:id/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const userRole = req.user.claims.role || 'va';\n      \n      // Only admins can update sourcing status\n      if (userRole !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const { status, reviewNotes } = req.body;\n      const sourcingId = req.params.id;\n\n      await storage.updateSourcingStatus(sourcingId, status, userId, reviewNotes);\n\n      // Log activity\n      await storage.logActivity({\n        userId,\n        action: 'sourcing_status_updated',\n        entityType: 'sourcing',\n        entityId: sourcingId,\n        description: `Sourcing Status zu \"${status}\" geändert`,\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating sourcing status:\", error);\n      res.status(500).json({ message: \"Failed to update sourcing status\" });\n    }\n  });\n\n  // Purchasing routes\n  app.post('/api/purchasing', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const userRole = req.user.claims.role || 'va';\n      \n      // Only admins can create purchasing plans\n      if (userRole !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const planData = insertPurchasingPlanSchema.parse(req.body);\n      \n      // Calculate expected revenue and profit\n      const quantity = planData.plannedQuantity;\n      const costPerUnit = Number(planData.costPerUnit);\n      const plannedBudget = Number(planData.plannedBudget);\n      \n      // Get sourcing item to calculate sale price\n      const sourcingItem = await storage.getSourcingItem(planData.sourcingId);\n      if (!sourcingItem) {\n        return res.status(404).json({ message: \"Sourcing item not found\" });\n      }\n\n      const salePrice = Number(sourcingItem.salePrice);\n      const expectedRevenue = quantity * salePrice;\n      const expectedProfit = expectedRevenue - plannedBudget;\n      \n      // Check margin warning (if profit margin < 15%)\n      const marginWarning = (expectedProfit / expectedRevenue) < 0.15;\n\n      const plan = await storage.createPurchasingPlan({\n        ...planData,\n        expectedRevenue: expectedRevenue.toString(),\n        expectedProfit: expectedProfit.toString(),\n        marginWarning,\n      });\n\n      // Log activity\n      await storage.logActivity({\n        userId,\n        action: 'purchasing_plan_created',\n        entityType: 'purchasing',\n        entityId: plan.id,\n        description: `Einkaufsplan für ${quantity} Einheiten erstellt`,\n      });\n\n      res.json(plan);\n    } catch (error) {\n      console.error(\"Error creating purchasing plan:\", error);\n      res.status(400).json({ message: \"Failed to create purchasing plan\" });\n    }\n  });\n\n  app.get('/api/purchasing', isAuthenticated, async (req: any, res) => {\n    try {\n      const { status, limit } = req.query;\n      const options: any = {};\n      if (status) options.status = status;\n      if (limit) options.limit = parseInt(limit);\n\n      const plans = await storage.getPurchasingPlans(options);\n      res.json(plans);\n    } catch (error) {\n      console.error(\"Error fetching purchasing plans:\", error);\n      res.status(500).json({ message: \"Failed to fetch purchasing plans\" });\n    }\n  });\n\n  app.patch('/api/purchasing/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const userRole = req.user.claims.role || 'va';\n      \n      if (userRole !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const planId = req.params.id;\n      const updates = req.body;\n\n      await storage.updatePurchasingPlan(planId, updates);\n\n      await storage.logActivity({\n        userId,\n        action: 'purchasing_plan_updated',\n        entityType: 'purchasing',\n        entityId: planId,\n        description: `Einkaufsplan aktualisiert`,\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating purchasing plan:\", error);\n      res.status(500).json({ message: \"Failed to update purchasing plan\" });\n    }\n  });\n\n  // Listing routes (SKU Management)\n  app.post('/api/listings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const userRole = req.user.claims.role || 'va';\n      \n      // Only admins can create listings\n      if (userRole !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const { sourcingId, purchasingId } = req.body;\n      \n      // Get sourcing item for SKU generation\n      const sourcingItem = await storage.getSourcingItem(sourcingId);\n      if (!sourcingItem) {\n        return res.status(404).json({ message: \"Sourcing item not found\" });\n      }\n\n      // Generate SKU\n      const skuCode = storage.generateSKU(\n        sourcingItem.brand || 'UNKNOWN',\n        Number(sourcingItem.costPrice),\n        sourcingItem.asin\n      );\n\n      const date = new Date();\n      const generatedDate = date.toISOString().slice(2, 10).replace(/-/g, '').slice(0, 6);\n\n      const listing = await storage.createListing({\n        sourcingId,\n        purchasingId,\n        skuCode,\n        brand: sourcingItem.brand || 'UNKNOWN',\n        buyPrice: sourcingItem.costPrice,\n        asin: sourcingItem.asin,\n        generatedDate,\n      });\n\n      // Log activity\n      await storage.logActivity({\n        userId,\n        action: 'listing_created',\n        entityType: 'listing',\n        entityId: listing.id,\n        description: `Listing ${skuCode} erstellt`,\n      });\n\n      res.json(listing);\n    } catch (error) {\n      console.error(\"Error creating listing:\", error);\n      res.status(500).json({ message: \"Failed to create listing\" });\n    }\n  });\n\n  app.get('/api/listings', isAuthenticated, async (req: any, res) => {\n    try {\n      const { status, limit } = req.query;\n      const options: any = {};\n      if (status) options.status = status;\n      if (limit) options.limit = parseInt(limit);\n\n      const listings = await storage.getListings(options);\n      res.json(listings);\n    } catch (error) {\n      console.error(\"Error fetching listings:\", error);\n      res.status(500).json({ message: \"Failed to fetch listings\" });\n    }\n  });\n\n  app.patch('/api/listings/:id/sync', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const userRole = req.user.claims.role || 'va';\n      \n      if (userRole !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const listingId = req.params.id;\n      const { amazonStatus, prepMyBusinessStatus } = req.body;\n\n      await storage.updateListingStatus(listingId, amazonStatus, prepMyBusinessStatus);\n\n      await storage.logActivity({\n        userId,\n        action: 'listing_sync_updated',\n        entityType: 'listing',\n        entityId: listingId,\n        description: `Listing Sync-Status aktualisiert`,\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating listing sync status:\", error);\n      res.status(500).json({ message: \"Failed to update listing sync status\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get('/api/dashboard/kpis', isAuthenticated, async (req, res) => {\n    try {\n      const kpis = await storage.getKpiData();\n      res.json(kpis);\n    } catch (error) {\n      console.error(\"Error fetching KPIs:\", error);\n      res.status(500).json({ message: \"Failed to fetch KPIs\" });\n    }\n  });\n\n  app.get('/api/dashboard/pipeline', isAuthenticated, async (req, res) => {\n    try {\n      const pipeline = await storage.getSourcingStats();\n      res.json(pipeline);\n    } catch (error) {\n      console.error(\"Error fetching pipeline data:\", error);\n      res.status(500).json({ message: \"Failed to fetch pipeline data\" });\n    }\n  });\n\n  app.get('/api/activities', isAuthenticated, async (req, res) => {\n    try {\n      const { limit } = req.query;\n      const activities = await storage.getRecentActivities(limit ? parseInt(limit as string) : 20);\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching activities:\", error);\n      res.status(500).json({ message: \"Failed to fetch activities\" });\n    }\n  });\n\n  // VA Performance routes\n  app.get('/api/va/performance/:userId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.params.userId;\n      const userRole = req.user.claims.role || 'va';\n      const currentUserId = req.user.claims.sub;\n      \n      // VAs can only see their own performance, admins can see any\n      if (userRole === 'va' && userId !== currentUserId) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const { weeks } = req.query;\n      const performance = await storage.getVAPerformance(userId, weeks ? parseInt(weeks as string) : 4);\n      res.json(performance);\n    } catch (error) {\n      console.error(\"Error fetching VA performance:\", error);\n      res.status(500).json({ message: \"Failed to fetch VA performance\" });\n    }\n  });\n\n  // Mock API integration endpoints\n  app.post('/api/integrations/amazon/sync', isAuthenticated, async (req: any, res) => {\n    try {\n      const userRole = req.user.claims.role || 'va';\n      if (userRole !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      // Mock Amazon SP-API sync\n      setTimeout(() => {\n        res.json({ \n          success: true, \n          message: \"Amazon SP-API sync completed\",\n          syncedListings: Math.floor(Math.random() * 50) + 10\n        });\n      }, 2000);\n    } catch (error) {\n      res.status(500).json({ message: \"Amazon sync failed\" });\n    }\n  });\n\n  app.post('/api/integrations/prepmybusiness/sync', isAuthenticated, async (req: any, res) => {\n    try {\n      const userRole = req.user.claims.role || 'va';\n      if (userRole !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      // Mock PrepMyBusiness API sync\n      setTimeout(() => {\n        res.json({ \n          success: true, \n          message: \"PrepMyBusiness sync completed\",\n          syncedJobs: Math.floor(Math.random() * 20) + 5\n        });\n      }, 1500);\n    } catch (error) {\n      res.status(500).json({ message: \"PrepMyBusiness sync failed\" });\n    }\n  });\n\n  // Google Sheets connection test endpoint\n  app.get('/api/integrations/google-sheets/test', async (req, res) => {\n    const spreadsheetId = \"1S06m7tQuejVvVpStS-gNKZMzrvdEsRCPuipxv1vEiTM\";\n    try {\n      console.log(\"🔍 Starting Google Sheets connection test...\");\n      console.log(\"📋 Environment check:\", {\n        hasSpreadsheetId: true,\n        hasGoogleCredentials: !!process.env.GOOGLE_CREDENTIALS,\n        hasServiceAccount: !!process.env.GOOGLE_SERVICE_ACCOUNT_JSON,\n        spreadsheetId: spreadsheetId\n      });\n      \n      const result = await googleSheetsService.testConnection();\n      \n      console.log(\"📊 Test result:\", JSON.stringify(result, null, 2));\n      \n      if (result.success) {\n        res.json({\n          ...result,\n          debugInfo: {\n            timestamp: new Date().toISOString(),\n            environment: {\n              hasSpreadsheetId: true,\n              hasGoogleCredentials: !!process.env.GOOGLE_CREDENTIALS,\n              hasServiceAccount: !!process.env.GOOGLE_SERVICE_ACCOUNT_JSON,\n              spreadsheetId: spreadsheetId\n            }\n          }\n        });\n      } else {\n        res.status(400).json({\n          ...result,\n          debugInfo: {\n            timestamp: new Date().toISOString(),\n            environment: {\n              hasSpreadsheetId: true,\n              hasGoogleCredentials: !!process.env.GOOGLE_CREDENTIALS,\n              hasServiceAccount: !!process.env.GOOGLE_SERVICE_ACCOUNT_JSON,\n              spreadsheetId: spreadsheetId\n            }\n          }\n        });\n      }\n\n    } catch (error) {\n      console.error(\"❌ Google Sheets test error:\", {\n        message: error instanceof Error ? error.message : 'Unknown error',\n        stack: error instanceof Error ? error.stack : undefined,\n        name: error instanceof Error ? error.name : undefined,\n        code: (error as any)?.code,\n        library: (error as any)?.library,\n        reason: (error as any)?.reason\n      });\n      \n      res.status(500).json({\n        success: false,\n        error: `Verbindungstest fehlgeschlagen: ${error instanceof Error ? error.message : 'Unbekannter Fehler'}`,\n        debugInfo: {\n          timestamp: new Date().toISOString(),\n          errorDetails: {\n            message: error instanceof Error ? error.message : 'Unknown error',\n            name: error instanceof Error ? error.name : undefined,\n            code: (error as any)?.code,\n            library: (error as any)?.library,\n            reason: (error as any)?.reason\n          },\n          environment: {\n            hasSpreadsheetId: true,\n            hasServiceAccount: !!process.env.GOOGLE_SERVICE_ACCOUNT_JSON,\n            spreadsheetId: spreadsheetId\n          }\n        }\n      });\n    }\n  });\n\n  // New endpoint to fetch sourcing data directly from Google Sheets\n  app.get('/api/sourcing/sheets', isAuthenticated, async (req, res) => {\n    try {\n      console.log(\"🔍 Fetching sourcing data directly from Google Sheets...\");\n      const { headers, items } = await readSourcingSheet();\n      \n      console.log(`📊 Found ${items.length} rows with headers: ${headers.join(', ')}`);\n      \n      // Get archived items from database to filter them out\n      const archivedItems = await storage.getSourcingItems(true); // showArchived = true\n      const archivedAsins = new Set(archivedItems.map(item => item.asin));\n      \n      // Filter out archived items based on ASIN\n      const filteredItems = items.filter((item: any) => {\n        const asin = item['ASIN']?.trim();\n        return !archivedAsins.has(asin);\n      });\n      \n      console.log(`🔍 Filtered out ${items.length - filteredItems.length} archived items (${archivedAsins.size} total archived)`);\n      \n      res.json({\n        success: true,\n        headers,\n        items: filteredItems,\n        totalRows: filteredItems.length,\n        lastUpdated: new Date().toISOString()\n      });\n      \n    } catch (error) {\n      console.error(\"❌ Error fetching from Google Sheets:\", error);\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        headers: [],\n        items: []\n      });\n    }\n  });\n\n  // Sourcing Items database operations\n  app.post('/api/sourcing/items/save', isAuthenticated, async (req, res) => {\n    try {\n      const items = req.body;\n      await storage.upsertSourcingItems(items);\n      res.json({ success: true, message: 'Items saved successfully' });\n    } catch (error) {\n      console.error('Error saving sourcing items:', error);\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to save items',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  app.get('/api/sourcing/items', isAuthenticated, async (req, res) => {\n    try {\n      const showArchived = req.query.archived === 'true';\n      const items = await storage.getSourcingItems(showArchived);\n      res.json({ success: true, items });\n    } catch (error) {\n      console.error('Error fetching sourcing items:', error);\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to fetch items',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  app.post('/api/sourcing/items/:rowIndex/archive', isAuthenticated, async (req, res) => {\n    try {\n      const rowIndex = parseInt(req.params.rowIndex);\n      await storage.archiveSourcingItem(rowIndex);\n      res.json({ success: true, message: 'Item archived successfully' });\n    } catch (error) {\n      console.error('Error archiving sourcing item:', error);\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to archive item',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  app.delete('/api/sourcing/items/:rowIndex', isAuthenticated, async (req, res) => {\n    try {\n      const rowIndex = parseInt(req.params.rowIndex);\n      \n      // Delete from Google Sheets first\n      await googleSheetsService.deleteRow(rowIndex);\n      \n      // Then delete from database\n      await storage.deleteSourcingItem(rowIndex);\n      \n      res.json({ success: true, message: 'Item deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting sourcing item:', error);\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to delete item',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // New endpoint to fetch purchasing data directly from Google Sheets  \n  app.get('/api/purchasing/sheets', isAuthenticated, async (req, res) => {\n    try {\n      console.log(\"🔍 Fetching purchasing data directly from Google Sheets...\");\n      const { headers, items } = await googleSheetsService.readPurchasingSheet();\n      \n      console.log(`📦 Found ${items.length} items in Purchasing sheet with headers: ${headers.join(', ')}`);\n      \n      // Return raw data directly from sheets\n      res.json({\n        success: true,\n        headers,\n        items,\n        totalRows: items.length,\n        lastUpdated: new Date().toISOString()\n      });\n      \n    } catch (error: any) {\n      console.error(\"❌ Error reading Purchasing Sheet:\", error);\n      res.status(500).json({ \n        success: false, \n        message: error.message || \"Failed to read purchasing data from Google Sheets\" \n      });\n    }\n  });\n\n  // Purchasing Sheet Update Endpoints\n  app.post('/api/purchasing/update-product-review', isAuthenticated, async (req, res) => {\n    try {\n      const { rowIndex, productReview } = req.body;\n\n      if (typeof rowIndex !== 'number' || rowIndex < 0) {\n        return res.status(400).json({ message: \"Invalid row index\" });\n      }\n\n      if (!productReview || productReview.trim() === '') {\n        return res.status(400).json({ message: \"Product review is required\" });\n      }\n\n      console.log(`🔄 Updating Purchasing Product Review for row ${rowIndex} to \"${productReview}\"`);\n      \n      const result = await googleSheetsService.updatePurchasingProductReview(rowIndex, productReview);\n      \n      res.json({\n        success: true,\n        message: `Product review updated to \"${productReview}\"`,\n        data: result\n      });\n    } catch (error) {\n      console.error(\"❌ Error updating Purchasing Product Review:\", error);\n      res.status(500).json({ \n        message: \"Failed to update product review\"\n      });\n    }\n  });\n\n  app.post('/api/purchasing/update-sourcing-method', isAuthenticated, async (req, res) => {\n    try {\n      const { rowIndex, sourcingMethod } = req.body;\n\n      if (typeof rowIndex !== 'number' || rowIndex < 0) {\n        return res.status(400).json({ message: \"Invalid row index\" });\n      }\n\n      if (!sourcingMethod || sourcingMethod.trim() === '') {\n        return res.status(400).json({ message: \"Sourcing method is required\" });\n      }\n\n      console.log(`🔄 Updating Purchasing Sourcing Method for row ${rowIndex} to \"${sourcingMethod}\"`);\n      \n      const result = await googleSheetsService.updatePurchasingSourcingMethod(rowIndex, sourcingMethod);\n      \n      res.json({\n        success: true,\n        message: `Sourcing method updated to \"${sourcingMethod}\"`,\n        data: result\n      });\n    } catch (error) {\n      console.error(\"❌ Error updating Purchasing Sourcing Method:\", error);\n      res.status(500).json({ \n        message: \"Failed to update sourcing method\"\n      });\n    }\n  });\n\n  app.post('/api/purchasing/update-notes', isAuthenticated, async (req, res) => {\n    try {\n      const { rowIndex, notes } = req.body;\n\n      if (typeof rowIndex !== 'number' || rowIndex < 0) {\n        return res.status(400).json({ message: \"Invalid row index\" });\n      }\n\n      console.log(`🔄 Updating Purchasing Notes for row ${rowIndex}`);\n      \n      const result = await googleSheetsService.updatePurchasingNotes(rowIndex, notes || '');\n      \n      res.json({\n        success: true,\n        message: \"Notes updated successfully\",\n        data: result\n      });\n    } catch (error) {\n      console.error(\"❌ Error updating Purchasing Notes:\", error);\n      res.status(500).json({ \n        message: \"Failed to update notes\"\n      });\n    }\n  });\n\n  app.post('/api/purchasing/update-status', isAuthenticated, async (req, res) => {\n    try {\n      const { rowIndex, status } = req.body;\n\n      if (typeof rowIndex !== 'number' || rowIndex < 0) {\n        return res.status(400).json({ message: \"Invalid row index\" });\n      }\n\n      if (!status || status.trim() === '') {\n        return res.status(400).json({ message: \"Status is required\" });\n      }\n\n      console.log(`🔄 Updating Purchasing Status for row ${rowIndex} to \"${status}\"`);\n      \n      const result = await googleSheetsService.updatePurchasingStatus(rowIndex, status);\n      \n      res.json({\n        success: true,\n        message: `Status updated to \"${status}\"`,\n        data: result\n      });\n    } catch (error) {\n      console.error(\"❌ Error updating Purchasing Status:\", error);\n      res.status(500).json({ \n        message: \"Failed to update status\"\n      });\n    }\n  });\n\n  // === PrepMyBusiness API Routes ===\n  \n  // Test PrepMyBusiness API connection\n  app.get('/api/purchasing/test-prepmybusiness', isAuthenticated, async (req, res) => {\n    try {\n      const apiUrl = \"https://portal.beeprep.de/api\";\n      const apiKey = process.env.PREPMYBUSINESS_API_KEY;\n      const merchantId = process.env.PREPMYBUSINESS_MERCHANT_ID;\n\n      if (!apiKey || !merchantId) {\n        return res.status(500).json({ \n          message: 'PrepMyBusiness API credentials not configured' \n        });\n      }\n\n      // Test different endpoints to see what's available\n      const testEndpoints = [\n        `${apiUrl}/health`,\n        `${apiUrl}/status`, \n        `${apiUrl}/v1`,\n        `${apiUrl}/merchants`,\n        `${apiUrl}/products`,\n        `${apiUrl}/shipments`,\n      ];\n\n      const results = [];\n      \n      for (const endpoint of testEndpoints) {\n        try {\n          console.log(`🔍 Testing endpoint: ${endpoint}`);\n          const response = await fetch(endpoint, {\n            method: 'GET',\n            headers: {\n              'Authorization': `Bearer ${apiKey}`,\n              'X-Merchant-ID': merchantId,\n              'Accept': 'application/json',\n            },\n          });\n\n          results.push({\n            endpoint,\n            status: response.status,\n            ok: response.ok,\n            contentType: response.headers.get('content-type')\n          });\n        } catch (error) {\n          results.push({\n            endpoint,\n            error: error.message\n          });\n        }\n      }\n\n      res.json({ \n        success: true,\n        message: 'API endpoint test completed',\n        results,\n        credentials: {\n          apiUrl,\n          hasApiKey: !!apiKey,\n          hasMerchantId: !!merchantId,\n        }\n      });\n\n    } catch (error) {\n      console.error('Error testing PrepMyBusiness API:', error);\n      res.status(500).json({ \n        message: 'Failed to test API connection',\n        error: error.message \n      });\n    }\n  });\n  \n  // Create shipment via PrepMyBusiness API (3-step process)\n  app.post('/api/purchasing/create-shipment', isAuthenticated, async (req, res) => {\n    try {\n      const { asin, productName, quantity } = req.body;\n      \n      if (!asin || !productName || !quantity) {\n        return res.status(400).json({ \n          message: 'ASIN, product name, and quantity are required' \n        });\n      }\n\n      const apiUrl = \"https://portal.beeprep.de/api\";\n      const apiKey = process.env.PREPMYBUSINESS_API_KEY;\n      const merchantId = process.env.PREPMYBUSINESS_MERCHANT_ID;\n\n      if (!apiKey || !merchantId) {\n        return res.status(500).json({ \n          message: 'PrepMyBusiness API credentials not configured' \n        });\n      }\n\n      console.log('🚛 Starting PrepMyBusiness shipment creation for:', { asin, productName, quantity });\n\n      // STEP 1: Create inventory item\n      const merchantSku = `SKU-${asin}-${Date.now()}`;\n      \n      const inventoryPayload = {\n        merchant_sku: merchantSku,\n        title: productName,\n        condition: \"new\"\n      };\n\n      console.log('📦 Step 1: Creating inventory item:', inventoryPayload);\n\n      const inventoryResponse = await fetch(`${apiUrl}/inventory`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`,\n          'Accept': 'application/json',\n          'X-Selected-Client-Id': merchantId,\n        },\n        body: JSON.stringify(inventoryPayload),\n      });\n\n      if (!inventoryResponse.ok) {\n        const errorText = await inventoryResponse.text();\n        console.error('❌ Failed to create inventory item:', inventoryResponse.status, errorText);\n        return res.status(inventoryResponse.status).json({ \n          message: `Failed to create inventory item: ${inventoryResponse.status}`,\n          details: errorText \n        });\n      }\n\n      const inventoryResult = await inventoryResponse.json();\n      console.log('📝 Step 1: Full inventory API response:', JSON.stringify(inventoryResult, null, 2));\n      \n      // Handle different possible response structures\n      let itemId;\n      if (inventoryResult.item_details?.id) {\n        itemId = inventoryResult.item_details.id;\n      } else if (inventoryResult.id) {\n        itemId = inventoryResult.id;\n      } else if (inventoryResult.data?.id) {\n        itemId = inventoryResult.data.id;\n      } else {\n        console.error('❌ Unexpected inventory response structure:', inventoryResult);\n        return res.status(500).json({ \n          message: 'Unexpected inventory API response structure',\n          details: 'Could not find item ID in response',\n          response: inventoryResult\n        });\n      }\n      \n      console.log('✅ Step 1: Inventory item created successfully with ID:', itemId);\n\n      // STEP 2: Create shipment\n      const shipmentPayload = {\n        name: productName,\n        notes: `Automated shipment for ASIN: ${asin}`,\n        warehouse_id: '477'\n      };\n\n      console.log('🚢 Step 2: Creating shipment:', shipmentPayload);\n\n      const shipmentResponse = await fetch(`${apiUrl}/shipments/inbound?api_token=${apiKey}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'X-Selected-Client-Id': merchantId,\n        },\n        body: JSON.stringify(shipmentPayload),\n      });\n\n      if (!shipmentResponse.ok) {\n        const errorText = await shipmentResponse.text();\n        console.error('❌ Failed to create shipment:', shipmentResponse.status, errorText);\n        return res.status(shipmentResponse.status).json({ \n          message: `Failed to create shipment: ${shipmentResponse.status}`,\n          details: errorText \n        });\n      }\n\n      const shipmentResult = await shipmentResponse.json();\n      console.log('📝 Step 2: Full shipment API response:', JSON.stringify(shipmentResult, null, 2));\n      \n      // Handle different possible response structures\n      let shipmentId;\n      if (shipmentResult.id) {\n        shipmentId = shipmentResult.id;\n      } else if (shipmentResult.data?.id) {\n        shipmentId = shipmentResult.data.id;\n      } else if (shipmentResult.shipment?.id) {\n        shipmentId = shipmentResult.shipment.id;\n      } else if (shipmentResult.shipment_id) {  // Add this block\n        shipmentId = shipmentResult.shipment_id;\n      } else {\n        console.error('❌ Unexpected shipment response structure:', shipmentResult);\n        return res.status(500).json({ \n          message: 'Unexpected shipment API response structure',\n          details: 'Could not find shipment ID in response',\n          response: shipmentResult\n        });\n      }\n\n      \n      console.log('✅ Step 2: Shipment created successfully with ID:', shipmentId);\n\n      // STEP 3: Add item to shipment\n      const addItemPayload = {\n        item_id: itemId,\n        quantity: parseInt(quantity)\n      };\n\n      console.log('➕ Step 3: Adding item to shipment:', addItemPayload);\n\n      const addItemResponse = await fetch(`${apiUrl}/shipments/inbound/${shipmentId}/add-item?api_token=${apiKey}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'X-Selected-Client-Id': merchantId,\n        },\n        body: JSON.stringify(addItemPayload),\n      });\n\n      if (!addItemResponse.ok) {\n        const errorText = await addItemResponse.text();\n        console.error('❌ Failed to add item to shipment:', addItemResponse.status, errorText);\n        return res.status(addItemResponse.status).json({ \n          message: `Failed to add item to shipment: ${addItemResponse.status}`,\n          details: errorText \n        });\n      }\n\n      const addItemResult = await addItemResponse.json();\n      console.log('✅ Step 3: Item added to shipment successfully:', addItemResult);\n\n      res.json({ \n        success: true, \n        message: 'Shipment created successfully via PrepMyBusiness',\n        data: {\n          inventoryItem: {\n            id: itemId,\n            merchantSku: merchantSku\n          },\n          shipment: {\n            id: shipmentId,\n            name: productName\n          },\n          quantity: parseInt(quantity)\n        }\n      });\n\n    } catch (error) {\n      console.error('❌ Error creating PrepMyBusiness shipment:', error);\n      res.status(500).json({ \n        message: 'Failed to create shipment',\n        error: error.message \n      });\n    }\n  });\n\n  // Purchasing Files Endpoints\n  app.post('/api/purchasing/files/upload', isAuthenticated, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'No file uploaded' });\n      }\n\n      const { rowIndex, asin } = req.body;\n      const userId = req.user.claims.sub;\n\n      if (!rowIndex || !asin) {\n        return res.status(400).json({ message: 'Row index and ASIN are required' });\n      }\n\n      const fileData = {\n        userId,\n        rowIndex: parseInt(rowIndex),\n        asin,\n        filename: req.file.filename,\n        originalName: req.file.originalname,\n        mimeType: req.file.mimetype,\n        fileSize: req.file.size,\n        filePath: req.file.path\n      };\n\n      const file = await storage.createPurchasingFile(fileData);\n      res.json({ success: true, file });\n\n    } catch (error) {\n      console.error('Error uploading purchasing file:', error);\n      res.status(500).json({ message: 'Failed to upload file' });\n    }\n  });\n\n  app.get('/api/purchasing/files/:rowIndex', isAuthenticated, async (req, res) => {\n    try {\n      const rowIndex = parseInt(req.params.rowIndex);\n      const files = await storage.getPurchasingFilesByRow(rowIndex);\n      res.json({ files });\n    } catch (error) {\n      console.error('Error fetching purchasing files:', error);\n      res.status(500).json({ message: 'Failed to fetch files' });\n    }\n  });\n\n  app.delete('/api/purchasing/files/:fileId', isAuthenticated, async (req, res) => {\n    try {\n      const fileId = req.params.fileId;\n      await storage.deletePurchasingFile(fileId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error deleting purchasing file:', error);\n      res.status(500).json({ message: 'Failed to delete file' });\n    }\n  });\n\n  app.get('/api/purchasing/files/download/:fileId', async (req, res) => {\n    try {\n      const fileId = req.params.fileId;\n      const file = await storage.getPurchasingFile(fileId);\n      \n      if (!file) {\n        return res.status(404).json({ message: 'File not found' });\n      }\n\n      res.download(file.filePath, file.originalName);\n    } catch (error) {\n      console.error('Error downloading purchasing file:', error);\n      res.status(500).json({ message: 'Failed to download file' });\n    }\n  });\n\n  // Purchasing Items Endpoints\n  app.post('/api/purchasing/items/save', isAuthenticated, async (req: any, res) => {\n    try {\n      const items = req.body;\n      const userId = req.user.claims.sub;\n\n      if (!Array.isArray(items)) {\n        return res.status(400).json({ message: 'Items must be an array' });\n      }\n\n      // Sanitize all numeric fields to prevent database parsing errors\n      const sanitizeNumericValue = (value: any): string | null => {\n        if (value === null || value === undefined) return null;\n        \n        const str = String(value).trim();\n        if (str === '') return null;\n        \n        // Remove currency symbols, percentages, spaces\n        let cleaned = str.replace(/[€$£¥₹%]/g, \"\").replace(/\\s/g, \"\");\n        \n        // Convert European decimal comma to dot\n        cleaned = cleaned.replace(/,/g, \".\");\n        \n        return cleaned || null;\n      };\n\n      let failedCount = 0;\n      const failedItems: any[] = [];\n      \n      const cleanedItems = items.map((item, index) => {\n        try {\n          const cleanedItem: any = { ...item };\n          \n          // Sanitize all potentially numeric fields\n          const numericFields = ['costPrice', 'salePrice', 'profit', 'profitMargin', 'roi', \n                                'buyBoxAverage90Days', 'revenue', 'spent', 'transfer', 'woVat',\n                                'estimatedSales', 'fbaSellerCount', 'fbmSellerCount',\n                                'Cost Price', 'Sale Price', 'Profit', 'Profit Margin', 'R.O.I.',\n                                'Buy Box (Average Last 90 Days)', 'Revenue', 'Spent', 'Transfer', 'wo VAT',\n                                'Estimated Sales', 'FBA Seller Count', 'FBM Seller Count'];\n          \n          numericFields.forEach(field => {\n            if (cleanedItem[field] !== undefined) {\n              cleanedItem[field] = sanitizeNumericValue(cleanedItem[field]);\n            }\n          });\n          \n          return cleanedItem;\n        } catch (error) {\n          console.error(`❌ Error sanitizing item ${index}:`, error);\n          failedCount++;\n          failedItems.push({ index, error: error.message });\n          return item; // Return original on sanitization error\n        }\n      });\n\n\n      try {\n        await storage.savePurchasingItems(cleanedItems, userId);\n        console.log(`✅ Successfully saved all ${cleanedItems.length} purchasing items`);\n        res.json({ success: true, saved: cleanedItems.length, failed: failedCount });\n      } catch (error) {\n        console.error(`❌ Database save failed:`, error);\n        failedCount = cleanedItems.length; // All failed if database error\n        res.status(400).json({ \n          success: false, \n          message: 'Failed to save items to database',\n          saved: 0,\n          failed: failedCount,\n          error: error.message\n        });\n      }\n\n    } catch (error) {\n      console.error('Error saving purchasing items:', error);\n      res.status(500).json({ message: 'Failed to save items' });\n    }\n  });\n\n  app.post('/api/purchasing/items/:rowIndex/archive', isAuthenticated, async (req: any, res) => {\n    try {\n      const rowIndex = parseInt(req.params.rowIndex);\n      const userId = req.user.claims.sub;\n\n      await storage.archivePurchasingItem(rowIndex, userId);\n      res.json({ success: true });\n\n    } catch (error) {\n      console.error('Error archiving purchasing item:', error);\n      res.status(500).json({ message: 'Failed to archive item' });\n    }\n  });\n\n  app.delete('/api/purchasing/items/:rowIndex', isAuthenticated, async (req: any, res) => {\n    try {\n      const rowIndex = parseInt(req.params.rowIndex);\n      \n      await storage.deletePurchasingItem(rowIndex);\n      res.json({ success: true });\n\n    } catch (error) {\n      console.error('Error deleting purchasing item:', error);\n      res.status(500).json({ message: 'Failed to delete item' });\n    }\n  });\n\n  app.get('/api/purchasing/items', isAuthenticated, async (req, res) => {\n    try {\n      const { archived } = req.query;\n      const options: any = {};\n      \n      if (archived === 'true') {\n        options.archived = true;\n      }\n\n      const items = await storage.getPurchasingItems(options);\n      res.json(items);\n\n    } catch (error) {\n      console.error('Error fetching purchasing items:', error);\n      res.status(500).json({ message: 'Failed to fetch items' });\n    }\n  });\n\n  // New endpoint to update Product Review in Google Sheets\n  app.patch('/api/sourcing/sheets/:rowIndex/product-review', isAuthenticated, async (req, res) => {\n    try {\n      const rowIndex = parseInt(req.params.rowIndex);\n      const { productReview } = req.body;\n\n      if (isNaN(rowIndex) || rowIndex < 0) {\n        return res.status(400).json({ success: false, message: \"Invalid row index\" });\n      }\n\n      if (!productReview || productReview.trim() === '') {\n        return res.status(400).json({ success: false, message: \"Product review value is required\" });\n      }\n\n      console.log(`🔄 Updating Product Review for row ${rowIndex} to \"${productReview}\"`);\n      \n      const result = await googleSheetsService.updateProductReview(rowIndex, productReview);\n      \n      res.json({\n        success: true,\n        message: `Product review updated to \"${productReview}\" for row ${rowIndex + 1}`,\n        rowIndex,\n        newValue: productReview\n      });\n    } catch (error) {\n      console.error(\"❌ Error updating Product Review:\", error);\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to update Product Review in Google Sheets\",\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // New endpoint to update Notes in Google Sheets\n  app.patch('/api/sourcing/sheets/:rowIndex/notes', isAuthenticated, async (req, res) => {\n    try {\n      const rowIndex = parseInt(req.params.rowIndex);\n      const { notes } = req.body;\n\n      if (isNaN(rowIndex) || rowIndex < 0) {\n        return res.status(400).json({ success: false, message: \"Invalid row index\" });\n      }\n\n      if (notes === undefined || notes === null) {\n        return res.status(400).json({ success: false, message: \"Notes value is required\" });\n      }\n\n      console.log(`🔄 Updating Notes for row ${rowIndex} to \"${notes}\"`);\n      \n      const result = await googleSheetsService.updateNotes(rowIndex, notes);\n      \n      res.json({\n        success: true,\n        message: `Notes updated for row ${rowIndex + 1}`,\n        rowIndex,\n        newValue: notes\n      });\n    } catch (error) {\n      console.error(\"❌ Error updating Notes:\", error);\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to update Notes in Google Sheets\",\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // New endpoint to update Sourcing Method in Google Sheets\n  app.patch('/api/sourcing/sheets/:rowIndex/sourcing-method', isAuthenticated, async (req, res) => {\n    try {\n      const rowIndex = parseInt(req.params.rowIndex);\n      const { sourcingMethod } = req.body;\n\n      if (isNaN(rowIndex) || rowIndex < 0) {\n        return res.status(400).json({ success: false, message: \"Invalid row index\" });\n      }\n\n      if (!sourcingMethod || sourcingMethod.trim() === '') {\n        return res.status(400).json({ success: false, message: \"Sourcing method value is required\" });\n      }\n\n      console.log(`🔄 Updating Sourcing Method for row ${rowIndex} to \"${sourcingMethod}\"`);\n      \n      const result = await googleSheetsService.updateSourcingMethod(rowIndex, sourcingMethod);\n      \n      res.json({\n        success: true,\n        message: `Sourcing method updated to \"${sourcingMethod}\" for row ${rowIndex + 1}`,\n        rowIndex,\n        newValue: sourcingMethod\n      });\n    } catch (error) {\n      console.error(\"❌ Error updating Sourcing Method:\", error);\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to update Sourcing Method in Google Sheets\",\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  app.post('/api/integrations/google-sheets/import', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub; // Use authenticated user\n      const { headers, items } = await readSourcingSheet();\n\n      console.log(`🔍 Found ${items.length} total rows in Google Sheets`);\n\n      // Header-Normalisierung (trim + lower)\n      const norm = (s: any) => String(s || \"\").trim();\n      const pick = (row: Record<string,string>, ...aliases: string[]) => {\n        for (const a of aliases) {\n          const key = Object.keys(row).find(k => norm(k).toLowerCase() === norm(a).toLowerCase());\n          if (key) return row[key];\n        }\n        return \"\";\n      };\n\n      const cleaned = items\n        .map((raw, index) => {\n          // New simplified column mapping\n          const date         = pick(raw, \"Export Date (UTC yyyy-mm-dd)\");\n          const asin         = pick(raw, \"ASIN\");\n          const quantity     = pick(raw, \"Quantity\");\n          const sourceUrl    = pick(raw, \"Source URL\");\n          const tags         = pick(raw, \"Tags\");\n          const notes        = pick(raw, \"All Notes\");\n          const costPrice    = parseMoneySmart(pick(raw, \"Cost Price\"));\n          const salePrice    = parseMoneySmart(pick(raw, \"Sale Price\"));\n          const marketplace  = pick(raw, \"Sales Marketplace\");\n          const estimatedSalesStr = pick(raw, \"Estimated Sales\");\n\n          // Skip completely empty rows\n          const allEmpty = [asin, sourceUrl, costPrice, salePrice].every(v => !String(v || \"\").trim());\n          if (allEmpty) return null;\n\n          // ASIN is required\n          if (!String(asin || \"\").trim()) {\n            console.log(`⚠️ Row ${index + 2}: Skipping - no ASIN`);\n            return null;\n          }\n\n          // Parse numeric values safely\n          const estimatedSalesNum = parseNumericValue(estimatedSalesStr);\n          const profit = salePrice - costPrice;\n\n          // Generate a simple product name from ASIN if not available\n          const productName = `Product ${String(asin).trim()}`;\n\n          return {\n            datum: date ? new Date(date) : new Date(),\n            imageUrl: null,\n            brand: null, // Not available in simplified format\n            productName: productName,\n            asin: String(asin).trim(),\n            eanBarcode: null,\n            sourceUrl: sourceUrl || null,\n            amazonUrl: null,\n            costPrice: costPrice.toString(),\n            salePrice: salePrice.toString(),\n            profit: profit.toString(),\n            profitMargin: salePrice > 0 ? ((profit / salePrice) * 100).toString() : \"0\",\n            roi: costPrice > 0 ? ((profit / costPrice) * 100).toString() : \"0\",\n            estimatedSales: estimatedSalesNum?.toString() || null,\n            fbaSellerCount: null,\n            fbmSellerCount: null,\n            productReview: null,\n            notes: [\n              notes,\n              quantity ? `Menge: ${quantity}` : null,\n              tags ? `Tags: ${tags}` : null, \n              marketplace ? `Marktplatz: ${marketplace}` : null\n            ].filter(Boolean).join(' | ') || null,\n            sourcingMethod: 'google-sheets-simplified',\n            submittedBy: userId,\n            status: 'new'\n          };\n        })\n        .filter(Boolean) as any[];\n\n      console.log(`✅ Processed ${cleaned.length} valid rows`);\n\n      let importedCount = 0;\n      const errors: string[] = [];\n\n      // Save each item to database\n      for (let i = 0; i < cleaned.length; i++) {\n        const item = cleaned[i];\n        const rowNumber = i + 2; // +2 because we skipped header and are 1-indexed\n\n        try {\n          // Check if ASIN already exists to avoid duplicates\n          const existingSourcing = await storage.getSourcingByAsin(item.asin);\n          if (existingSourcing) {\n            console.log(`⚠️ Row ${rowNumber}: Skipping duplicate ASIN ${item.asin}`);\n            continue;\n          }\n\n          // Save to database\n          await storage.createSourcing(item);\n          importedCount++;\n          console.log(`✅ Row ${rowNumber}: Imported ${item.productName} (${item.asin})`);\n\n        } catch (error) {\n          console.error(`❌ Row ${rowNumber}: Error saving ${item.productName}:`, error);\n          errors.push(`Zeile ${rowNumber}: ${error instanceof Error ? error.message : 'Unbekannter Fehler'}`);\n        }\n      }\n\n      // Log activity\n      await storage.logActivity({\n        userId,\n        action: 'google_sheets_import',\n        entityType: 'sourcing',\n        entityId: 'bulk_import',\n        description: `Google Sheets Import: ${importedCount} Deals importiert`,\n      });\n\n      console.log(`🎉 Import completed: ${importedCount}/${cleaned.length} items saved`);\n\n      // Verify data was saved\n      const allSourcing = await storage.getSourcing({ limit: 100 });\n      console.log(`📊 Database now contains ${allSourcing.length} sourcing items`);\n\n      res.json({\n        success: true,\n        message: `Import abgeschlossen: ${importedCount} von ${cleaned.length} Zeilen importiert`,\n        importedRows: importedCount,\n        totalRows: cleaned.length,\n        skippedDuplicates: cleaned.length - importedCount - errors.length,\n        databaseCount: allSourcing.length,\n        errors: errors.slice(0, 10) // Limit errors to first 10\n      });\n\n    } catch (e: any) {\n      console.error(\"❌ Google Sheets import error:\", e);\n      res.status(500).json({\n        success: false,\n        message: `Google Sheets Import fehlgeschlagen: ${e?.message || e}`,\n        errors: [String(e?.message || e)],\n      });\n    }\n  });\n\n  app.post('/api/integrations/keepa/buybox', isAuthenticated, async (req: any, res) => {\n    try {\n      const { asin } = req.body;\n      \n      // Mock Keepa API call for BuyBox data\n      setTimeout(() => {\n        res.json({\n          success: true,\n          asin,\n          buyBox: {\n            current: (Math.random() * 100 + 50).toFixed(2),\n            avg90Days: (Math.random() * 100 + 50).toFixed(2),\n            currency: 'EUR'\n          },\n          lastUpdated: new Date().toISOString()\n        });\n      }, 1000);\n    } catch (error) {\n      res.status(500).json({ message: \"Keepa API call failed\" });\n    }\n  });\n\n  // File upload endpoints for sourcing items\n  app.post('/api/sourcing/files/upload', isAuthenticated, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ success: false, message: 'No file uploaded' });\n      }\n\n      const { rowIndex, asin } = req.body;\n      const userId = req.user.claims.sub;\n\n      if (!rowIndex || !asin) {\n        return res.status(400).json({ success: false, message: 'Row index and ASIN are required' });\n      }\n\n      const fileInfo = {\n        rowIndex: parseInt(rowIndex),\n        asin,\n        originalName: req.file.originalname,\n        fileName: req.file.filename,\n        filePath: req.file.path,\n        fileSize: req.file.size,\n        mimeType: req.file.mimetype,\n        uploadedBy: userId,\n      };\n\n      const savedFile = await storage.saveFileInfo(fileInfo);\n\n      res.json({\n        success: true,\n        message: 'File uploaded successfully',\n        file: savedFile,\n      });\n    } catch (error) {\n      console.error('❌ Error uploading file:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to upload file',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  // Get files for a specific row\n  app.get('/api/sourcing/files/:rowIndex', isAuthenticated, async (req: any, res) => {\n    try {\n      const rowIndex = parseInt(req.params.rowIndex);\n      const userId = req.user.claims.sub;\n      \n      if (isNaN(rowIndex)) {\n        return res.status(400).json({ success: false, message: 'Invalid row index' });\n      }\n\n      // Get all files for this row\n      const files = await storage.getFilesByRowIndex(rowIndex);\n      \n      // Filter files to only include those uploaded by the current user\n      const userFiles = files.filter(file => file.uploadedBy === userId);\n\n      res.json({\n        success: true,\n        files: userFiles,\n      });\n    } catch (error) {\n      console.error('❌ Error fetching files:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to fetch files',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  // Download file\n  app.get('/api/sourcing/files/download/:fileId', isAuthenticated, async (req: any, res) => {\n    try {\n      const fileId = req.params.fileId;\n      const userId = req.user.claims.sub;\n      const file = await storage.getFileById(fileId);\n\n      if (!file) {\n        return res.status(404).json({ success: false, message: 'File not found' });\n      }\n\n      // Check if user owns this file\n      if (file.uploadedBy !== userId) {\n        return res.status(403).json({ success: false, message: 'Access denied' });\n      }\n\n      if (!fs.existsSync(file.filePath)) {\n        return res.status(404).json({ success: false, message: 'File not found on disk' });\n      }\n\n      res.setHeader('Content-Disposition', `attachment; filename=\"${file.originalName}\"`);\n      res.setHeader('Content-Type', file.mimeType);\n      res.sendFile(path.resolve(file.filePath));\n    } catch (error) {\n      console.error('❌ Error downloading file:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to download file',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  // Delete file\n  app.delete('/api/sourcing/files/:fileId', isAuthenticated, async (req: any, res) => {\n    try {\n      const fileId = req.params.fileId;\n      const userId = req.user.claims.sub;\n      const file = await storage.getFileById(fileId);\n\n      if (!file) {\n        return res.status(404).json({ success: false, message: 'File not found' });\n      }\n\n      // Check if user owns this file\n      if (file.uploadedBy !== userId) {\n        return res.status(403).json({ success: false, message: 'Access denied' });\n      }\n\n      // Delete file record from database first\n      await storage.deleteFile(fileId);\n\n      // Delete file from disk (safe to do after DB delete)\n      try {\n        if (fs.existsSync(file.filePath)) {\n          fs.unlinkSync(file.filePath);\n        }\n      } catch (diskError) {\n        // Log but don't fail the request - file record is already deleted\n        console.warn('⚠️ Warning: Failed to delete file from disk:', diskError);\n      }\n\n      res.json({\n        success: true,\n        message: 'File deleted successfully',\n      });\n    } catch (error) {\n      console.error('❌ Error deleting file:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to delete file',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  // Amazon SP-API Listing Creation (using only LWA tokens, no AWS credentials needed)\n  app.post('/api/purchasing/create-amazon-listing', isAuthenticated, async (req: any, res) => {\n    try {\n      // Check if user is admin (only admins can create Amazon listings)\n      const userRole = req.user?.claims?.role;\n      // if (userRole !== 'admin') {\n      //   return res.status(403).json({ \n      //     message: 'Access denied. Admin role required to create Amazon listings.' \n      //   });\n      // }\n\n      const { asin, productName, price, buyPrice, brand } = req.body;\n\n      if (!asin || !productName) {\n        return res.status(400).json({ \n          message: 'ASIN and product name are required' \n        });\n      }\n\n      if (!brand) {\n        return res.status(400).json({ \n          message: 'Brand is required for SKU generation' \n        });\n      }\n\n      if (!price) {\n        return res.status(400).json({ \n          message: 'Price is required for SKU generation' \n        });\n      }\n\n      // Generate SKU using pattern: Brand_BuyPrice_DATE_ASIN\n      const today = new Date();\n      const dateString = today.toISOString().split('T')[0].replace(/-/g, ''); // YYYYMMDD format\n      const cleanBrand = brand.replace(/[^a-zA-Z0-9]/g, ''); // Remove special characters\n      const cleanPrice = parseFloat(buyPrice.toString().replace(/[€,$]/g, '')).toFixed(2).replace('.', ''); // Remove currency and decimal\n      const generatedSku = `${cleanBrand}_${cleanPrice}_${dateString}_${asin}`;\n\n      console.log('🌐 Starting Amazon SP-API listing creation for:', {\n        asin,\n        brand,\n        productName: productName.substring(0, 50) + '...',\n        price,\n        buyPrice,\n        generatedSku,\n      });\n\n      console.log('📝 Generated SKU:', generatedSku);\n\n      // Step 1: Configuration for European marketplace\n      const marketplaceId = 'A1PA6795UKMFR9'; // Germany marketplace (primary for Europe)\n      \n      console.log('🔧 Initializing Amazon SP-API for European marketplace...');\n\n      // Step 2: Get product type using fetch-based Catalog Items API\n      const listingSku = generatedSku;\n\n      console.log('🔍 Step 2: Determining product type...');\n      let productType = 'LUGGAGE'; // Safe fallback product type\n      let catalogFailed = false;\n\n      // Try Catalog Items API using SDK (if permissions allow)\n      try {\n        console.log('🔍 Trying Catalog Items API SDK for ASIN:', asin);\n        \n        // SDK configuration for European marketplace with AWS + LWA credentials\n        const sdkConfig = {\n          basePath: 'https://sellingpartnerapi-eu.amazon.com', // Explicit European base path\n          region: 'eu-west-1' as const,\n          credentials: {\n            accessKeyId: process.env.AWS_ACCESS_KEY_ID!, // AWS IAM user credentials\n            secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!, // AWS IAM user credentials\n            SELLING_PARTNER_APP_CLIENT_ID: process.env.AMAZON_SP_CLIENT_ID!,\n            SELLING_PARTNER_APP_CLIENT_SECRET: process.env.AMAZON_SP_CLIENT_SECRET!,\n          },\n          refresh_token: process.env.AMAZON_SP_REFRESH_TOKEN!,\n          options: {\n            auto_request_tokens: true,\n            auto_request_throttled: true,\n            use_sandbox: false,\n            endpoints_versions: {\n              'catalog': '2022-04-01'\n            }\n          }\n        };\n\n        // Initialize Catalog API client with SDK\n        const catalogClient = new CatalogItemsApiClient(sdkConfig);\n        \n        // Get catalog item information by ASIN using SDK\n        const catalogResponse = await catalogClient.getCatalogItem({\n          asin: asin,\n          marketplaceId: marketplaceId, // Use singular marketplaceId\n          includedData: ['productTypes', 'classifications']\n        });\n\n        // Extract data from AxiosResponse\n        const catalogData = catalogResponse.data;\n        if (catalogData?.asin === asin) {\n          console.log('📦 Catalog API SDK successful - extracting product type...');\n          \n          // Extract product type from SDK response\n          let detectedType = null;\n          \n          if (catalogData.productTypes && catalogData.productTypes.length > 0) {\n            detectedType = catalogData.productTypes[0];\n          } else if (catalogData.classifications?.item?.productType) {\n            detectedType = catalogData.classifications.item.productType;\n          }\n          \n          if (detectedType) {\n            productType = detectedType;\n            console.log('✅ Catalog API SDK: Detected product type:', productType);\n            catalogFailed = false;\n          }\n        }\n      } catch (error: any) {\n        console.error('❌ Catalog API SDK error:', error?.message || error);\n        if (error?.response?.status === 403) {\n          console.log('🔒 403 Error: Missing \"Product Listing\" role permission for Catalog API');\n          console.log('💡 Solution: Add \"Product Listing\" role in Seller Central → Apps & Services → Your App');\n        }\n        catalogFailed = true;\n      }\n\n      // Fallback: Intelligent product type detection based on product name\n      if (catalogFailed || productType === 'LUGGAGE') {\n        console.log('🧠 Using intelligent product type detection for:', productName);\n        \n        const productNameLower = productName.toLowerCase();\n        \n        // Smart product type mapping based on keywords\n        if (productNameLower.includes('led') || productNameLower.includes('light') || productNameLower.includes('lamp') || productNameLower.includes('bulb')) {\n          productType = 'CE_LIGHTING';\n          console.log('💡 Detected lighting product, using CE_LIGHTING');\n        } else if (productNameLower.includes('cosmetic') || productNameLower.includes('makeup') || productNameLower.includes('beauty') || productNameLower.includes('skincare')) {\n          productType = 'BEAUTY';\n          console.log('💄 Detected beauty product, using BEAUTY');\n        } else if (productNameLower.includes('tool') || productNameLower.includes('drill') || productNameLower.includes('hammer') || productNameLower.includes('screwdriver')) {\n          productType = 'TOOLS';\n          console.log('🔨 Detected tool product, using TOOLS');\n        } else if (productNameLower.includes('home') || productNameLower.includes('kitchen') || productNameLower.includes('decoration') || productNameLower.includes('furniture')) {\n          productType = 'HOME';\n          console.log('🏠 Detected home product, using HOME');\n        } else if (productNameLower.includes('electronic') || productNameLower.includes('gadget') || productNameLower.includes('device') || productNameLower.includes('tech')) {\n          productType = 'CONSUMER_ELECTRONICS';\n          console.log('📱 Detected electronics, using CONSUMER_ELECTRONICS');\n        } else {\n          // Use safe generic types that work reliably with SP-API\n          const safeTypes = ['HOME', 'LUGGAGE', 'BEAUTY', 'TOOLS'];\n          productType = safeTypes[Math.floor(Math.random() * safeTypes.length)];\n          console.log('🎲 Using random safe product type:', productType);\n        }\n      }\n\n      // Step 3: Create the listing using fetch-based Listings API\n      console.log('📡 Step 3: Creating Amazon listing...');\n\n      try {\n        // Get LWA access token for listings API\n        const tokenResponse = await fetch('https://api.amazon.co.uk/auth/o2/token', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n          body: new URLSearchParams({\n            grant_type: 'refresh_token',\n            refresh_token: process.env.AMAZON_SP_REFRESH_TOKEN!,\n            client_id: process.env.AMAZON_SP_CLIENT_ID!,\n            client_secret: process.env.AMAZON_SP_CLIENT_SECRET!,\n          }),\n        });\n\n        if (!tokenResponse.ok) {\n          throw new Error(`Failed to get access token: ${tokenResponse.status}`);\n        }\n\n        const tokenResult = await tokenResponse.json();\n        const accessToken = tokenResult.access_token;\n\n        // Prepare listing data\n        const listingData: any = {\n          productType: productType,\n          requirements: 'LISTING',\n          attributes: {\n            condition_type: [{\n              value: 'new_new',\n              marketplace_id: marketplaceId,\n            }],\n            item_name: [{\n              value: productName,\n              marketplace_id: marketplaceId,\n            }],\n          },\n        };\n\n        // Add price if provided\n        const priceValue = parseFloat(price.toString().replace(/[€,$]/g, ''));\n        if (!isNaN(priceValue)) {\n          listingData.attributes.list_price = [{\n            value: { Amount: priceValue, CurrencyCode: 'EUR' },\n            marketplace_id: marketplaceId,\n          }];\n        }\n\n        console.log('📦 Step 3: Request payload with product type \"' + productType + '\":', JSON.stringify(listingData, null, 2));\n\n        // Create listing using reliable fetch API\n        const endpoint = `https://sellingpartnerapi-eu.amazon.com/listings/2021-08-01/items/${process.env.AMAZON_SP_SELLER_ID}/${listingSku}`;\n        const url = new URL(endpoint);\n        url.searchParams.append('marketplaceIds', marketplaceId);\n\n        const listingResponse = await fetch(url.toString(), {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'x-amz-access-token': accessToken,\n            'Accept': 'application/json',\n          },\n          body: JSON.stringify(listingData),\n        });\n\n        let listingResult;\n        try {\n          listingResult = await listingResponse.json();\n        } catch (e) {\n          listingResult = await listingResponse.text();\n        }\n\n        console.log('📝 Step 3: Amazon listing API response status:', listingResponse.status);\n        console.log('📝 Step 3: Amazon listing API response:', JSON.stringify(listingResult, null, 2));\n\n        if (!listingResponse.ok) {\n          console.error('❌ Amazon listing creation failed with status:', listingResponse.status);\n          return res.status(500).json({\n            message: 'Failed to create Amazon listing',\n            status: listingResponse.status,\n            details: typeof listingResult === 'object' ? listingResult : 'Invalid response format',\n          });\n        }\n\n        console.log('✅ Step 3: Amazon listing created successfully');\n        res.json({\n          success: true,\n          message: 'Amazon listing created successfully',\n          sku: listingSku,\n          marketplace: marketplaceId,\n          response: listingResult,\n        });\n\n      } catch (listingError: any) {\n        console.error('❌ Amazon listing creation failed:', listingError?.message || listingError);\n        return res.status(500).json({\n          message: 'Failed to create Amazon listing',\n          error: listingError?.message || 'Unknown error',\n          details: listingError,\n        });\n      }\n\n    } catch (error) {\n      console.error('❌ Error creating Amazon listing:', error);\n      res.status(500).json({\n        message: 'Failed to create Amazon listing',\n        error: error.message,\n      });\n    }\n  });\n\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":67133},"server/storage.ts":{"content":"import {\n  users,\n  sourcing,\n  sourcingItems,\n  sourcingFiles,\n  purchasingPlans,\n  listings,\n  activityLog,\n  type User,\n  type UpsertUser,\n  type Sourcing,\n  type SourcingWithRelations,\n  type SourcingItem,\n  type InsertSourcingItem,\n  type SourcingFile,\n  type InsertSourcingFile,\n  type PurchasingItem,\n  type InsertPurchasingItem,\n  type PurchasingFile,\n  type InsertPurchasingFile,\n  purchasingItems,\n  purchasingFiles,\n  type PurchasingPlan,\n  type PurchasingPlanWithRelations,\n  type Listing,\n  type ListingWithRelations,\n  type ActivityLog,\n  type InsertSourcing,\n  type InsertPurchasingPlan,\n  type InsertListing,\n  type InsertActivityLog,\n  type UserWithStats,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, count, and, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getUserStats(userId: string): Promise<UserWithStats | undefined>;\n\n  // Sourcing operations (Google Sheets data)\n  createSourcing(sourcing: InsertSourcing): Promise<Sourcing>;\n  getSourcing(options?: { status?: string; submittedBy?: string; limit?: number }): Promise<SourcingWithRelations[]>;\n  getSourcingItem(id: string): Promise<SourcingWithRelations | undefined>;\n  getSourcingByAsin(asin: string): Promise<SourcingWithRelations | undefined>;\n  updateSourcingStatus(id: string, status: string, reviewedBy?: string, reviewNotes?: string): Promise<void>;\n  getSourcingStats(): Promise<{\n    total: number;\n    new: number;\n    under_review: number;\n    winner: number;\n    no_go: number;\n  }>;\n\n  // Purchasing operations\n  createPurchasingPlan(plan: InsertPurchasingPlan): Promise<PurchasingPlan>;\n  getPurchasingPlans(options?: { status?: string; limit?: number }): Promise<PurchasingPlanWithRelations[]>;\n  updatePurchasingPlan(id: string, updates: Partial<PurchasingPlan>): Promise<void>;\n\n  // Listing operations (SKU management)\n  createListing(listing: InsertListing): Promise<Listing>;\n  getListings(options?: { status?: string; limit?: number }): Promise<ListingWithRelations[]>;\n  updateListingStatus(id: string, amazonStatus?: string, prepMyBusinessStatus?: string): Promise<void>;\n  generateSKU(brand: string, buyPrice: number, asin: string): string;\n\n  // Activity log operations\n  logActivity(activity: InsertActivityLog): Promise<void>;\n  getRecentActivities(limit?: number): Promise<ActivityLog[]>;\n\n  // Sourcing Items operations (database storage with archive)\n  saveSourcingItem(item: InsertSourcingItem): Promise<SourcingItem>;\n  getSourcingItems(showArchived?: boolean): Promise<SourcingItem[]>;\n  archiveSourcingItem(rowIndex: number): Promise<void>;\n  deleteSourcingItem(rowIndex: number): Promise<void>;\n  upsertSourcingItems(items: InsertSourcingItem[]): Promise<void>;\n\n  // File operations for sourcing items\n  saveFileInfo(fileInfo: InsertSourcingFile): Promise<SourcingFile>;\n  getFilesByRowIndex(rowIndex: number): Promise<SourcingFile[]>;\n  getFileById(fileId: string): Promise<SourcingFile | undefined>;\n  deleteFile(fileId: string): Promise<void>;\n\n  // Purchasing Items operations (database storage with archive)\n  savePurchasingItems(items: InsertPurchasingItem[], userId: string): Promise<void>;\n  getPurchasingItems(options?: { archived?: boolean }): Promise<PurchasingItem[]>;\n  archivePurchasingItem(rowIndex: number, userId: string): Promise<void>;\n  deletePurchasingItem(rowIndex: number): Promise<void>;\n\n  // File operations for purchasing items\n  createPurchasingFile(fileInfo: InsertPurchasingFile): Promise<PurchasingFile>;\n  getPurchasingFilesByRow(rowIndex: number): Promise<PurchasingFile[]>;\n  getPurchasingFile(fileId: string): Promise<PurchasingFile | undefined>;\n  deletePurchasingFile(fileId: string): Promise<void>;\n\n  // Dashboard data\n  getKpiData(): Promise<{\n    activeSourcing: number;\n    winnerProducts: number;\n    monthlyProfit: number;\n    availableBudget: number;\n  }>;\n\n  // VA Performance data\n  getVAPerformance(userId: string, weeks?: number): Promise<{\n    weeklyStats: Array<{\n      week: string;\n      avgProfit: number;\n      deals: number;\n      winners: number;\n      successRate: number;\n      profit: number;\n    }>;\n    totalStats: {\n      avgProfit: number;\n      totalDeals: number;\n      totalWinners: number;\n      successRate: number;\n      totalProfit: number;\n    };\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getUserStats(userId: string): Promise<UserWithStats | undefined> {\n    const user = await this.getUser(userId);\n    if (!user) return undefined;\n\n    const sourcingStats = await db\n      .select({\n        total: count(),\n        winners: count(sql`CASE WHEN ${sourcing.status} = 'winner' THEN 1 END`),\n      })\n      .from(sourcing)\n      .where(eq(sourcing.submittedBy, userId));\n\n    const avgProfitResult = await db\n      .select({\n        avgProfit: sql<number>`AVG(CAST(${sourcing.profit} AS NUMERIC))`,\n      })\n      .from(sourcing)\n      .where(and(\n        eq(sourcing.submittedBy, userId),\n        eq(sourcing.status, 'winner')\n      ));\n\n    const totalSourcing = sourcingStats[0]?.total || 0;\n    const winnerSourcing = sourcingStats[0]?.winners || 0;\n    const successRate = totalSourcing > 0 ? (winnerSourcing / totalSourcing) * 100 : 0;\n    const avgProfit = avgProfitResult[0]?.avgProfit || 0;\n\n    return {\n      ...user,\n      totalSourcing,\n      winnerSourcing,\n      successRate,\n      avgProfit: Number(avgProfit),\n    };\n  }\n\n  // Sourcing operations\n  async createSourcing(sourcingData: InsertSourcing): Promise<Sourcing> {\n    const [newSourcing] = await db.insert(sourcing).values(sourcingData).returning();\n    return newSourcing;\n  }\n\n  async getSourcing(options: { status?: string; submittedBy?: string; limit?: number } = {}): Promise<SourcingWithRelations[]> {\n    const { status, submittedBy, limit = 50 } = options;\n\n    const conditions = [];\n    if (status) {\n      conditions.push(eq(sourcing.status, status as any));\n    }\n    if (submittedBy) {\n      conditions.push(eq(sourcing.submittedBy, submittedBy));\n    }\n\n    const baseQuery = db\n      .select()\n      .from(sourcing)\n      .leftJoin(users, eq(sourcing.submittedBy, users.id))\n      .orderBy(desc(sourcing.createdAt))\n      .limit(limit);\n    \n    const results = conditions.length > 0 \n      ? await baseQuery.where(and(...conditions))\n      : await baseQuery;\n\n    return results.map(row => ({\n      ...row.sourcing,\n      submitter: row.users || undefined,\n    }));\n  }\n\n  async getSourcingItem(id: string): Promise<SourcingWithRelations | undefined> {\n    const [result] = await db\n      .select()\n      .from(sourcing)\n      .leftJoin(users, eq(sourcing.submittedBy, users.id))\n      .where(eq(sourcing.id, id));\n\n    if (!result) return undefined;\n\n    return {\n      ...result.sourcing,\n      submitter: result.users || undefined,\n    };\n  }\n\n  async getSourcingByAsin(asin: string): Promise<SourcingWithRelations | undefined> {\n    const [result] = await db\n      .select()\n      .from(sourcing)\n      .leftJoin(users, eq(sourcing.submittedBy, users.id))\n      .where(eq(sourcing.asin, asin));\n\n    if (!result) return undefined;\n\n    return {\n      ...result.sourcing,\n      submitter: result.users || undefined,\n    };\n  }\n\n  async updateSourcingStatus(id: string, status: string, reviewedBy?: string, reviewNotes?: string): Promise<void> {\n    await db\n      .update(sourcing)\n      .set({\n        status: status as any,\n        reviewedBy,\n        reviewNotes,\n        reviewedAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(sourcing.id, id));\n  }\n\n  async getSourcingStats(): Promise<{\n    total: number;\n    new: number;\n    under_review: number;\n    winner: number;\n    no_go: number;\n  }> {\n    const stats = await db\n      .select({\n        total: count(),\n        new: count(sql`CASE WHEN ${sourcing.status} = 'new' THEN 1 END`),\n        under_review: count(sql`CASE WHEN ${sourcing.status} = 'under_review' THEN 1 END`),\n        winner: count(sql`CASE WHEN ${sourcing.status} = 'winner' THEN 1 END`),\n        no_go: count(sql`CASE WHEN ${sourcing.status} = 'no_go' THEN 1 END`),\n      })\n      .from(sourcing);\n\n    return stats[0] || { total: 0, new: 0, under_review: 0, winner: 0, no_go: 0 };\n  }\n\n  // Purchasing operations\n  async createPurchasingPlan(plan: InsertPurchasingPlan): Promise<PurchasingPlan> {\n    const [newPlan] = await db.insert(purchasingPlans).values(plan).returning();\n    return newPlan;\n  }\n\n  async getPurchasingPlans(options: { status?: string; limit?: number } = {}): Promise<PurchasingPlanWithRelations[]> {\n    const { status, limit = 50 } = options;\n\n    const baseQuery = db\n      .select()\n      .from(purchasingPlans)\n      .leftJoin(sourcing, eq(purchasingPlans.sourcingId, sourcing.id))\n      .orderBy(desc(purchasingPlans.createdAt))\n      .limit(limit);\n\n    const results = status \n      ? await baseQuery.where(eq(purchasingPlans.status, status as any))\n      : await baseQuery;\n\n    return results.map(row => ({\n      ...row.purchasing_plans,\n      sourcing: row.sourcing || undefined,\n    }));\n  }\n\n  async updatePurchasingPlan(id: string, updates: Partial<PurchasingPlan>): Promise<void> {\n    await db\n      .update(purchasingPlans)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(purchasingPlans.id, id));\n  }\n\n  // Listing operations\n  async createListing(listingData: InsertListing): Promise<Listing> {\n    const [newListing] = await db.insert(listings).values(listingData).returning();\n    return newListing;\n  }\n\n  async getListings(options: { status?: string; limit?: number } = {}): Promise<ListingWithRelations[]> {\n    const { limit = 50 } = options;\n\n    const results = await db\n      .select()\n      .from(listings)\n      .leftJoin(sourcing, eq(listings.sourcingId, sourcing.id))\n      .leftJoin(purchasingPlans, eq(listings.purchasingId, purchasingPlans.id))\n      .orderBy(desc(listings.createdAt))\n      .limit(limit);\n\n    return results.map(row => ({\n      ...row.listings,\n      sourcing: row.sourcing || undefined,\n      purchasing: row.purchasing_plans || undefined,\n    }));\n  }\n\n  async updateListingStatus(id: string, amazonStatus?: string, prepMyBusinessStatus?: string): Promise<void> {\n    const updates: any = { updatedAt: new Date() };\n    \n    if (amazonStatus !== undefined) {\n      updates.amazonSyncStatus = amazonStatus;\n    }\n    \n    if (prepMyBusinessStatus !== undefined) {\n      updates.prepMyBusinessSyncStatus = prepMyBusinessStatus;\n    }\n    \n    if (amazonStatus || prepMyBusinessStatus) {\n      updates.lastSyncAt = new Date();\n    }\n\n    await db.update(listings).set(updates).where(eq(listings.id, id));\n  }\n\n  generateSKU(brand: string, buyPrice: number, asin: string): string {\n    const date = new Date();\n    const dateStr = date.toISOString().slice(2, 10).replace(/-/g, '').slice(0, 6); // DDMMYY format\n    const formattedPrice = buyPrice.toFixed(2);\n    \n    let truncatedBrand = brand.replace(/[^A-Za-z0-9]/g, '').toUpperCase();\n    \n    // Calculate max brand length to stay under 40 chars total\n    const baseLength = formattedPrice.length + 1 + dateStr.length + 1 + asin.length + 2; // +2 for underscores\n    const maxBrandLength = 40 - baseLength;\n    \n    if (truncatedBrand.length > maxBrandLength) {\n      truncatedBrand = truncatedBrand.substring(0, maxBrandLength);\n    }\n    \n    return `${truncatedBrand}_${formattedPrice}_${dateStr}_${asin}`;\n  }\n\n  // Activity log operations\n  async logActivity(activity: InsertActivityLog): Promise<void> {\n    await db.insert(activityLog).values(activity);\n  }\n\n  async getRecentActivities(limit: number = 20): Promise<ActivityLog[]> {\n    return await db\n      .select()\n      .from(activityLog)\n      .orderBy(desc(activityLog.createdAt))\n      .limit(limit);\n  }\n\n  // Dashboard data\n  async getKpiData(): Promise<{\n    activeSourcing: number;\n    winnerProducts: number;\n    monthlyProfit: number;\n    availableBudget: number;\n  }> {\n    const sourcingStats = await this.getSourcingStats();\n    \n    // Calculate monthly profit from winner sourcing items\n    const winnerProfit = await db\n      .select({\n        profit: sql<number>`SUM(CAST(${sourcing.profit} AS NUMERIC))`,\n      })\n      .from(sourcing)\n      .where(and(\n        eq(sourcing.status, 'winner'),\n        sql`${sourcing.createdAt} >= date_trunc('month', current_date)`\n      ));\n\n    const monthlyProfit = winnerProfit[0]?.profit || 0;\n\n    return {\n      activeSourcing: sourcingStats.new + sourcingStats.under_review,\n      winnerProducts: sourcingStats.winner,\n      monthlyProfit: Number(monthlyProfit),\n      availableBudget: 156750, // This could be calculated based on actual budget tracking\n    };\n  }\n\n  // VA Performance data\n  async getVAPerformance(userId: string, weeks: number = 4): Promise<{\n    weeklyStats: Array<{\n      week: string;\n      avgProfit: number;\n      deals: number;\n      winners: number;\n      successRate: number;\n      profit: number;\n    }>;\n    totalStats: {\n      avgProfit: number;\n      totalDeals: number;\n      totalWinners: number;\n      successRate: number;\n      totalProfit: number;\n    };\n  }> {\n    // Get weekly stats for the last N weeks\n    const weeklyStats = [];\n    for (let i = 0; i < weeks; i++) {\n      const weekStart = new Date();\n      weekStart.setDate(weekStart.getDate() - (i * 7));\n      weekStart.setHours(0, 0, 0, 0);\n      \n      const weekEnd = new Date(weekStart);\n      weekEnd.setDate(weekEnd.getDate() + 6);\n      weekEnd.setHours(23, 59, 59, 999);\n\n      const weekData = await db\n        .select({\n          deals: count(),\n          winners: count(sql`CASE WHEN ${sourcing.status} = 'winner' THEN 1 END`),\n          profit: sql<number>`SUM(CAST(${sourcing.profit} AS NUMERIC))`,\n          avgProfit: sql<number>`AVG(CAST(${sourcing.profit} AS NUMERIC))`,\n        })\n        .from(sourcing)\n        .where(and(\n          eq(sourcing.submittedBy, userId),\n          sql`${sourcing.createdAt} >= ${weekStart.toISOString()}`,\n          sql`${sourcing.createdAt} <= ${weekEnd.toISOString()}`\n        ));\n\n      const deals = weekData[0]?.deals || 0;\n      const winners = weekData[0]?.winners || 0;\n      const profit = weekData[0]?.profit || 0;\n      const avgProfit = weekData[0]?.avgProfit || 0;\n      const successRate = deals > 0 ? (winners / deals) * 100 : 0;\n\n      weeklyStats.push({\n        week: `KW ${Math.ceil((weekStart.getDate()) / 7)}`,\n        avgProfit: Number(avgProfit),\n        deals,\n        winners,\n        successRate,\n        profit: Number(profit),\n      });\n    }\n\n    // Get total stats\n    const totalData = await db\n      .select({\n        deals: count(),\n        winners: count(sql`CASE WHEN ${sourcing.status} = 'winner' THEN 1 END`),\n        profit: sql<number>`SUM(CAST(${sourcing.profit} AS NUMERIC))`,\n        avgProfit: sql<number>`AVG(CAST(${sourcing.profit} AS NUMERIC))`,\n      })\n      .from(sourcing)\n      .where(eq(sourcing.submittedBy, userId));\n\n    const totalDeals = totalData[0]?.deals || 0;\n    const totalWinners = totalData[0]?.winners || 0;\n    const totalProfit = totalData[0]?.profit || 0;\n    const avgProfit = totalData[0]?.avgProfit || 0;\n    const successRate = totalDeals > 0 ? (totalWinners / totalDeals) * 100 : 0;\n\n    return {\n      weeklyStats: weeklyStats.reverse(), // Most recent first\n      totalStats: {\n        avgProfit: Number(avgProfit),\n        totalDeals,\n        totalWinners,\n        successRate,\n        totalProfit: Number(totalProfit),\n      },\n    };\n  }\n\n  // Sourcing Items operations (database storage with archive)\n  async saveSourcingItem(item: InsertSourcingItem): Promise<SourcingItem> {\n    try {\n      const [sourcingItem] = await db\n        .insert(sourcingItems)\n        .values(item)\n        .onConflictDoUpdate({\n          target: [sourcingItems.rowIndex],\n          set: {\n            ...item,\n            updatedAt: new Date(),\n          },\n        })\n        .returning();\n      return sourcingItem;\n    } catch (error) {\n      // If conflict handling fails, try a simple insert\n      console.log('Conflict handling failed, trying simple insert:', error);\n      const [sourcingItem] = await db\n        .insert(sourcingItems)\n        .values(item)\n        .returning();\n      return sourcingItem;\n    }\n  }\n\n  async getSourcingItems(showArchived = false): Promise<SourcingItem[]> {\n    return await db\n      .select()\n      .from(sourcingItems)\n      .where(eq(sourcingItems.archived, showArchived))\n      .orderBy(desc(sourcingItems.createdAt));\n  }\n\n  async archiveSourcingItem(rowIndex: number): Promise<void> {\n    await db\n      .update(sourcingItems)\n      .set({ archived: true, updatedAt: new Date() })\n      .where(eq(sourcingItems.rowIndex, rowIndex));\n  }\n\n  async deleteSourcingItem(rowIndex: number): Promise<void> {\n    await db\n      .delete(sourcingItems)\n      .where(eq(sourcingItems.rowIndex, rowIndex));\n  }\n\n  // File operations for sourcing items\n  async saveFileInfo(fileInfo: InsertSourcingFile): Promise<SourcingFile> {\n    const [file] = await db.insert(sourcingFiles).values(fileInfo).returning();\n    return file;\n  }\n\n  async getFilesByRowIndex(rowIndex: number): Promise<SourcingFile[]> {\n    return await db.select().from(sourcingFiles).where(eq(sourcingFiles.rowIndex, rowIndex));\n  }\n\n  async getFileById(fileId: string): Promise<SourcingFile | undefined> {\n    const [file] = await db.select().from(sourcingFiles).where(eq(sourcingFiles.id, fileId));\n    return file;\n  }\n\n  async deleteFile(fileId: string): Promise<void> {\n    await db.delete(sourcingFiles).where(eq(sourcingFiles.id, fileId));\n  }\n\n  async upsertSourcingItems(items: InsertSourcingItem[]): Promise<void> {\n    if (items.length === 0) return;\n    \n    console.log(`💾 Upserting ${items.length} sourcing items to database`);\n    \n    // Clear existing entries and insert new ones for simplicity\n    await db.delete(sourcingItems).where(eq(sourcingItems.archived, false));\n    \n    for (const item of items) {\n      try {\n        await db.insert(sourcingItems).values(item);\n      } catch (error) {\n        console.error(`Error inserting item with ASIN ${item.asin}:`, error);\n      }\n    }\n    \n    console.log(`✅ Successfully upserted ${items.length} items`);\n  }\n\n  // Purchasing Items operations (database storage with archive)\n  async savePurchasingItems(items: InsertPurchasingItem[], userId: string): Promise<void> {\n    if (items.length === 0) return;\n    \n    console.log(`💾 Saving ${items.length} purchasing items to database`);\n    \n    // Clear existing non-archived entries and insert new ones\n    await db.delete(purchasingItems).where(eq(purchasingItems.archived, false));\n    \n    for (const item of items) {\n      try {\n        await db.insert(purchasingItems).values(item);\n      } catch (error) {\n        console.error(`Error inserting purchasing item with ASIN ${item.asin}:`, error);\n      }\n    }\n    \n    console.log(`✅ Successfully saved ${items.length} purchasing items`);\n  }\n\n  async getPurchasingItems(options?: { archived?: boolean }): Promise<PurchasingItem[]> {\n    const query = db.select().from(purchasingItems);\n    \n    if (options?.archived !== undefined) {\n      query.where(eq(purchasingItems.archived, options.archived));\n    }\n    \n    return await query.orderBy(desc(purchasingItems.createdAt));\n  }\n\n  async archivePurchasingItem(rowIndex: number, userId: string): Promise<void> {\n    await db\n      .update(purchasingItems)\n      .set({ archived: true, updatedAt: new Date() })\n      .where(eq(purchasingItems.originalRowIndex, rowIndex));\n  }\n\n  async deletePurchasingItem(rowIndex: number): Promise<void> {\n    await db\n      .delete(purchasingItems)\n      .where(eq(purchasingItems.originalRowIndex, rowIndex));\n  }\n\n  // File operations for purchasing items\n  async createPurchasingFile(fileInfo: InsertPurchasingFile): Promise<PurchasingFile> {\n    const [file] = await db.insert(purchasingFiles).values(fileInfo).returning();\n    return file;\n  }\n\n  async getPurchasingFilesByRow(rowIndex: number): Promise<PurchasingFile[]> {\n    return await db.select().from(purchasingFiles).where(eq(purchasingFiles.rowIndex, rowIndex));\n  }\n\n  async getPurchasingFile(fileId: string): Promise<PurchasingFile | undefined> {\n    const [file] = await db.select().from(purchasingFiles).where(eq(purchasingFiles.id, fileId));\n    return file;\n  }\n\n  async deletePurchasingFile(fileId: string): Promise<void> {\n    await db.delete(purchasingFiles).where(eq(purchasingFiles.id, fileId));\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":21093},"server/testGoogleSheets.ts":{"content":"// Test script to verify Google Sheets connection\nasync function testGoogleSheetsConnection() {\n  const apiKey = process.env.GOOGLE_SHEETS_API_KEY;\n  const spreadsheetId = process.env.GOOGLE_SHEETS_SPREADSHEET_ID;\n\n  console.log(\"=== Google Sheets Connection Test ===\");\n  console.log(\"API Key exists:\", !!apiKey);\n  console.log(\"API Key length:\", apiKey?.length || 0);\n  console.log(\"Spreadsheet ID:\", spreadsheetId);\n\n  if (!apiKey || !spreadsheetId) {\n    console.error(\"Missing required environment variables!\");\n    return;\n  }\n\n  const testUrl = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}?key=${apiKey}`;\n  \n  try {\n    console.log(\"Testing basic spreadsheet access...\");\n    const response = await fetch(testUrl);\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Error accessing spreadsheet:\", response.status, errorText);\n      return;\n    }\n\n    const data = await response.json();\n    console.log(\"✅ Spreadsheet found:\", data.properties?.title);\n    console.log(\"Sheets available:\", data.sheets?.map((s: any) => s.properties.title) || []);\n\n    // Test data retrieval\n    console.log(\"\\nTesting data retrieval...\");\n    const dataUrl = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/A1:AB10?key=${apiKey}`;\n    const dataResponse = await fetch(dataUrl);\n    \n    if (!dataResponse.ok) {\n      const errorText = await dataResponse.text();\n      console.error(\"Error retrieving data:\", dataResponse.status, errorText);\n      return;\n    }\n\n    const dataResult = await dataResponse.json();\n    console.log(\"✅ Data retrieved successfully\");\n    console.log(\"Rows found:\", dataResult.values?.length || 0);\n    \n    if (dataResult.values && dataResult.values.length > 0) {\n      console.log(\"Header row:\", dataResult.values[0]);\n      if (dataResult.values.length > 1) {\n        console.log(\"First data row:\", dataResult.values[1]);\n      }\n    }\n\n  } catch (error) {\n    console.error(\"Connection test failed:\", error);\n  }\n}\n\n// Only run if called directly\nif (require.main === module) {\n  testGoogleSheetsConnection();\n}\n\nexport { testGoogleSheetsConnection };","size_bytes":2165},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  integer,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'va']);\nexport const sourcingStatusEnum = pgEnum('sourcing_status', ['new', 'under_review', 'winner', 'no_go']);\nexport const purchaseStatusEnum = pgEnum('purchase_status', ['planned', 'ordered', 'received', 'shipped']);\nexport const listingStatusEnum = pgEnum('listing_status', ['draft', 'pending', 'live', 'error']);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").default('va').notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Sourcing table (Google Sheets integration)\nexport const sourcing = pgTable(\"sourcing\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  datum: timestamp(\"datum\"),\n  imageUrl: text(\"image_url\"),\n  image: text(\"image\"),\n  brand: varchar(\"brand\"),\n  productName: text(\"product_name\").notNull(),\n  asin: varchar(\"asin\").notNull(),\n  eanBarcode: varchar(\"ean_barcode\"),\n  sourceUrl: text(\"source_url\"),\n  amazonUrl: text(\"amazon_url\"),\n  costPrice: decimal(\"cost_price\", { precision: 10, scale: 2 }).notNull(),\n  salePrice: decimal(\"sale_price\", { precision: 10, scale: 2 }).notNull(),\n  buyBoxCurrent: decimal(\"buy_box_current\", { precision: 10, scale: 2 }),\n  buyBoxAverage90Days: decimal(\"buy_box_average_90_days\", { precision: 10, scale: 2 }),\n  profit: decimal(\"profit\", { precision: 10, scale: 2 }),\n  profitMargin: decimal(\"profit_margin\", { precision: 5, scale: 2 }),\n  roi: decimal(\"roi\", { precision: 5, scale: 2 }),\n  estimatedSales: integer(\"estimated_sales\"),\n  fbaSellerCount: integer(\"fba_seller_count\"),\n  fbmSellerCount: integer(\"fbm_seller_count\"),\n  productReview: decimal(\"product_review\", { precision: 2, scale: 1 }),\n  notes: text(\"notes\"),\n  sourcingMethod: varchar(\"sourcing_method\"),\n  status: sourcingStatusEnum(\"status\").default('new').notNull(),\n  submittedBy: varchar(\"submitted_by\").references(() => users.id).notNull(),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  reviewNotes: text(\"review_notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Purchasing plans table (for Winner sourcing items)\nexport const purchasingPlans = pgTable(\"purchasing_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sourcingId: varchar(\"sourcing_id\").references(() => sourcing.id).notNull(),\n  plannedQuantity: integer(\"planned_quantity\").notNull(),\n  costPerUnit: decimal(\"cost_per_unit\", { precision: 10, scale: 2 }).notNull(),\n  plannedBudget: decimal(\"planned_budget\", { precision: 12, scale: 2 }).notNull(),\n  expectedRevenue: decimal(\"expected_revenue\", { precision: 12, scale: 2 }),\n  expectedProfit: decimal(\"expected_profit\", { precision: 12, scale: 2 }),\n  actualSpent: decimal(\"actual_spent\", { precision: 12, scale: 2 }).default('0'),\n  actualRevenue: decimal(\"actual_revenue\", { precision: 12, scale: 2 }).default('0'),\n  actualProfit: decimal(\"actual_profit\", { precision: 12, scale: 2 }).default('0'),\n  status: purchaseStatusEnum(\"status\").default('planned').notNull(),\n  orderDate: timestamp(\"order_date\"),\n  receivedDate: timestamp(\"received_date\"),\n  weeklyBudgetAllocated: decimal(\"weekly_budget_allocated\", { precision: 12, scale: 2 }),\n  marginWarning: boolean(\"margin_warning\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Listings table (SKU Management & API Integration)\nexport const listings = pgTable(\"listings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sourcingId: varchar(\"sourcing_id\").references(() => sourcing.id).notNull(),\n  purchasingId: varchar(\"purchasing_id\").references(() => purchasingPlans.id),\n  skuCode: varchar(\"sku_code\", { length: 40 }).unique().notNull(),\n  brand: varchar(\"brand\").notNull(),\n  buyPrice: decimal(\"buy_price\", { precision: 10, scale: 2 }).notNull(),\n  asin: varchar(\"asin\").notNull(),\n  generatedDate: varchar(\"generated_date\", { length: 6 }), // DDMMYY format\n  amazonSyncStatus: listingStatusEnum(\"amazon_sync_status\").default('draft'),\n  prepMyBusinessSyncStatus: listingStatusEnum(\"prep_my_business_sync_status\").default('draft'),\n  amazonListingUrl: text(\"amazon_listing_url\"),\n  prepMyBusinessJobId: varchar(\"prep_my_business_job_id\"),\n  lastSyncAt: timestamp(\"last_sync_at\"),\n  csvExported: boolean(\"csv_exported\").default(false),\n  csvExportedAt: timestamp(\"csv_exported_at\"),\n  syncErrors: text(\"sync_errors\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Activity log table\nexport const activityLog = pgTable(\"activity_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  action: varchar(\"action\").notNull(),\n  entityType: varchar(\"entity_type\").notNull(),\n  entityId: varchar(\"entity_id\").notNull(),\n  description: text(\"description\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Files table for sourcing item attachments\nexport const sourcingFiles = pgTable(\"sourcing_files\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rowIndex: integer(\"row_index\").notNull(),\n  asin: varchar(\"asin\").notNull(),\n  originalName: varchar(\"original_name\").notNull(),\n  fileName: varchar(\"file_name\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  mimeType: varchar(\"mime_type\").notNull(),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  sourcingSubmitted: many(sourcing, { relationName: \"submittedSourcing\" }),\n  sourcingReviewed: many(sourcing, { relationName: \"reviewedSourcing\" }),\n  activities: many(activityLog),\n}));\n\nexport const sourcingRelations = relations(sourcing, ({ one, many }) => ({\n  submitter: one(users, {\n    fields: [sourcing.submittedBy],\n    references: [users.id],\n    relationName: \"submittedSourcing\",\n  }),\n  reviewer: one(users, {\n    fields: [sourcing.reviewedBy],\n    references: [users.id],\n    relationName: \"reviewedSourcing\",\n  }),\n  purchasingPlans: many(purchasingPlans),\n  listings: many(listings),\n}));\n\nexport const purchasingPlansRelations = relations(purchasingPlans, ({ one, many }) => ({\n  sourcing: one(sourcing, {\n    fields: [purchasingPlans.sourcingId],\n    references: [sourcing.id],\n  }),\n  listings: many(listings),\n}));\n\nexport const listingsRelations = relations(listings, ({ one }) => ({\n  sourcing: one(sourcing, {\n    fields: [listings.sourcingId],\n    references: [sourcing.id],\n  }),\n  purchasing: one(purchasingPlans, {\n    fields: [listings.purchasingId],\n    references: [purchasingPlans.id],\n  }),\n}));\n\nexport const activityLogRelations = relations(activityLog, ({ one }) => ({\n  user: one(users, {\n    fields: [activityLog.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSourcingSchema = createInsertSchema(sourcing).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  reviewedAt: true,\n  reviewedBy: true,\n  reviewNotes: true,\n});\n\nexport const insertPurchasingPlanSchema = createInsertSchema(purchasingPlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertListingSchema = createInsertSchema(listings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLog).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSourcingFileSchema = createInsertSchema(sourcingFiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Sourcing Items table for database storage with archive functionality\nexport const sourcingItems = pgTable(\"sourcing_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rowIndex: integer(\"row_index\").notNull(), // Google Sheets row index\n  datum: varchar(\"datum\"),\n  imageUrl: varchar(\"image_url\"),\n  brand: varchar(\"brand\"),\n  productName: varchar(\"product_name\").notNull(),\n  asin: varchar(\"asin\").notNull(),\n  eanBarcode: varchar(\"ean_barcode\"),\n  sourceUrl: varchar(\"source_url\"),\n  amazonUrl: varchar(\"amazon_url\"),\n  costPrice: varchar(\"cost_price\"),\n  salePrice: varchar(\"sale_price\"),\n  buyBoxAverage: varchar(\"buy_box_average\"),\n  profit: varchar(\"profit\"),\n  profitMargin: varchar(\"profit_margin\"),\n  roi: varchar(\"roi\"),\n  estimatedSales: varchar(\"estimated_sales\"),\n  fbaSellerCount: varchar(\"fba_seller_count\"),\n  fbmSellerCount: varchar(\"fbm_seller_count\"),\n  productReview: varchar(\"product_review\"),\n  notes: varchar(\"notes\"),\n  sourcingMethod: varchar(\"sourcing_method\"),\n  archived: boolean(\"archived\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Purchasing Items table for database storage with archive functionality\nexport const purchasingItems = pgTable(\"purchasing_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  originalRowIndex: integer(\"original_row_index\").notNull(), // Google Sheets row index\n  datum: varchar(\"datum\"),\n  imageUrl: varchar(\"image_url\"),\n  brand: varchar(\"brand\"),\n  productName: varchar(\"product_name\").notNull(),\n  asin: varchar(\"asin\").notNull(),\n  eanBarcode: varchar(\"ean_barcode\"),\n  sourceUrl: varchar(\"source_url\"),\n  amazonUrl: varchar(\"amazon_url\"),\n  costPrice: varchar(\"cost_price\"),\n  salePrice: varchar(\"sale_price\"),\n  buyBoxAverage: varchar(\"buy_box_average\"),\n  profit: varchar(\"profit\"),\n  profitMargin: varchar(\"profit_margin\"),\n  roi: varchar(\"roi\"),\n  estimatedSales: varchar(\"estimated_sales\"),\n  fbaSellerCount: varchar(\"fba_seller_count\"),\n  fbmSellerCount: varchar(\"fbm_seller_count\"),\n  productReview: varchar(\"product_review\"),\n  notes: varchar(\"notes\"),\n  sourcingMethod: varchar(\"sourcing_method\"),\n  archived: boolean(\"archived\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Purchasing Files table\nexport const purchasingFiles = pgTable(\"purchasing_files\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rowIndex: integer(\"row_index\").notNull(),\n  asin: varchar(\"asin\").notNull(),\n  originalName: varchar(\"original_name\").notNull(),\n  filename: varchar(\"filename\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  mimeType: varchar(\"mime_type\").notNull(),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertPurchasingItemSchema = createInsertSchema(purchasingItems).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPurchasingFileSchema = createInsertSchema(purchasingFiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type SourcingItem = typeof sourcingItems.$inferSelect;\nexport type InsertSourcingItem = typeof sourcingItems.$inferInsert;\nexport type SourcingFile = typeof sourcingFiles.$inferSelect;\nexport type InsertSourcingFile = z.infer<typeof insertSourcingFileSchema>;\n\nexport type PurchasingItem = typeof purchasingItems.$inferSelect;\nexport type InsertPurchasingItem = typeof purchasingItems.$inferInsert;\nexport type PurchasingFile = typeof purchasingFiles.$inferSelect;\nexport type InsertPurchasingFile = z.infer<typeof insertPurchasingFileSchema>;\n\n// Google Sheets sourcing item type (different from database schema)\nexport interface GoogleSheetsSourcingItem {\n  'Datum': string;\n  'Image URL': string;\n  'Image': string;\n  'Brand': string;\n  'Product Name': string;\n  'ASIN': string;\n  'EAN Barcode': string;\n  'Source URL': string;\n  'Amazon URL': string;\n  'Cost Price': string;\n  'Sale Price': string;\n  'Buy Box (Average Last 90 Days)': string;\n  'Profit': string;\n  'Profit Margin': string;\n  'R.O.I.': string;\n  'Estimated Sales': string;\n  'FBA Seller Count': string;\n  'FBM Seller Count': string;\n  'Product Review': string;\n  'Notes': string;\n  'Sourcing Method': string;\n  'Status'?: string;\n}\nexport type Sourcing = typeof sourcing.$inferSelect;\nexport type PurchasingPlan = typeof purchasingPlans.$inferSelect;\nexport type Listing = typeof listings.$inferSelect;\nexport type ActivityLog = typeof activityLog.$inferSelect;\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertSourcing = z.infer<typeof insertSourcingSchema>;\nexport type InsertPurchasingPlan = z.infer<typeof insertPurchasingPlanSchema>;\nexport type InsertListing = z.infer<typeof insertListingSchema>;\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\n\n// Extended types with relations\nexport type SourcingWithRelations = Sourcing & {\n  submitter?: User;\n  reviewer?: User;\n  purchasingPlans?: PurchasingPlan[];\n  listings?: Listing[];\n};\n\nexport type PurchasingPlanWithRelations = PurchasingPlan & {\n  sourcing?: Sourcing;\n  listings?: Listing[];\n};\n\nexport type ListingWithRelations = Listing & {\n  sourcing?: Sourcing;\n  purchasing?: PurchasingPlan;\n};\n\nexport type UserWithStats = User & {\n  totalSourcing?: number;\n  winnerSourcing?: number;\n  successRate?: number;\n  avgProfit?: number;\n};\n","size_bytes":14530},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport SourcingInbox from \"@/pages/sourcing-inbox\";\nimport PurchasingInbox from \"@/pages/purchasing-inbox\";\nimport PurchasingPlanner from \"@/pages/purchasing-planner\";\nimport ListingBuilder from \"@/pages/listing-builder\";\nimport VAPerformance from \"@/pages/va-performance\";\nimport APISettings from \"@/pages/api-settings\";\nimport DealSubmission from \"@/pages/deal-submission\";\nimport DealEvaluation from \"@/pages/deal-evaluation\";\nimport Purchasing from \"@/pages/purchasing\";\nimport SkuManagement from \"@/pages/sku-management\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/sourcing\" component={SourcingInbox} />\n          <Route path=\"/sourcing-inbox\" component={SourcingInbox} />\n          <Route path=\"/purchasing-inbox\" component={PurchasingInbox} />\n          <Route path=\"/purchasing\" component={PurchasingPlanner} />\n          <Route path=\"/listings\" component={ListingBuilder} />\n          <Route path=\"/performance\" component={VAPerformance} />\n          <Route path=\"/api-settings\" component={APISettings} />\n          <Route path=\"/deals/submit\" component={DealSubmission} />\n          <Route path=\"/deals/evaluate\" component={DealEvaluation} />\n          <Route path=\"/legacy/purchasing\" component={Purchasing} />\n          <Route path=\"/legacy/sku-management\" component={SkuManagement} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Toaster />\n      <Router />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2360},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --background-secondary: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 4.9%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 20%, 50%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 84%, 4.9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(38, 92%, 50%);\n  --chart-4: hsl(186, 85%, 57%);\n  --chart-5: hsl(340, 82%, 52%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222, 84%, 4.9%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222, 84%, 4.9%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.05);\n  --shadow-xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.1);\n  --shadow-sm: 0px 2px 4px 0px rgba(0, 0, 0, 0.1), 0px 1px 2px -1px rgba(0, 0, 0, 0.1);\n  --shadow: 0px 4px 6px -1px rgba(0, 0, 0, 0.1), 0px 2px 4px -2px rgba(0, 0, 0, 0.1);\n  --shadow-md: 0px 8px 10px -3px rgba(0, 0, 0, 0.2), 0px 4px 6px -4px rgba(0, 0, 0, 0.15);\n  --shadow-lg: 0px 16px 24px -4px rgba(0, 0, 0, 0.25), 0px 8px 12px -6px rgba(0, 0, 0, 0.2);\n  --shadow-xl: 0px 24px 32px -8px rgba(0, 0, 0, 0.35), 0px 16px 20px -12px rgba(0, 0, 0, 0.25);\n  --shadow-2xl: 0px 32px 64px -12px rgba(0, 0, 0, 0.45);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 4.9%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(224, 71%, 4%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(222, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(222, 84%, 4.9%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold;\n  }\n}\n\n@layer components {\n  .progress-bar {\n    background: linear-gradient(90deg, hsl(var(--primary)) 0%, hsl(var(--primary)) var(--progress, 0%), hsl(var(--muted)) var(--progress, 0%), hsl(var(--muted)) 100%);\n  }\n\n  .glass {\n    backdrop-filter: blur(16px) saturate(180%);\n    background-color: rgba(255, 255, 255, 0.8);\n    border: 1px solid rgba(0, 0, 0, 0.1);\n  }\n\n  .gradient-bg {\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--chart-2)));\n  }\n\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--chart-2)));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .card-hover {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .card-hover:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n\n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n\n  @keyframes glow {\n    from { box-shadow: 0 0 20px hsl(var(--primary)); }\n    to { box-shadow: 0 0 30px hsl(var(--primary)), 0 0 40px hsl(var(--primary)); }\n  }\n\n  .shimmer {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .shimmer::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.05), transparent);\n    animation: shimmer 2s infinite;\n  }\n\n  @keyframes shimmer {\n    0% { left: -100%; }\n    100% { left: 100%; }\n  }\n}\n","size_bytes":5345},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/deal-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface DealModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ninterface DealForm {\n  productName: string;\n  asin: string;\n  buyPrice: string;\n  sellPrice: string;\n  category: string;\n  notes: string;\n}\n\nexport default function DealModal({ open, onOpenChange }: DealModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [formData, setFormData] = useState<DealForm>({\n    productName: '',\n    asin: '',\n    buyPrice: '',\n    sellPrice: '',\n    category: '',\n    notes: '',\n  });\n\n  const [profitMargin, setProfitMargin] = useState<string>('');\n\n  const calculateProfitMargin = (buyPrice: string, sellPrice: string) => {\n    const buy = parseFloat(buyPrice) || 0;\n    const sell = parseFloat(sellPrice) || 0;\n    \n    if (buy > 0 && sell > 0) {\n      const profit = sell - buy;\n      const margin = (profit / sell) * 100;\n      setProfitMargin(margin.toFixed(1));\n    } else {\n      setProfitMargin('');\n    }\n  };\n\n  const handleInputChange = (field: keyof DealForm, value: string) => {\n    const newFormData = { ...formData, [field]: value };\n    setFormData(newFormData);\n    \n    if (field === 'buyPrice' || field === 'sellPrice') {\n      calculateProfitMargin(\n        field === 'buyPrice' ? value : formData.buyPrice,\n        field === 'sellPrice' ? value : formData.sellPrice\n      );\n    }\n  };\n\n  const submitDeal = useMutation({\n    mutationFn: async (dealData: any) => {\n      await apiRequest(\"POST\", \"/api/deals\", dealData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Deal eingereicht\",\n        description: \"Ihr Deal wurde erfolgreich zur Bewertung eingereicht.\",\n      });\n      \n      // Reset form and close modal\n      setFormData({\n        productName: '',\n        asin: '',\n        buyPrice: '',\n        sellPrice: '',\n        category: '',\n        notes: '',\n      });\n      setProfitMargin('');\n      onOpenChange(false);\n      \n      // Invalidate queries\n      queryClient.invalidateQueries({ queryKey: ['/api/deals'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/activities'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Sie sind nicht angemeldet. Weiterleitung zur Anmeldung...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Fehler\",\n        description: \"Deal konnte nicht eingereicht werden.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.productName || !formData.asin || !formData.buyPrice || !formData.sellPrice) {\n      toast({\n        title: \"Unvollständige Daten\",\n        description: \"Bitte füllen Sie alle Pflichtfelder aus.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitDeal.mutate({\n      ...formData,\n      buyPrice: parseFloat(formData.buyPrice),\n      sellPrice: parseFloat(formData.sellPrice),\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Neuen Deal erfassen</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"modal-productName\">Produktname *</Label>\n              <Input\n                id=\"modal-productName\"\n                placeholder=\"z.B. Apple iPhone 15 Pro\"\n                value={formData.productName}\n                onChange={(e) => handleInputChange('productName', e.target.value)}\n                data-testid=\"modal-input-product-name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"modal-asin\">ASIN *</Label>\n              <Input\n                id=\"modal-asin\"\n                placeholder=\"B0XXXXXXXXX\"\n                value={formData.asin}\n                onChange={(e) => handleInputChange('asin', e.target.value)}\n                data-testid=\"modal-input-asin\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div>\n              <Label htmlFor=\"modal-buyPrice\">Einkaufspreis (€) *</Label>\n              <Input\n                id=\"modal-buyPrice\"\n                type=\"number\"\n                step=\"0.01\"\n                placeholder=\"0.00\"\n                value={formData.buyPrice}\n                onChange={(e) => handleInputChange('buyPrice', e.target.value)}\n                data-testid=\"modal-input-buy-price\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"modal-sellPrice\">Verkaufspreis (€) *</Label>\n              <Input\n                id=\"modal-sellPrice\"\n                type=\"number\"\n                step=\"0.01\"\n                placeholder=\"0.00\"\n                value={formData.sellPrice}\n                onChange={(e) => handleInputChange('sellPrice', e.target.value)}\n                data-testid=\"modal-input-sell-price\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"modal-profitMargin\">Profit Margin (%)</Label>\n              <Input\n                id=\"modal-profitMargin\"\n                type=\"number\"\n                step=\"0.1\"\n                placeholder=\"0.0\"\n                value={profitMargin}\n                readOnly\n                className=\"bg-muted\"\n                data-testid=\"modal-text-profit-margin\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label>Kategorie</Label>\n            <Select value={formData.category} onValueChange={(value) => handleInputChange('category', value)}>\n              <SelectTrigger data-testid=\"modal-select-category\">\n                <SelectValue placeholder=\"Kategorie wählen...\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"electronics\">Elektronik</SelectItem>\n                <SelectItem value=\"clothing\">Bekleidung</SelectItem>\n                <SelectItem value=\"home\">Haus & Garten</SelectItem>\n                <SelectItem value=\"sports\">Sport & Freizeit</SelectItem>\n                <SelectItem value=\"beauty\">Beauty & Gesundheit</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"modal-notes\">Notizen</Label>\n            <Textarea\n              id=\"modal-notes\"\n              rows={3}\n              placeholder=\"Zusätzliche Informationen zum Deal...\"\n              value={formData.notes}\n              onChange={(e) => handleInputChange('notes', e.target.value)}\n              data-testid=\"modal-textarea-notes\"\n            />\n          </div>\n\n          <div className=\"flex items-center justify-end space-x-4 pt-4 border-t border-border\">\n            <Button \n              type=\"button\" \n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"modal-button-cancel\"\n            >\n              Abbrechen\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={submitDeal.isPending}\n              data-testid=\"modal-button-submit\"\n            >\n              {submitDeal.isPending ? 'Wird eingereicht...' : 'Deal einreichen'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8268},"client/src/components/kpi-cards.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function KpiCards() {\n  const { data: kpis, isLoading } = useQuery({\n    queryKey: ['/api/dashboard/kpis'],\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('de-DE', {\n      style: 'currency',\n      currency: 'EUR'\n    }).format(amount);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {Array.from({ length: 4 }).map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                <div className=\"h-8 bg-muted rounded w-1/2 mb-4\"></div>\n                <div className=\"h-3 bg-muted rounded w-1/3\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const kpiData = [\n    {\n      title: \"Active Deals\",\n      value: kpis?.activeDeals || 0,\n      icon: \"fas fa-handshake\",\n      gradient: \"from-blue-500 to-cyan-400\",\n      bgColor: \"bg-gradient-to-br from-blue-500/10 to-cyan-400/10\",\n      change: \"+12%\",\n      changeLabel: \"vs. last month\",\n      trend: \"up\",\n    },\n    {\n      title: \"Winner Products\",\n      value: kpis?.winnerProducts || 0,\n      icon: \"fas fa-trophy\",\n      gradient: \"from-emerald-500 to-teal-400\",\n      bgColor: \"bg-gradient-to-br from-emerald-500/10 to-teal-400/10\",\n      change: \"+8%\",\n      changeLabel: \"Success rate\",\n      trend: \"up\",\n    },\n    {\n      title: \"Monthly Profit\",\n      value: formatCurrency(kpis?.monthlyProfit || 0),\n      icon: \"fas fa-euro-sign\",\n      gradient: \"from-yellow-500 to-orange-400\",\n      bgColor: \"bg-gradient-to-br from-yellow-500/10 to-orange-400/10\",\n      change: \"+23%\",\n      changeLabel: \"vs. last month\",\n      trend: \"up\",\n    },\n    {\n      title: \"Available Budget\",\n      value: formatCurrency(kpis?.availableBudget || 0),\n      icon: \"fas fa-wallet\",\n      gradient: \"from-purple-500 to-pink-400\",\n      bgColor: \"bg-gradient-to-br from-purple-500/10 to-pink-400/10\",\n      change: \"82%\",\n      changeLabel: \"of total budget\",\n      trend: \"neutral\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {kpiData.map((kpi, index) => (\n        <Card key={index} className=\"card-hover glass border-0 relative overflow-hidden group\">\n          <div className={`absolute inset-0 ${kpi.bgColor} opacity-20 group-hover:opacity-30 transition-opacity duration-300`}></div>\n          <CardContent className=\"p-6 relative\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-muted-foreground mb-2\">{kpi.title}</p>\n                <p className=\"text-3xl font-bold gradient-text\" data-testid={`kpi-${kpi.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                  {kpi.value}\n                </p>\n              </div>\n              <div className={`p-4 rounded-2xl bg-gradient-to-br ${kpi.gradient} shadow-lg animate-float`} style={{ animationDelay: `${index * 0.5}s` }}>\n                <i className={`${kpi.icon} text-white text-xl`}></i>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between pt-4 border-t border-white/10\">\n              <div className=\"flex items-center space-x-2\">\n                <div className={`flex items-center space-x-1 px-2 py-1 rounded-full ${\n                  kpi.trend === 'up' ? 'bg-emerald-500/20 text-emerald-400' : \n                  kpi.trend === 'down' ? 'bg-red-500/20 text-red-400' : \n                  'bg-gray-500/20 text-gray-400'\n                }`}>\n                  {kpi.trend === 'up' && <i className=\"fas fa-arrow-up text-xs\"></i>}\n                  {kpi.trend === 'down' && <i className=\"fas fa-arrow-down text-xs\"></i>}\n                  {kpi.trend === 'neutral' && <i className=\"fas fa-minus text-xs\"></i>}\n                  <span className=\"text-sm font-semibold\">{kpi.change}</span>\n                </div>\n              </div>\n              <span className=\"text-xs text-muted-foreground\">{kpi.changeLabel}</span>\n            </div>\n            <div className=\"absolute top-0 left-0 w-full h-1 bg-gradient-to-r ${kpi.gradient} opacity-60\"></div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":4500},"client/src/components/pipeline-overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function PipelineOverview() {\n  const { data: pipeline, isLoading: pipelineLoading } = useQuery({\n    queryKey: ['/api/dashboard/pipeline'],\n  });\n\n  const { data: deals, isLoading: dealsLoading } = useQuery({\n    queryKey: ['/api/deals'],\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      submitted: { label: \"Submitted\", variant: \"secondary\" as const },\n      reviewing: { label: \"Under Review\", variant: \"default\" as const },\n      approved: { label: \"Approved\", variant: \"default\" as const },\n      winner: { label: \"Winner\", variant: \"default\" as const },\n      rejected: { label: \"Rejected\", variant: \"destructive\" as const },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.submitted;\n    return <Badge variant={config.variant}>{config.label}</Badge>;\n  };\n\n  const formatPrice = (price: string | number) => {\n    return new Intl.NumberFormat('de-DE', {\n      style: 'currency',\n      currency: 'EUR'\n    }).format(Number(price));\n  };\n\n  if (pipelineLoading || dealsLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Deal Pipeline</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              {Array.from({ length: 4 }).map((_, i) => (\n                <div key={i} className=\"text-center\">\n                  <div className=\"w-12 h-12 bg-muted rounded-lg mx-auto mb-2\"></div>\n                  <div className=\"h-4 bg-muted rounded w-3/4 mx-auto mb-1\"></div>\n                  <div className=\"h-6 bg-muted rounded w-1/2 mx-auto\"></div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const pipelineData = [\n    {\n      title: \"Submitted\",\n      count: pipeline?.submitted || 0,\n      icon: \"fas fa-inbox\",\n      bgColor: \"bg-blue-100\",\n      iconColor: \"text-blue-600\",\n    },\n    {\n      title: \"Under Review\",\n      count: pipeline?.reviewing || 0,\n      icon: \"fas fa-clock\",\n      bgColor: \"bg-yellow-100\",\n      iconColor: \"text-yellow-600\",\n    },\n    {\n      title: \"Winner\",\n      count: pipeline?.winner || 0,\n      icon: \"fas fa-trophy\",\n      bgColor: \"bg-green-100\",\n      iconColor: \"text-green-600\",\n    },\n    {\n      title: \"Approved\",\n      count: pipeline?.approved || 0,\n      icon: \"fas fa-check\",\n      bgColor: \"bg-emerald-100\",\n      iconColor: \"text-emerald-600\",\n    },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Deal Pipeline</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              Filter\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              Export\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* Pipeline Stages */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          {pipelineData.map((stage, index) => (\n            <div key={index} className=\"text-center\">\n              <div className={`flex items-center justify-center w-12 h-12 ${stage.bgColor} rounded-lg mx-auto mb-2`}>\n                <i className={`${stage.icon} ${stage.iconColor}`}></i>\n              </div>\n              <h4 className=\"text-sm font-medium text-foreground\">{stage.title}</h4>\n              <p className=\"text-xl font-bold text-foreground\" data-testid={`pipeline-${stage.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                {stage.count}\n              </p>\n            </div>\n          ))}\n        </div>\n\n        {/* Recent Deals Table */}\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-border\">\n                <th className=\"text-left py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Product\n                </th>\n                <th className=\"text-left py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  VA\n                </th>\n                <th className=\"text-left py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"text-left py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Profit %\n                </th>\n                <th className=\"text-left py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Submitted\n                </th>\n                <th className=\"text-right py-3 px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-border\">\n              {!deals || deals.length === 0 ? (\n                <tr>\n                  <td colSpan={6} className=\"py-8 text-center text-muted-foreground\">\n                    No deals available\n                  </td>\n                </tr>\n              ) : (\n                deals.slice(0, 5).map((deal: any) => (\n                  <tr key={deal.id} className=\"hover:bg-muted/50\">\n                    <td className=\"py-4 px-4\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-10 h-10 bg-muted rounded-lg mr-3 flex items-center justify-center\">\n                          <i className=\"fas fa-image text-muted-foreground text-xs\"></i>\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-foreground\">\n                            {deal.product?.productName || 'Unknown Product'}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            ASIN: {deal.product?.asin || 'N/A'}\n                          </p>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <span className=\"text-sm text-foreground\">\n                        {deal.submitter?.firstName} {deal.submitter?.lastName}\n                      </span>\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      {getStatusBadge(deal.status)}\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <span className=\"text-sm font-medium text-green-600\">\n                        {Number(deal.profitMargin || 0).toFixed(1)}%\n                      </span>\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        {new Date(deal.createdAt).toLocaleDateString('de-DE')}\n                      </span>\n                    </td>\n                    <td className=\"py-4 px-4 text-right\">\n                      <Button variant=\"ghost\" size=\"sm\" data-testid={`button-details-${deal.id}`}>\n                        Details\n                      </Button>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7718},"client/src/components/recent-activity.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function RecentActivity() {\n  const { data: activities, isLoading } = useQuery({\n    queryKey: ['/api/activities'],\n  });\n\n  const getActivityIcon = (action: string) => {\n    const iconMap: Record<string, { icon: string; bgColor: string; iconColor: string }> = {\n      'deal_submitted': { icon: 'fas fa-check', bgColor: 'bg-green-100', iconColor: 'text-green-600' },\n      'deal_status_updated': { icon: 'fas fa-star', bgColor: 'bg-blue-100', iconColor: 'text-blue-600' },\n      'sku_generated': { icon: 'fas fa-barcode', bgColor: 'bg-orange-100', iconColor: 'text-orange-600' },\n      'purchase_created': { icon: 'fas fa-shopping-cart', bgColor: 'bg-purple-100', iconColor: 'text-purple-600' },\n    };\n    \n    return iconMap[action] || { icon: 'fas fa-info', bgColor: 'bg-gray-100', iconColor: 'text-gray-600' };\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const now = new Date();\n    const date = new Date(dateString);\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'gerade eben';\n    if (diffInMinutes < 60) return `vor ${diffInMinutes} Minuten`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `vor ${diffInHours} Stunden`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    return `vor ${diffInDays} Tagen`;\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Letzte Aktivitäten</CardTitle>\n            <Button variant=\"ghost\" size=\"sm\">Alle anzeigen</Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"flex items-start space-x-4 animate-pulse\">\n                <div className=\"w-8 h-8 bg-muted rounded-full\"></div>\n                <div className=\"flex-1\">\n                  <div className=\"h-4 bg-muted rounded w-3/4 mb-1\"></div>\n                  <div className=\"h-3 bg-muted rounded w-1/4\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Letzte Aktivitäten</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\">Alle anzeigen</Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {!activities || activities.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <i className=\"fas fa-history text-2xl text-muted-foreground mb-2\"></i>\n              <p className=\"text-muted-foreground\">Keine aktuellen Aktivitäten</p>\n            </div>\n          ) : (\n            activities.slice(0, 5).map((activity: any) => {\n              const { icon, bgColor, iconColor } = getActivityIcon(activity.action);\n              \n              return (\n                <div key={activity.id} className=\"flex items-start space-x-4\">\n                  <div className={`flex-shrink-0 w-8 h-8 ${bgColor} rounded-full flex items-center justify-center`}>\n                    <i className={`${icon} ${iconColor} text-xs`}></i>\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm text-foreground\" data-testid={`activity-${activity.id}`}>\n                      {activity.description}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {formatTimeAgo(activity.createdAt)}\n                    </p>\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4049},"client/src/components/sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function Sidebar() {\n  const { user } = useAuth();\n  const currentPath = window.location.pathname;\n\n  const navigationItems = [\n    { href: '/', icon: 'fas fa-tachometer-alt', label: 'Dashboard', roles: ['admin', 'va'] },\n    { href: '/sourcing', icon: 'fas fa-inbox', label: 'Sourcing Inbox', roles: ['admin', 'va'] },\n    { href: '/purchasing-inbox', icon: 'fas fa-shopping-bag', label: 'Purchasing Inbox', roles: ['admin', 'va'] },\n    { href: '/purchasing', icon: 'fas fa-shopping-cart', label: 'Purchasing Planner', roles: ['admin'] },\n    { href: '/listings', icon: 'fas fa-barcode', label: 'Listing Builder', roles: ['admin'] },\n    { href: '/performance', icon: 'fas fa-chart-line', label: 'VA Performance', roles: ['admin', 'va'] },\n    { href: '/api-settings', icon: 'fas fa-key', label: 'API-Einstellungen', roles: ['admin'] },\n  ];\n\n  const filteredItems = navigationItems.filter(item => \n    !user || !user.role || item.roles.includes(user.role)\n  );\n\n  return (\n    <aside className=\"hidden lg:flex lg:flex-shrink-0\">\n      <div className=\"flex flex-col w-64 bg-card border-r border-border\">\n        {/* Logo/Header */}\n        <div className=\"flex items-center justify-between h-16 px-6 border-b border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center justify-center w-8 h-8 bg-primary rounded-lg\">\n              <i className=\"fas fa-box text-primary-foreground text-sm\"></i>\n            </div>\n            <span className=\"text-lg font-semibold text-foreground\">ResellerPro</span>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 px-4 py-6 space-y-2\">\n          {filteredItems.map((item) => (\n            <a\n              key={item.href}\n              href={item.href}\n              className={cn(\n                \"flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors\",\n                currentPath === item.href\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n              )}\n              data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <i className={`${item.icon} mr-3`}></i>\n              {item.label}\n            </a>\n          ))}\n        </nav>\n\n        {/* User Profile */}\n        <div className=\"px-4 py-4 border-t border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-xs font-medium text-primary-foreground\">\n                {user?.firstName?.[0] || '?'}{user?.lastName?.[0] || ''}\n              </span>\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-foreground truncate\">\n                {user?.firstName || ''} {user?.lastName || ''}\n              </p>\n              <p className=\"text-xs text-muted-foreground truncate\">\n                {user?.role === 'admin' ? 'Admin' : 'VA'}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3299},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  urlOrMethod: string,\n  methodOrData?: string,\n  dataOrUndefined?: unknown | undefined,\n): Promise<any> {\n  let url: string;\n  let method: string;\n  let data: unknown | undefined;\n\n  // Support both patterns: apiRequest(url) and apiRequest(url, method, data)\n  if (methodOrData && typeof methodOrData === 'string' && ['GET', 'POST', 'PATCH', 'PUT', 'DELETE'].includes(methodOrData.toUpperCase())) {\n    // New pattern: apiRequest(url, method, data)\n    url = urlOrMethod;\n    method = methodOrData.toUpperCase();\n    data = dataOrUndefined;\n  } else {\n    // Old pattern: apiRequest(url) or apiRequest(url, data) (defaults to GET)\n    url = urlOrMethod;\n    method = 'GET';\n    data = methodOrData;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2015},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/api-settings.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Key, Shield, CheckCircle, AlertCircle, ExternalLink, Save } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function APISettings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [apiKeys, setApiKeys] = useState({\n    KEEPA_API_KEY: \"\",\n    AMAZON_SP_API_CLIENT_ID: \"\",\n    AMAZON_SP_API_CLIENT_SECRET: \"\",\n    AMAZON_SP_API_REFRESH_TOKEN: \"\",\n    PREP_MY_BUSINESS_API_KEY: \"\",\n    PREP_MY_BUSINESS_BASE_URL: \"\",\n    GOOGLE_SHEETS_API_KEY: \"\",\n    GOOGLE_SHEETS_SPREADSHEET_ID: \"\",\n  });\n\n  const userRole = (user as any)?.role || 'va';\n  const isAdmin = userRole === 'admin';\n\n  // Mock save mutation - in real implementation this would use ask_secrets\n  const saveApiKeysMutation = useMutation({\n    mutationFn: async (keys: typeof apiKeys) => {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return { success: true };\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"API keys saved securely\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInputChange = (key: string, value: string) => {\n    setApiKeys(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n\n  const handleSave = () => {\n    const filledKeys = Object.entries(apiKeys).filter(([_, value]) => value.trim() !== \"\");\n    if (filledKeys.length === 0) {\n      toast({\n        title: \"No keys to save\",\n        description: \"Please enter at least one API key\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    saveApiKeysMutation.mutate(apiKeys);\n  };\n\n  const getKeyStatus = (key: string) => {\n    const value = apiKeys[key as keyof typeof apiKeys];\n    if (!value || value.trim() === \"\") {\n      return { status: \"missing\", icon: AlertCircle, color: \"text-red-600\" };\n    }\n    return { status: \"configured\", icon: CheckCircle, color: \"text-green-600\" };\n  };\n\n  if (!isAdmin) {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardContent className=\"pt-6 text-center\">\n            <p className=\"text-muted-foreground\">\n              Access restricted to administrators only.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const apiIntegrations = [\n    {\n      name: \"Keepa API\",\n      description: \"Product tracking, price history, and BuyBox data\",\n      website: \"https://keepa.com/#!api\",\n      keys: [\n        { key: \"KEEPA_API_KEY\", label: \"API Key\", type: \"password\", placeholder: \"Enter your Keepa API key\" }\n      ]\n    },\n    {\n      name: \"Amazon SP-API\",\n      description: \"Amazon Seller Partner API for marketplace integration\",\n      website: \"https://developer-docs.amazon.com/sp-api/\",\n      keys: [\n        { key: \"AMAZON_SP_API_CLIENT_ID\", label: \"Client ID\", type: \"text\", placeholder: \"Enter Client ID\" },\n        { key: \"AMAZON_SP_API_CLIENT_SECRET\", label: \"Client Secret\", type: \"password\", placeholder: \"Enter Client Secret\" },\n        { key: \"AMAZON_SP_API_REFRESH_TOKEN\", label: \"Refresh Token\", type: \"password\", placeholder: \"Enter Refresh Token\" }\n      ]\n    },\n    {\n      name: \"PrepMyBusiness\",\n      description: \"FBA prep and logistics management\",\n      website: \"https://prepmybusiness.com/api\",\n      keys: [\n        { key: \"PREP_MY_BUSINESS_API_KEY\", label: \"API Key\", type: \"password\", placeholder: \"Enter API key\" },\n        { key: \"PREP_MY_BUSINESS_BASE_URL\", label: \"Base URL\", type: \"text\", placeholder: \"https://api.prepmybusiness.com\" }\n      ]\n    },\n    {\n      name: \"Google Sheets\",\n      description: \"Spreadsheet integration for data import/export\",\n      website: \"https://developers.google.com/sheets/api\",\n      keys: [\n        { key: \"GOOGLE_SHEETS_API_KEY\", label: \"API Key\", type: \"password\", placeholder: \"Enter Google Sheets API key\" },\n        { key: \"GOOGLE_SHEETS_SPREADSHEET_ID\", label: \"Spreadsheet ID\", type: \"text\", placeholder: \"Enter Spreadsheet ID from URL\" }\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">API-Einstellungen</h1>\n          <p className=\"text-muted-foreground\">\n            Verwalten Sie API-Schlüssel für externe Integrationen\n          </p>\n        </div>\n        <Button\n          onClick={handleSave}\n          disabled={saveApiKeysMutation.isPending}\n          data-testid=\"button-save-keys\"\n        >\n          {saveApiKeysMutation.isPending ? (\n            \"Speichern...\"\n          ) : (\n            <>\n              <Save className=\"h-4 w-4 mr-2\" />\n              Speichern\n            </>\n          )}\n        </Button>\n      </div>\n\n      <Alert>\n        <Shield className=\"h-4 w-4\" />\n        <AlertDescription>\n          Alle API-Schlüssel werden sicher verschlüsselt gespeichert. Sie sind nur für Administratoren sichtbar.\n        </AlertDescription>\n      </Alert>\n\n      <div className=\"grid gap-6\">\n        {apiIntegrations.map((integration) => (\n          <Card key={integration.name} data-testid={`card-${integration.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div className=\"space-y-1\">\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Key className=\"h-5 w-5\" />\n                    {integration.name}\n                  </CardTitle>\n                  <CardDescription>{integration.description}</CardDescription>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    asChild\n                  >\n                    <a\n                      href={integration.website}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      data-testid={`link-docs-${integration.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <ExternalLink className=\"h-3 w-3 mr-1\" />\n                      Docs\n                    </a>\n                  </Button>\n                  {integration.keys.every(k => getKeyStatus(k.key).status === \"configured\") ? (\n                    <Badge variant=\"default\" className=\"bg-green-600 text-white\">\n                      <CheckCircle className=\"h-3 w-3 mr-1\" />\n                      Configured\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"secondary\">\n                      <AlertCircle className=\"h-3 w-3 mr-1\" />\n                      Missing Keys\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {integration.keys.map((keyConfig) => {\n                const status = getKeyStatus(keyConfig.key);\n                const IconComponent = status.icon;\n\n                return (\n                  <div key={keyConfig.key} className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Label htmlFor={keyConfig.key}>{keyConfig.label}</Label>\n                      <IconComponent className={`h-4 w-4 ${status.color}`} />\n                    </div>\n                    <Input\n                      id={keyConfig.key}\n                      type={keyConfig.type}\n                      placeholder={keyConfig.placeholder}\n                      value={apiKeys[keyConfig.key as keyof typeof apiKeys]}\n                      onChange={(e) => handleInputChange(keyConfig.key, e.target.value)}\n                      data-testid={`input-${keyConfig.key.toLowerCase()}`}\n                    />\n                  </div>\n                );\n              })}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Additional Configuration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            Erweiterte Konfiguration\n          </CardTitle>\n          <CardDescription>\n            Zusätzliche Einstellungen für API-Integrationen\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label>Google Sheets Import-Spalten Mapping</Label>\n            <Textarea\n              placeholder=\"JSON-Konfiguration für Spalten-Mapping (optional)\"\n              className=\"min-h-[100px]\"\n              data-testid=\"textarea-sheets-mapping\"\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              Beispiel: {\"{\"}\"A\": \"productName\", \"B\": \"asin\", \"C\": \"costPrice\"{\"}\"}\n            </p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Keepa Domain/Marketplace</Label>\n            <Input\n              placeholder=\"1 (Amazon.com), 2 (Amazon.co.uk), 3 (Amazon.de)\"\n              data-testid=\"input-keepa-domain\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Amazon Marketplace ID</Label>\n            <Input\n              placeholder=\"A1PA6795UKMFR9 (Germany), ATVPDKIKX0DER (US)\"\n              data-testid=\"input-amazon-marketplace\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Integration Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Integration Status</CardTitle>\n          <CardDescription>\n            Übersicht über den Status aller API-Integrationen\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {apiIntegrations.map((integration) => {\n              const allConfigured = integration.keys.every(k => getKeyStatus(k.key).status === \"configured\");\n              const someConfigured = integration.keys.some(k => getKeyStatus(k.key).status === \"configured\");\n\n              return (\n                <div\n                  key={integration.name}\n                  className=\"flex items-center justify-between p-3 border rounded-lg\"\n                  data-testid={`status-${integration.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Key className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"font-medium\">{integration.name}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {allConfigured ? (\n                      <Badge variant=\"default\" className=\"bg-green-600 text-white\">\n                        Ready\n                      </Badge>\n                    ) : someConfigured ? (\n                      <Badge variant=\"default\" className=\"bg-yellow-600 text-white\">\n                        Partial\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"secondary\">\n                        Not Configured\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11920},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/sidebar\";\nimport KpiCards from \"@/components/kpi-cards\";\nimport RecentActivity from \"@/components/recent-activity\";\nimport PipelineOverview from \"@/components/pipeline-overview\";\nimport PurchasingOverview from \"@/components/purchasing-overview\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are not logged in. Redirecting to login...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const googleSheetsImport = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/integrations/google-sheets/import\");\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Import successful\",\n        description: \"Google Sheets data was successfully imported.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are not logged in. Redirecting to login...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Import failed\",\n        description: \"Google Sheets import could not be performed.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-gradient-to-br from-slate-50 via-white to-blue-50/30\">\n      <Sidebar />\n      \n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        {/* Header */}\n        <header className=\"glass border-b border-white/10 backdrop-blur-xl\">\n          <div className=\"flex items-center justify-between h-20 px-6\">\n            <div className=\"flex items-center space-x-4\">\n              <button className=\"lg:hidden p-3 rounded-xl text-muted-foreground hover:bg-white/10 transition-all duration-200\">\n                <i className=\"fas fa-bars\"></i>\n              </button>\n              <div>\n                <h1 className=\"text-2xl font-bold gradient-text\">Dashboard</h1>\n                <p className=\"text-xs text-muted-foreground mt-1\">Welcome back, {user?.firstName}!</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {/* Google Sheets Sync Status */}\n              <div className=\"flex items-center space-x-3 px-4 py-2 bg-emerald-500/20 border border-emerald-500/30 rounded-xl backdrop-blur-sm\">\n                <div className=\"w-3 h-3 bg-emerald-400 rounded-full animate-glow\"></div>\n                <span className=\"text-sm font-medium text-emerald-300\">Sheets Sync Active</span>\n              </div>\n              \n              <button className=\"p-3 text-muted-foreground hover:bg-white/10 rounded-xl transition-all duration-200 relative\">\n                <i className=\"fas fa-bell text-lg\"></i>\n                <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n              </button>\n              <button \n                className=\"p-3 text-muted-foreground hover:bg-white/10 rounded-xl transition-all duration-200\"\n                onClick={() => window.location.href = '/api/logout'}\n                data-testid=\"button-logout\"\n              >\n                <i className=\"fas fa-sign-out-alt text-lg\"></i>\n              </button>\n            </div>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"p-8 space-y-8\">\n            {/* Welcome Section */}\n            <div className=\"mb-8\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h2 className=\"text-lg text-muted-foreground mb-2\">Analytics Overview</h2>\n                  <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                    <div className=\"flex items-center space-x-1\">\n                      <i className=\"fas fa-calendar text-primary\"></i>\n                      <span>{new Date().toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <i className=\"fas fa-clock text-primary\"></i>\n                      <span>Last updated: {new Date().toLocaleTimeString()}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* KPI Cards */}\n            <div>\n              <KpiCards />\n            </div>\n\n            {/* Quick Actions & Recent Activity */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Quick Actions */}\n              <Card className=\"glass border-0 card-hover\">\n                <CardContent className=\"p-8\">\n                  <div className=\"flex items-center mb-6\">\n                    <div className=\"p-3 bg-gradient-to-r from-primary to-purple-600 rounded-xl mr-4\">\n                      <i className=\"fas fa-rocket text-white\"></i>\n                    </div>\n                    <h3 className=\"text-xl font-bold gradient-text\">Quick Actions</h3>\n                  </div>\n                  <div className=\"space-y-4\">\n                    <Button \n                      className=\"w-full justify-between h-14 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 border-0 rounded-xl transition-all duration-300 hover:scale-105\" \n                      onClick={() => window.location.href = '/deals/submit'}\n                      data-testid=\"button-new-deal\"\n                    >\n                      <span className=\"flex items-center\">\n                        <i className=\"fas fa-plus mr-3 text-lg\"></i>\n                        <span className=\"font-semibold\">Submit New Deal</span>\n                      </span>\n                      <i className=\"fas fa-arrow-right text-lg\"></i>\n                    </Button>\n                    \n                    <Button \n                      className=\"w-full justify-between h-14 bg-gradient-to-r from-emerald-600 to-cyan-600 hover:from-emerald-700 hover:to-cyan-700 border-0 rounded-xl transition-all duration-300 hover:scale-105\"\n                      onClick={() => googleSheetsImport.mutate()}\n                      disabled={googleSheetsImport.isPending}\n                      data-testid=\"button-google-sheets-import\"\n                    >\n                      <span className=\"flex items-center\">\n                        <i className={`${googleSheetsImport.isPending ? 'fas fa-spinner animate-spin' : 'fas fa-sync'} mr-3 text-lg`}></i>\n                        <span className=\"font-semibold\">{googleSheetsImport.isPending ? 'Importing...' : 'Sync Google Sheets'}</span>\n                      </span>\n                      <i className=\"fas fa-arrow-right text-lg\"></i>\n                    </Button>\n                    \n                    {user?.role === 'admin' && (\n                      <Button \n                        className=\"w-full justify-between h-14 bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 border-0 rounded-xl transition-all duration-300 hover:scale-105\"\n                        onClick={() => window.location.href = '/deals/evaluate'}\n                        data-testid=\"button-deal-evaluation\"\n                      >\n                        <span className=\"flex items-center\">\n                          <i className=\"fas fa-check-circle mr-3 text-lg\"></i>\n                          <span className=\"font-semibold\">Deal Evaluation</span>\n                        </span>\n                        <i className=\"fas fa-arrow-right text-lg\"></i>\n                      </Button>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Recent Activity */}\n              <div className=\"lg:col-span-2\">\n                <RecentActivity />\n              </div>\n            </div>\n\n            {/* Pipeline Overview */}\n            <PipelineOverview />\n\n            {/* Purchasing Overview */}\n            <PurchasingOverview />\n\n            {/* API Integration Status */}\n            <Card className=\"glass border-0 card-hover\">\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-center mb-6\">\n                  <div className=\"p-3 bg-gradient-to-r from-cyan-500 to-blue-600 rounded-xl mr-4\">\n                    <i className=\"fas fa-plug text-white\"></i>\n                  </div>\n                  <h3 className=\"text-xl font-bold gradient-text\">API Integrations</h3>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"relative p-6 bg-gradient-to-br from-emerald-500/10 to-green-400/10 border border-emerald-500/20 rounded-2xl backdrop-blur-sm hover:scale-105 transition-all duration-300\">\n                    <div className=\"absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-emerald-500 to-green-400 rounded-t-2xl\"></div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-500 to-green-400 rounded-xl flex items-center justify-center shadow-lg\">\n                          <i className=\"fab fa-amazon text-white text-lg\"></i>\n                        </div>\n                        <div>\n                          <p className=\"font-semibold text-emerald-300\">Amazon MWS</p>\n                          <p className=\"text-xs text-emerald-400/70\">Last Sync: 5 min ago</p>\n                        </div>\n                      </div>\n                      <div className=\"w-4 h-4 bg-emerald-400 rounded-full animate-glow shadow-lg\"></div>\n                    </div>\n                  </div>\n\n                  <div className=\"relative p-6 bg-gradient-to-br from-blue-500/10 to-cyan-400/10 border border-blue-500/20 rounded-2xl backdrop-blur-sm hover:scale-105 transition-all duration-300\">\n                    <div className=\"absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-500 to-cyan-400 rounded-t-2xl\"></div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-cyan-400 rounded-xl flex items-center justify-center shadow-lg\">\n                          <i className=\"fas fa-box text-white text-lg\"></i>\n                        </div>\n                        <div>\n                          <p className=\"font-semibold text-blue-300\">PrepMyBusiness</p>\n                          <p className=\"text-xs text-blue-400/70\">Last Sync: 12 min ago</p>\n                        </div>\n                      </div>\n                      <div className=\"w-4 h-4 bg-blue-400 rounded-full animate-glow shadow-lg\"></div>\n                    </div>\n                  </div>\n\n                  <div className=\"relative p-6 bg-gradient-to-br from-purple-500/10 to-pink-400/10 border border-purple-500/20 rounded-2xl backdrop-blur-sm hover:scale-105 transition-all duration-300\">\n                    <div className=\"absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-purple-500 to-pink-400 rounded-t-2xl\"></div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-400 rounded-xl flex items-center justify-center shadow-lg\">\n                          <i className=\"fab fa-google text-white text-lg\"></i>\n                        </div>\n                        <div>\n                          <p className=\"font-semibold text-purple-300\">Google Sheets</p>\n                          <p className=\"text-xs text-purple-400/70\">Live Sync active</p>\n                        </div>\n                      </div>\n                      <div className=\"w-4 h-4 bg-purple-400 rounded-full animate-pulse shadow-lg\"></div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13400},"client/src/pages/deal-evaluation.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function DealEvaluation() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Redirect if not admin\n  useEffect(() => {\n    if (!isLoading && isAuthenticated && user?.role !== 'admin') {\n      toast({\n        title: \"Zugriff verweigert\",\n        description: \"Sie haben keine Berechtigung für diese Seite.\",\n        variant: \"destructive\",\n      });\n      window.location.href = '/';\n    }\n  }, [user, isAuthenticated, isLoading, toast]);\n\n  const { data: deals, isLoading: dealsLoading } = useQuery({\n    queryKey: ['/api/deals'],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  const updateDealStatus = useMutation({\n    mutationFn: async ({ dealId, status, reviewNotes }: { dealId: string; status: string; reviewNotes?: string }) => {\n      await apiRequest(\"PATCH\", `/api/deals/${dealId}/status`, { status, reviewNotes });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Status aktualisiert\",\n        description: \"Der Deal-Status wurde erfolgreich aktualisiert.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/deals'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/activities'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/pipeline'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Sie sind nicht angemeldet. Weiterleitung zur Anmeldung...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Fehler\",\n        description: \"Status konnte nicht aktualisiert werden.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      submitted: { label: \"Eingereicht\", variant: \"secondary\" as const },\n      reviewing: { label: \"In Bewertung\", variant: \"default\" as const },\n      approved: { label: \"Genehmigt\", variant: \"default\" as const },\n      winner: { label: \"Winner\", variant: \"default\" as const },\n      rejected: { label: \"Abgelehnt\", variant: \"destructive\" as const },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.submitted;\n    return <Badge variant={config.variant}>{config.label}</Badge>;\n  };\n\n  const formatPrice = (price: string | number) => {\n    return new Intl.NumberFormat('de-DE', {\n      style: 'currency',\n      currency: 'EUR'\n    }).format(Number(price));\n  };\n\n  if (isLoading || dealsLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user || user.role !== 'admin') {\n    return null;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar />\n      \n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border\">\n          <div className=\"flex items-center justify-between h-16 px-6\">\n            <h1 className=\"text-xl font-semibold text-foreground\">Deal Bewertung</h1>\n            <Button \n              variant=\"outline\"\n              onClick={() => window.location.href = '/'}\n              data-testid=\"button-back-dashboard\"\n            >\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Zurück zum Dashboard\n            </Button>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-auto bg-background p-6\">\n          <div className=\"space-y-6\">\n            {!deals || deals.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <i className=\"fas fa-inbox text-4xl text-muted-foreground mb-4\"></i>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">Keine Deals zu bewerten</h3>\n                  <p className=\"text-muted-foreground\">\n                    Es sind derzeit keine Deals zur Bewertung vorhanden.\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              deals.map((deal: any) => (\n                <Card key={deal.id}>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-muted rounded-lg flex items-center justify-center\">\n                          <i className=\"fas fa-image text-muted-foreground text-xs\"></i>\n                        </div>\n                        <div>\n                          <h3 className=\"text-lg font-semibold\">{deal.product?.productName || 'Unbekanntes Produkt'}</h3>\n                          <p className=\"text-sm text-muted-foreground\">ASIN: {deal.product?.asin}</p>\n                        </div>\n                      </CardTitle>\n                      {getStatusBadge(deal.status)}\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Eingereicht von</p>\n                        <p className=\"font-medium\">{deal.submitter?.firstName} {deal.submitter?.lastName}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Einkaufspreis</p>\n                        <p className=\"font-medium\">{formatPrice(deal.buyPrice)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Verkaufspreis</p>\n                        <p className=\"font-medium\">{formatPrice(deal.sellPrice)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Profit Margin</p>\n                        <p className=\"font-medium text-green-600\">{Number(deal.profitMargin).toFixed(1)}%</p>\n                      </div>\n                    </div>\n\n                    {deal.notes && (\n                      <div className=\"mb-6\">\n                        <p className=\"text-sm text-muted-foreground mb-2\">Notizen</p>\n                        <p className=\"text-sm bg-muted p-3 rounded-md\">{deal.notes}</p>\n                      </div>\n                    )}\n\n                    {deal.status === 'submitted' || deal.status === 'reviewing' ? (\n                      <div className=\"flex items-center space-x-3\">\n                        <Button\n                          size=\"sm\"\n                          onClick={() => updateDealStatus.mutate({ \n                            dealId: deal.id, \n                            status: 'reviewing' \n                          })}\n                          disabled={updateDealStatus.isPending}\n                          data-testid={`button-review-${deal.id}`}\n                        >\n                          <i className=\"fas fa-eye mr-2\"></i>\n                          In Bewertung\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"default\"\n                          onClick={() => updateDealStatus.mutate({ \n                            dealId: deal.id, \n                            status: 'approved',\n                            reviewNotes: 'Deal genehmigt für weitere Prüfung'\n                          })}\n                          disabled={updateDealStatus.isPending}\n                          data-testid={`button-approve-${deal.id}`}\n                        >\n                          <i className=\"fas fa-check mr-2\"></i>\n                          Genehmigen\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => updateDealStatus.mutate({ \n                            dealId: deal.id, \n                            status: 'winner',\n                            reviewNotes: 'Ausgezeichnet als Winner - bereit für Einkaufsplanung'\n                          })}\n                          disabled={updateDealStatus.isPending}\n                          className=\"bg-green-600 hover:bg-green-700\"\n                          data-testid={`button-winner-${deal.id}`}\n                        >\n                          <i className=\"fas fa-trophy mr-2\"></i>\n                          Als Winner markieren\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => updateDealStatus.mutate({ \n                            dealId: deal.id, \n                            status: 'rejected',\n                            reviewNotes: 'Deal entspricht nicht den Kriterien'\n                          })}\n                          disabled={updateDealStatus.isPending}\n                          data-testid={`button-reject-${deal.id}`}\n                        >\n                          <i className=\"fas fa-times mr-2\"></i>\n                          Ablehnen\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                        <i className=\"fas fa-info-circle\"></i>\n                        <span>\n                          Deal wurde am {new Date(deal.reviewedAt).toLocaleDateString('de-DE')} bewertet\n                        </span>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10554},"client/src/pages/deal-submission.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface DealForm {\n  productName: string;\n  asin: string;\n  buyPrice: string;\n  sellPrice: string;\n  category: string;\n  notes: string;\n}\n\nexport default function DealSubmission() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [formData, setFormData] = useState<DealForm>({\n    productName: '',\n    asin: '',\n    buyPrice: '',\n    sellPrice: '',\n    category: '',\n    notes: '',\n  });\n\n  const [profitMargin, setProfitMargin] = useState<string>('');\n\n  const calculateProfitMargin = (buyPrice: string, sellPrice: string) => {\n    const buy = parseFloat(buyPrice) || 0;\n    const sell = parseFloat(sellPrice) || 0;\n    \n    if (buy > 0 && sell > 0) {\n      const profit = sell - buy;\n      const margin = (profit / sell) * 100;\n      setProfitMargin(margin.toFixed(1));\n    } else {\n      setProfitMargin('');\n    }\n  };\n\n  const handleInputChange = (field: keyof DealForm, value: string) => {\n    const newFormData = { ...formData, [field]: value };\n    setFormData(newFormData);\n    \n    if (field === 'buyPrice' || field === 'sellPrice') {\n      calculateProfitMargin(\n        field === 'buyPrice' ? value : formData.buyPrice,\n        field === 'sellPrice' ? value : formData.sellPrice\n      );\n    }\n  };\n\n  const submitDeal = useMutation({\n    mutationFn: async (dealData: any) => {\n      await apiRequest(\"POST\", \"/api/deals\", dealData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Deal eingereicht\",\n        description: \"Ihr Deal wurde erfolgreich zur Bewertung eingereicht.\",\n      });\n      \n      // Reset form\n      setFormData({\n        productName: '',\n        asin: '',\n        buyPrice: '',\n        sellPrice: '',\n        category: '',\n        notes: '',\n      });\n      setProfitMargin('');\n      \n      // Invalidate queries\n      queryClient.invalidateQueries({ queryKey: ['/api/deals'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/activities'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Sie sind nicht angemeldet. Weiterleitung zur Anmeldung...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Fehler\",\n        description: \"Deal konnte nicht eingereicht werden.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.productName || !formData.asin || !formData.buyPrice || !formData.sellPrice) {\n      toast({\n        title: \"Unvollständige Daten\",\n        description: \"Bitte füllen Sie alle Pflichtfelder aus.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitDeal.mutate({\n      ...formData,\n      buyPrice: parseFloat(formData.buyPrice),\n      sellPrice: parseFloat(formData.sellPrice),\n    });\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar />\n      \n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border\">\n          <div className=\"flex items-center justify-between h-16 px-6\">\n            <h1 className=\"text-xl font-semibold text-foreground\">Deal Erfassung</h1>\n            <Button \n              variant=\"outline\"\n              onClick={() => window.location.href = '/'}\n              data-testid=\"button-back-dashboard\"\n            >\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Zurück zum Dashboard\n            </Button>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-auto bg-background p-6\">\n          <Card className=\"max-w-2xl mx-auto\">\n            <CardHeader>\n              <CardTitle>Neuen Deal erfassen</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"productName\">Produktname *</Label>\n                    <Input\n                      id=\"productName\"\n                      placeholder=\"z.B. Apple iPhone 15 Pro\"\n                      value={formData.productName}\n                      onChange={(e) => handleInputChange('productName', e.target.value)}\n                      data-testid=\"input-product-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"asin\">ASIN *</Label>\n                    <Input\n                      id=\"asin\"\n                      placeholder=\"B0XXXXXXXXX\"\n                      value={formData.asin}\n                      onChange={(e) => handleInputChange('asin', e.target.value)}\n                      data-testid=\"input-asin\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div>\n                    <Label htmlFor=\"buyPrice\">Einkaufspreis (€) *</Label>\n                    <Input\n                      id=\"buyPrice\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"0.00\"\n                      value={formData.buyPrice}\n                      onChange={(e) => handleInputChange('buyPrice', e.target.value)}\n                      data-testid=\"input-buy-price\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"sellPrice\">Verkaufspreis (€) *</Label>\n                    <Input\n                      id=\"sellPrice\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      placeholder=\"0.00\"\n                      value={formData.sellPrice}\n                      onChange={(e) => handleInputChange('sellPrice', e.target.value)}\n                      data-testid=\"input-sell-price\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"profitMargin\">Profit Margin (%)</Label>\n                    <Input\n                      id=\"profitMargin\"\n                      type=\"number\"\n                      step=\"0.1\"\n                      placeholder=\"0.0\"\n                      value={profitMargin}\n                      readOnly\n                      className=\"bg-muted\"\n                      data-testid=\"text-profit-margin\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"category\">Kategorie</Label>\n                  <Select value={formData.category} onValueChange={(value) => handleInputChange('category', value)}>\n                    <SelectTrigger data-testid=\"select-category\">\n                      <SelectValue placeholder=\"Kategorie wählen...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"electronics\">Elektronik</SelectItem>\n                      <SelectItem value=\"clothing\">Bekleidung</SelectItem>\n                      <SelectItem value=\"home\">Haus & Garten</SelectItem>\n                      <SelectItem value=\"sports\">Sport & Freizeit</SelectItem>\n                      <SelectItem value=\"beauty\">Beauty & Gesundheit</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"notes\">Notizen</Label>\n                  <Textarea\n                    id=\"notes\"\n                    rows={3}\n                    placeholder=\"Zusätzliche Informationen zum Deal...\"\n                    value={formData.notes}\n                    onChange={(e) => handleInputChange('notes', e.target.value)}\n                    data-testid=\"textarea-notes\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-end space-x-4 pt-4 border-t border-border\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={() => window.location.href = '/'}\n                    data-testid=\"button-cancel\"\n                  >\n                    Abbrechen\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={submitDeal.isPending}\n                    data-testid=\"button-submit-deal\"\n                  >\n                    {submitDeal.isPending ? 'Wird eingereicht...' : 'Deal einreichen'}\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9541},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-16\">\n          <div className=\"flex items-center justify-center space-x-3 mb-6\">\n            <div className=\"flex items-center justify-center w-16 h-16 bg-primary rounded-xl\">\n              <i className=\"fas fa-box text-primary-foreground text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl font-bold text-foreground\">ResellerPro</h1>\n          </div>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Die umfassende Amazon-Reselling-Management-Plattform für effiziente Deal-Bewertung, \n            Einkaufsplanung und SKU-Management.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-handshake text-blue-600 text-xl\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Deal-Management</h3>\n              <p className=\"text-muted-foreground\">\n                Effiziente Erfassung und Bewertung von Produktdeals durch VAs und Admins.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-shopping-cart text-green-600 text-xl\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Einkaufsplanung</h3>\n              <p className=\"text-muted-foreground\">\n                Automatisierte Budgetplanung und Volumenberechnung für genehmigte Deals.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-barcode text-purple-600 text-xl\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">SKU-Generation</h3>\n              <p className=\"text-muted-foreground\">\n                Automatische SKU-Erstellung mit direkter Amazon- und PrepMyBusiness-Integration.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"text-center\">\n          <Button \n            size=\"lg\" \n            className=\"px-8 py-4 text-lg\"\n            onClick={() => window.location.href = '/api/login'}\n            data-testid=\"button-login\"\n          >\n            <i className=\"fas fa-sign-in-alt mr-2\"></i>\n            Jetzt anmelden\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3091},"client/src/pages/listing-builder.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Package, Plus, Upload, RefreshCw, CheckCircle, AlertCircle, Clock, Download } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function ListingBuilder() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedSourcing, setSelectedSourcing] = useState<string>(\"\");\n  const [selectedPurchasing, setSelectedPurchasing] = useState<string>(\"\");\n  const [generatedSKU, setGeneratedSKU] = useState<string>(\"\");\n\n  const userRole = (user as any)?.role || 'va';\n  const isAdmin = userRole === 'admin';\n\n  // Fetch winner sourcing items\n  const { data: winnerSourcing = [] } = useQuery({\n    queryKey: ['/api/sourcing', 'winner'],\n    queryFn: () => apiRequest('/api/sourcing?status=winner'),\n    enabled: isAdmin,\n  });\n\n  // Fetch purchasing plans for sourcing\n  const { data: purchasingPlans = [] } = useQuery({\n    queryKey: ['/api/purchasing'],\n    queryFn: () => apiRequest('/api/purchasing'),\n    enabled: isAdmin && selectedSourcing !== \"\",\n  });\n\n  // Fetch existing listings\n  const { data: listings = [], isLoading } = useQuery({\n    queryKey: ['/api/listings'],\n    queryFn: () => apiRequest('/api/listings'),\n  });\n\n  // Create listing mutation\n  const createListingMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('/api/listings', 'POST', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/listings'] });\n      setIsCreateDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Listing created successfully with auto-generated SKU\",\n      });\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Sync listings mutations\n  const syncAmazonMutation = useMutation({\n    mutationFn: () => apiRequest('/api/integrations/amazon/sync', 'POST'),\n    onSuccess: (result: any) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/listings'] });\n      toast({\n        title: \"Amazon Sync Complete\",\n        description: `Synced ${result.syncedListings} listings to Amazon`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Sync Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const syncPrepMyBusinessMutation = useMutation({\n    mutationFn: () => apiRequest('/api/integrations/prepmybusiness/sync', 'POST'),\n    onSuccess: (result: any) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/listings'] });\n      toast({\n        title: \"PrepMyBusiness Sync Complete\",\n        description: `Synced ${result.syncedJobs} jobs to PrepMyBusiness`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Sync Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update listing sync status\n  const updateSyncStatusMutation = useMutation({\n    mutationFn: ({ id, amazonStatus, prepMyBusinessStatus }: { id: string; amazonStatus?: string; prepMyBusinessStatus?: string }) =>\n      apiRequest(`/api/listings/${id}/sync`, 'PATCH', { amazonStatus, prepMyBusinessStatus }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/listings'] });\n      toast({\n        title: \"Success\",\n        description: \"Sync status updated\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setSelectedSourcing(\"\");\n    setSelectedPurchasing(\"\");\n    setGeneratedSKU(\"\");\n  };\n\n  const generatePreviewSKU = () => {\n    const sourcingItem = winnerSourcing.find((item: any) => item.id === selectedSourcing);\n    if (!sourcingItem) return;\n\n    const brand = (sourcingItem.brand || 'UNKNOWN').replace(/[^A-Za-z0-9]/g, '').toUpperCase();\n    const buyPrice = parseFloat(sourcingItem.costPrice);\n    const asin = sourcingItem.asin;\n    \n    const date = new Date();\n    const dateStr = date.toISOString().slice(2, 10).replace(/-/g, '').slice(0, 6);\n    \n    // Calculate max brand length to stay under 40 chars\n    const baseLength = buyPrice.toFixed(2).length + 1 + dateStr.length + 1 + asin.length + 2;\n    const maxBrandLength = 40 - baseLength;\n    \n    const truncatedBrand = brand.length > maxBrandLength ? brand.substring(0, maxBrandLength) : brand;\n    \n    const sku = `${truncatedBrand}_${buyPrice.toFixed(2)}_${dateStr}_${asin}`;\n    setGeneratedSKU(sku);\n  };\n\n  const onCreateListing = () => {\n    if (!selectedSourcing) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a sourcing item\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createListingMutation.mutate({\n      sourcingId: selectedSourcing,\n      purchasingId: selectedPurchasing || null,\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      draft: { label: \"Draft\", variant: \"secondary\" as const, icon: Clock },\n      pending: { label: \"Pending\", variant: \"default\" as const, icon: RefreshCw },\n      live: { label: \"Live\", variant: \"default\" as const, icon: CheckCircle, className: \"bg-green-600 text-white\" },\n      error: { label: \"Error\", variant: \"destructive\" as const, icon: AlertCircle },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig];\n    if (!config) return null;\n\n    const Icon = config.icon;\n    return (\n      <Badge variant={config.variant} className={config.className || \"\"}>\n        <Icon className=\"h-3 w-3 mr-1\" />\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const exportToCSV = (listings: any[]) => {\n    const headers = ['SKU', 'Brand', 'ASIN', 'Buy Price', 'Amazon Status', 'PrepMyBusiness Status', 'Created Date'];\n    const csvContent = [\n      headers.join(','),\n      ...listings.map(listing => [\n        listing.skuCode,\n        listing.brand,\n        listing.asin,\n        listing.buyPrice,\n        listing.amazonSyncStatus,\n        listing.prepMyBusinessSyncStatus,\n        new Date(listing.createdAt).toLocaleDateString()\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = `listings_${new Date().toISOString().slice(0, 10)}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n\n    toast({\n      title: \"Export Complete\",\n      description: `Exported ${listings.length} listings to CSV`,\n    });\n  };\n\n  if (!isAdmin) {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardContent className=\"pt-6 text-center\">\n            <p className=\"text-muted-foreground\">\n              Access restricted to administrators only.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-3xl font-bold\">Listing Builder</h1>\n        </div>\n        <div className=\"grid gap-4\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"pt-6\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-4\"></div>\n                <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const filteredPurchasingPlans = purchasingPlans.filter((plan: any) => plan.sourcingId === selectedSourcing);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Listing Builder</h1>\n          <p className=\"text-muted-foreground\">\n            Generate SKUs and manage Amazon/PrepMyBusiness listings\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => exportToCSV(listings)}\n            disabled={listings.length === 0}\n            data-testid=\"button-export-csv\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export CSV\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={() => syncAmazonMutation.mutate()}\n            disabled={syncAmazonMutation.isPending}\n            data-testid=\"button-sync-amazon\"\n          >\n            {syncAmazonMutation.isPending ? (\n              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <Upload className=\"h-4 w-4 mr-2\" />\n            )}\n            Sync Amazon\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={() => syncPrepMyBusinessMutation.mutate()}\n            disabled={syncPrepMyBusinessMutation.isPending}\n            data-testid=\"button-sync-prep\"\n          >\n            {syncPrepMyBusinessMutation.isPending ? (\n              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <Upload className=\"h-4 w-4 mr-2\" />\n            )}\n            Sync PrepMyBusiness\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-create-listing\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Listing\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Listing</DialogTitle>\n                <DialogDescription>\n                  Generate a new listing with auto-generated SKU from winner deals\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Select Winner Deal *</Label>\n                  <Select value={selectedSourcing} onValueChange={(value) => {\n                    setSelectedSourcing(value);\n                    setGeneratedSKU(\"\");\n                  }}>\n                    <SelectTrigger data-testid=\"select-sourcing-deal\">\n                      <SelectValue placeholder=\"Choose a winner deal\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {winnerSourcing.map((item: any) => (\n                        <SelectItem key={item.id} value={item.id}>\n                          {item.productName} - {item.brand} - ASIN: {item.asin}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {selectedSourcing && (\n                  <div>\n                    <Label>Associated Purchasing Plan (Optional)</Label>\n                    <Select value={selectedPurchasing} onValueChange={setSelectedPurchasing}>\n                      <SelectTrigger data-testid=\"select-purchasing-plan\">\n                        <SelectValue placeholder=\"Choose purchasing plan (optional)\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"\">No purchasing plan</SelectItem>\n                        {filteredPurchasingPlans.map((plan: any) => (\n                          <SelectItem key={plan.id} value={plan.id}>\n                            Qty: {plan.plannedQuantity} - Budget: €{parseFloat(plan.plannedBudget).toFixed(2)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n\n                {selectedSourcing && (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <Label>Generated SKU Preview</Label>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={generatePreviewSKU}\n                        data-testid=\"button-preview-sku\"\n                      >\n                        Preview SKU\n                      </Button>\n                    </div>\n                    {generatedSKU && (\n                      <div className=\"p-3 bg-muted rounded-md\">\n                        <code className=\"text-sm font-mono\">{generatedSKU}</code>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          Format: BRAND_BuyPrice_Date_ASIN (max 40 characters)\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setIsCreateDialogOpen(false)}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={onCreateListing}\n                    disabled={createListingMutation.isPending || !selectedSourcing}\n                    data-testid=\"button-submit-listing\"\n                  >\n                    {createListingMutation.isPending ? \"Creating...\" : \"Create Listing\"}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <Package className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Listings</p>\n                <p className=\"text-2xl font-bold\">{listings.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Live Listings</p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  {listings.filter((l: any) => l.amazonSyncStatus === 'live').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <RefreshCw className=\"h-5 w-5 text-orange-600\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Pending Sync</p>\n                <p className=\"text-2xl font-bold text-orange-600\">\n                  {listings.filter((l: any) => l.amazonSyncStatus === 'pending').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"h-5 w-5 text-red-600\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Sync Errors</p>\n                <p className=\"text-2xl font-bold text-red-600\">\n                  {listings.filter((l: any) => l.amazonSyncStatus === 'error' || l.prepMyBusinessSyncStatus === 'error').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Listings */}\n      <div className=\"grid gap-4\">\n        {listings.length === 0 ? (\n          <Card>\n            <CardContent className=\"pt-6 text-center\">\n              <p className=\"text-muted-foreground\">No listings found.</p>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Create your first listing from a winner deal to start building your Amazon catalog.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          listings.map((listing: any) => (\n            <Card key={listing.id} data-testid={`card-listing-${listing.id}`}>\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"space-y-1\">\n                    <CardTitle className=\"text-lg font-mono\">{listing.skuCode}</CardTitle>\n                    <CardDescription className=\"flex items-center gap-2\">\n                      <span>Brand: {listing.brand}</span>\n                      <span>• ASIN: {listing.asin}</span>\n                      <span>• Buy Price: €{parseFloat(listing.buyPrice).toFixed(2)}</span>\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex flex-col gap-1 items-end\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-xs text-muted-foreground\">Amazon:</span>\n                      {getStatusBadge(listing.amazonSyncStatus)}\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-xs text-muted-foreground\">PrepMyBusiness:</span>\n                      {getStatusBadge(listing.prepMyBusinessSyncStatus)}\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                  <div>\n                    <Label className=\"text-muted-foreground\">Generated Date</Label>\n                    <p className=\"font-medium\">{listing.generatedDate}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-muted-foreground\">CSV Exported</Label>\n                    <p className=\"font-medium\">{listing.csvExported ? 'Yes' : 'No'}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-muted-foreground\">Last Sync</Label>\n                    <p className=\"font-medium\">\n                      {listing.lastSyncAt ? new Date(listing.lastSyncAt).toLocaleDateString() : 'Never'}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-muted-foreground\">Created</Label>\n                    <p className=\"font-medium\">{new Date(listing.createdAt).toLocaleDateString()}</p>\n                  </div>\n                </div>\n\n                {(listing.amazonSyncStatus === 'draft' || listing.prepMyBusinessSyncStatus === 'draft') && (\n                  <div className=\"flex gap-2\">\n                    {listing.amazonSyncStatus === 'draft' && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => updateSyncStatusMutation.mutate({ \n                          id: listing.id, \n                          amazonStatus: 'pending' \n                        })}\n                        data-testid={`button-sync-amazon-${listing.id}`}\n                      >\n                        Sync to Amazon\n                      </Button>\n                    )}\n                    {listing.prepMyBusinessSyncStatus === 'draft' && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => updateSyncStatusMutation.mutate({ \n                          id: listing.id, \n                          prepMyBusinessStatus: 'pending' \n                        })}\n                        data-testid={`button-sync-prep-${listing.id}`}\n                      >\n                        Sync to PrepMyBusiness\n                      </Button>\n                    )}\n                  </div>\n                )}\n\n                {listing.syncErrors && (\n                  <div className=\"text-sm text-red-600 bg-red-50 p-2 rounded\">\n                    <strong>Sync Errors:</strong> {listing.syncErrors}\n                  </div>\n                )}\n\n                {listing.sourcing && (\n                  <div className=\"text-xs text-muted-foreground\">\n                    Source: {listing.sourcing.productName} • \n                    Submitted by {listing.sourcing.submitter?.firstName} {listing.sourcing.submitter?.lastName}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":21596},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/purchasing-planner.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertPurchasingPlanSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ShoppingCart, Plus, AlertTriangle, TrendingUp, Calculator, DollarSign } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nconst purchasingFormSchema = insertPurchasingPlanSchema.extend({\n  plannedQuantity: z.string().min(1, \"Quantity is required\"),\n  costPerUnit: z.string().min(1, \"Cost per unit is required\"),\n  plannedBudget: z.string().min(1, \"Budget is required\"),\n  weeklyBudgetAllocated: z.string().optional(),\n});\n\ntype PurchasingFormData = z.infer<typeof purchasingFormSchema>;\n\nexport default function PurchasingPlanner() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [selectedSourcing, setSelectedSourcing] = useState<string>(\"\");\n  const [liveCalculations, setLiveCalculations] = useState({\n    quantity: 0,\n    costPerUnit: 0,\n    totalBudget: 0,\n    expectedRevenue: 0,\n    expectedProfit: 0,\n    profitMargin: 0,\n    roi: 0,\n  });\n\n  const userRole = user?.role || 'va';\n  const isAdmin = userRole === 'admin';\n\n  // Fetch winner sourcing items for planning\n  const { data: winnerSourcing = [] } = useQuery({\n    queryKey: ['/api/sourcing', 'winner'],\n    queryFn: () => apiRequest('/api/sourcing?status=winner'),\n    enabled: isAdmin,\n  });\n\n  // Fetch purchasing plans\n  const { data: purchasingPlans = [], isLoading } = useQuery({\n    queryKey: ['/api/purchasing'],\n    queryFn: () => apiRequest('/api/purchasing'),\n  });\n\n  // Add purchasing plan mutation\n  const addPlanMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('/api/purchasing', { method: 'POST', body: data }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/purchasing'] });\n      setIsAddDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Purchasing plan created successfully\",\n      });\n      form.reset();\n      setSelectedSourcing(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update plan mutation\n  const updatePlanMutation = useMutation({\n    mutationFn: ({ id, updates }: { id: string; updates: any }) =>\n      apiRequest(`/api/purchasing/${id}`, { method: 'PATCH', body: updates }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/purchasing'] });\n      toast({\n        title: \"Success\",\n        description: \"Plan updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<PurchasingFormData>({\n    resolver: zodResolver(purchasingFormSchema),\n    defaultValues: {\n      sourcingId: \"\",\n      plannedQuantity: \"\",\n      costPerUnit: \"\",\n      plannedBudget: \"\",\n      weeklyBudgetAllocated: \"\",\n    },\n  });\n\n  // Live calculations based on form values\n  useEffect(() => {\n    const quantity = parseInt(form.watch(\"plannedQuantity\")) || 0;\n    const costPerUnit = parseFloat(form.watch(\"costPerUnit\")) || 0;\n    const totalBudget = quantity * costPerUnit;\n\n    // Get sale price from selected sourcing item\n    const sourcingItem = winnerSourcing.find((item: any) => item.id === selectedSourcing);\n    const salePrice = sourcingItem ? parseFloat(sourcingItem.salePrice) : 0;\n\n    const expectedRevenue = quantity * salePrice;\n    const expectedProfit = expectedRevenue - totalBudget;\n    const profitMargin = expectedRevenue > 0 ? (expectedProfit / expectedRevenue) * 100 : 0;\n    const roi = totalBudget > 0 ? (expectedProfit / totalBudget) * 100 : 0;\n\n    setLiveCalculations({\n      quantity,\n      costPerUnit,\n      totalBudget,\n      expectedRevenue,\n      expectedProfit,\n      profitMargin,\n      roi,\n    });\n\n    // Update planned budget in form\n    form.setValue(\"plannedBudget\", totalBudget.toString());\n  }, [form.watch(\"plannedQuantity\"), form.watch(\"costPerUnit\"), selectedSourcing, winnerSourcing, form]);\n\n  const onSubmit = (data: PurchasingFormData) => {\n    if (!selectedSourcing) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a sourcing item\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addPlanMutation.mutate({\n      sourcingId: selectedSourcing,\n      plannedQuantity: parseInt(data.plannedQuantity),\n      costPerUnit: parseFloat(data.costPerUnit),\n      plannedBudget: parseFloat(data.plannedBudget),\n      weeklyBudgetAllocated: data.weeklyBudgetAllocated ? parseFloat(data.weeklyBudgetAllocated) : null,\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      planned: { label: \"Planned\", variant: \"secondary\" as const },\n      ordered: { label: \"Ordered\", variant: \"default\" as const },\n      received: { label: \"Received\", variant: \"success\" as const },\n      cancelled: { label: \"Cancelled\", variant: \"destructive\" as const },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig];\n    if (!config) return null;\n\n    return <Badge variant={config.variant}>{config.label}</Badge>;\n  };\n\n  const calculateActualPerformance = (plan: any) => {\n    const actualProfit = parseFloat(plan.actualProfit || 0);\n    const expectedProfit = parseFloat(plan.expectedProfit || 0);\n    const variance = expectedProfit > 0 ? ((actualProfit - expectedProfit) / expectedProfit) * 100 : 0;\n    \n    return {\n      actualProfit,\n      expectedProfit,\n      variance,\n      isAboveTarget: variance >= 0,\n    };\n  };\n\n  if (!isAdmin) {\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardContent className=\"pt-6 text-center\">\n            <p className=\"text-muted-foreground\">\n              Access restricted to administrators only.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-3xl font-bold\">Purchasing Planner</h1>\n        </div>\n        <div className=\"grid gap-4\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"pt-6\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-4\"></div>\n                <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const totalBudgetAllocated = purchasingPlans.reduce((sum: number, plan: any) => \n    sum + parseFloat(plan.plannedBudget || 0), 0\n  );\n\n  const totalExpectedRevenue = purchasingPlans.reduce((sum: number, plan: any) => \n    sum + parseFloat(plan.expectedRevenue || 0), 0\n  );\n\n  const totalExpectedProfit = purchasingPlans.reduce((sum: number, plan: any) => \n    sum + parseFloat(plan.expectedProfit || 0), 0\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Purchasing Planner</h1>\n          <p className=\"text-muted-foreground\">\n            Plan purchases for winner deals with live profit calculations\n          </p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-plan\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Plan\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-3xl\">\n            <DialogHeader>\n              <DialogTitle>Create Purchasing Plan</DialogTitle>\n              <DialogDescription>\n                Plan your purchase for a winner deal with live profit calculations\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"col-span-2\">\n                    <Label>Select Winner Deal</Label>\n                    <Select value={selectedSourcing} onValueChange={setSelectedSourcing}>\n                      <SelectTrigger data-testid=\"select-sourcing-item\">\n                        <SelectValue placeholder=\"Choose a winner deal\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {winnerSourcing.map((item: any) => (\n                          <SelectItem key={item.id} value={item.id}>\n                            {item.productName} - ASIN: {item.asin} (€{parseFloat(item.salePrice).toFixed(2)})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"plannedQuantity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Planned Quantity *</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" {...field} data-testid=\"input-quantity\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"costPerUnit\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Cost per Unit (€) *</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" {...field} data-testid=\"input-cost-per-unit\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"weeklyBudgetAllocated\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Weekly Budget Allocation (€)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" {...field} data-testid=\"input-weekly-budget\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Live Calculations Display */}\n                {selectedSourcing && liveCalculations.quantity > 0 && (\n                  <Card className=\"border-2 border-blue-200 bg-blue-50/50\">\n                    <CardHeader>\n                      <CardTitle className=\"text-lg flex items-center gap-2\">\n                        <Calculator className=\"h-5 w-5\" />\n                        Live Calculations\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                        <div>\n                          <Label className=\"text-muted-foreground\">Total Budget</Label>\n                          <p className=\"text-xl font-bold\">€{liveCalculations.totalBudget.toFixed(2)}</p>\n                        </div>\n                        <div>\n                          <Label className=\"text-muted-foreground\">Expected Revenue</Label>\n                          <p className=\"text-xl font-bold text-green-600\">€{liveCalculations.expectedRevenue.toFixed(2)}</p>\n                        </div>\n                        <div>\n                          <Label className=\"text-muted-foreground\">Expected Profit</Label>\n                          <p className={`text-xl font-bold ${liveCalculations.expectedProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                            €{liveCalculations.expectedProfit.toFixed(2)}\n                          </p>\n                        </div>\n                        <div>\n                          <Label className=\"text-muted-foreground\">Profit Margin</Label>\n                          <p className={`text-xl font-bold ${liveCalculations.profitMargin >= 15 ? 'text-green-600' : 'text-yellow-600'}`}>\n                            {liveCalculations.profitMargin.toFixed(1)}%\n                          </p>\n                        </div>\n                        <div>\n                          <Label className=\"text-muted-foreground\">ROI</Label>\n                          <p className={`text-xl font-bold ${liveCalculations.roi >= 25 ? 'text-green-600' : 'text-yellow-600'}`}>\n                            {liveCalculations.roi.toFixed(1)}%\n                          </p>\n                        </div>\n                        <div className=\"col-span-1 md:col-span-3\">\n                          {liveCalculations.profitMargin < 15 && (\n                            <div className=\"flex items-center gap-2 text-yellow-600\">\n                              <AlertTriangle className=\"h-4 w-4\" />\n                              <span className=\"text-sm\">Warning: Profit margin below 15%</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsAddDialogOpen(false)}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={addPlanMutation.isPending || !selectedSourcing}\n                    data-testid=\"button-submit-plan\"\n                  >\n                    {addPlanMutation.isPending ? \"Creating...\" : \"Create Plan\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Budget</p>\n                <p className=\"text-2xl font-bold\">€{totalBudgetAllocated.toFixed(2)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Expected Revenue</p>\n                <p className=\"text-2xl font-bold text-green-600\">€{totalExpectedRevenue.toFixed(2)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <Calculator className=\"h-5 w-5 text-purple-600\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Expected Profit</p>\n                <p className=\"text-2xl font-bold text-purple-600\">€{totalExpectedProfit.toFixed(2)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <ShoppingCart className=\"h-5 w-5 text-orange-600\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Active Plans</p>\n                <p className=\"text-2xl font-bold\">{purchasingPlans.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Purchasing Plans */}\n      <div className=\"grid gap-4\">\n        {purchasingPlans.length === 0 ? (\n          <Card>\n            <CardContent className=\"pt-6 text-center\">\n              <p className=\"text-muted-foreground\">No purchasing plans found.</p>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Create your first plan from a winner deal to start purchasing planning.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          purchasingPlans.map((plan: any) => {\n            const performance = calculateActualPerformance(plan);\n\n            return (\n              <Card key={plan.id} data-testid={`card-plan-${plan.id}`}>\n                <CardHeader>\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"space-y-1\">\n                      <CardTitle className=\"text-lg\">\n                        {plan.sourcing?.productName || 'Unknown Product'}\n                      </CardTitle>\n                      <CardDescription className=\"flex items-center gap-2\">\n                        <span>ASIN: {plan.sourcing?.asin}</span>\n                        <span>• Quantity: {plan.plannedQuantity}</span>\n                        {plan.marginWarning && (\n                          <Badge variant=\"destructive\" className=\"text-xs\">\n                            <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                            Low Margin\n                          </Badge>\n                        )}\n                      </CardDescription>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      {getStatusBadge(plan.status)}\n                      {plan.status === 'planned' && (\n                        <div className=\"flex gap-1\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => updatePlanMutation.mutate({ \n                              id: plan.id, \n                              updates: { status: 'ordered', orderDate: new Date() }\n                            })}\n                            data-testid={`button-order-${plan.id}`}\n                          >\n                            Mark Ordered\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                    <div>\n                      <Label className=\"text-muted-foreground\">Planned Budget</Label>\n                      <p className=\"font-medium\">€{parseFloat(plan.plannedBudget).toFixed(2)}</p>\n                    </div>\n                    <div>\n                      <Label className=\"text-muted-foreground\">Expected Revenue</Label>\n                      <p className=\"font-medium text-green-600\">€{parseFloat(plan.expectedRevenue || 0).toFixed(2)}</p>\n                    </div>\n                    <div>\n                      <Label className=\"text-muted-foreground\">Expected Profit</Label>\n                      <p className=\"font-medium text-purple-600\">€{parseFloat(plan.expectedProfit || 0).toFixed(2)}</p>\n                    </div>\n                    <div>\n                      <Label className=\"text-muted-foreground\">Cost per Unit</Label>\n                      <p className=\"font-medium\">€{parseFloat(plan.costPerUnit).toFixed(2)}</p>\n                    </div>\n                  </div>\n\n                  {plan.status !== 'planned' && (\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm border-t pt-4\">\n                      <div>\n                        <Label className=\"text-muted-foreground\">Actual Spent</Label>\n                        <p className=\"font-medium\">€{parseFloat(plan.actualSpent || 0).toFixed(2)}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-muted-foreground\">Actual Revenue</Label>\n                        <p className=\"font-medium\">€{parseFloat(plan.actualRevenue || 0).toFixed(2)}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-muted-foreground\">Actual Profit</Label>\n                        <p className={`font-medium ${performance.actualProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          €{performance.actualProfit.toFixed(2)}\n                        </p>\n                      </div>\n                      <div>\n                        <Label className=\"text-muted-foreground\">Variance</Label>\n                        <p className={`font-medium ${performance.isAboveTarget ? 'text-green-600' : 'text-red-600'}`}>\n                          {performance.variance > 0 ? '+' : ''}{performance.variance.toFixed(1)}%\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {plan.weeklyBudgetAllocated && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      Weekly Budget: €{parseFloat(plan.weeklyBudgetAllocated).toFixed(2)} • \n                      Created: {new Date(plan.createdAt).toLocaleDateString()}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":22728},"client/src/pages/purchasing.tsx":{"content":"import Sidebar from \"@/components/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function Purchasing() {\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar />\n      \n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border\">\n          <div className=\"flex items-center justify-between h-16 px-6\">\n            <h1 className=\"text-xl font-semibold text-foreground\">Einkaufsplanung</h1>\n            <Button \n              variant=\"outline\"\n              onClick={() => window.location.href = '/'}\n              data-testid=\"button-back-dashboard\"\n            >\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Zurück zum Dashboard\n            </Button>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-auto bg-background p-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Einkaufsplanung</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-8 text-center\">\n              <i className=\"fas fa-shopping-cart text-4xl text-muted-foreground mb-4\"></i>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Einkaufsplanung in Entwicklung</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Die Einkaufsplanungsfunktion wird in einer zukünftigen Version verfügbar sein.\n                Hier können Sie Volumen, Budget und Profitabilität für Winner-Produkte planen.\n              </p>\n              <Button onClick={() => window.location.href = '/'}>\n                Zurück zum Dashboard\n              </Button>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1891},"client/src/pages/sku-management.tsx":{"content":"import Sidebar from \"@/components/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function SkuManagement() {\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar />\n      \n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border\">\n          <div className=\"flex items-center justify-between h-16 px-6\">\n            <h1 className=\"text-xl font-semibold text-foreground\">SKU Management</h1>\n            <Button \n              variant=\"outline\"\n              onClick={() => window.location.href = '/'}\n              data-testid=\"button-back-dashboard\"\n            >\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Zurück zum Dashboard\n            </Button>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-auto bg-background p-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>SKU Management</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-8 text-center\">\n              <i className=\"fas fa-barcode text-4xl text-muted-foreground mb-4\"></i>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">SKU Management in Entwicklung</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Das SKU Management System wird in einer zukünftigen Version verfügbar sein.\n                Hier können Sie SKUs generieren und die Synchronisation mit Amazon und PrepMyBusiness verwalten.\n              </p>\n              <Button onClick={() => window.location.href = '/'}>\n                Zurück zum Dashboard\n              </Button>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1898},"client/src/pages/sourcing-inbox.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  ExternalLink,\n  Edit3,\n  Upload,\n  Trash2,\n  Copy,\n  CheckCircle2,\n  Archive,\n  ChevronDown,\n  SquarePen,\n  Target,\n  Eye,\n  User,\n  Search,\n  Bell,\n  Package,\n  X,\n  FileText,\n  Download,\n  Image as ImageIcon,\n  Paperclip,\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Sidebar from \"@/components/sidebar\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { GoogleSheetsSourcingItem, SourcingItem } from \"@shared/schema\";\n\ninterface SheetsData {\n  items?: GoogleSheetsSourcingItem[];\n  headers?: string[];\n  success?: boolean;\n}\n\ninterface FileUploadSectionProps {\n  rowIndex: number;\n  asin: string;\n  uploadFile: any;\n  deleteFile: any;\n}\n\nexport function FileUploadSection({ rowIndex, asin, uploadFile, deleteFile }: FileUploadSectionProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const fileInputRef = React.useRef<HTMLInputElement>(null);\n\n  // Fetch files for this row\n  const { data: filesData } = useQuery({\n    queryKey: ['/api/sourcing/files', rowIndex],\n    queryFn: async () => {\n      const response = await fetch(`/api/sourcing/files/${rowIndex}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch files');\n      }\n      return response.json();\n    },\n    enabled: !!rowIndex && rowIndex >= 0,\n    staleTime: 5 * 60 * 1000, // 5 minutes - prevent unnecessary refetches\n    gcTime: 10 * 60 * 1000, // 10 minutes - keep in cache longer\n    refetchOnWindowFocus: false, // Don't refetch when window regains focus\n  });\n\n  const files = filesData?.files || [];\n  const handleFileSelect = (selectedFiles: FileList | null) => {\n    if (!selectedFiles || selectedFiles.length === 0) return;\n    \n    const file = selectedFiles[0];\n    if (file) {\n      uploadFile.mutate({ rowIndex, asin, file });\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    const droppedFiles = e.dataTransfer.files;\n    handleFileSelect(droppedFiles);\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.startsWith('image/')) return <ImageIcon className=\"w-4 h-4\" />;\n    if (mimeType.includes('pdf')) return <FileText className=\"w-4 h-4\" />;\n    return <Paperclip className=\"w-4 h-4\" />;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const isImage = (mimeType: string) => mimeType.startsWith('image/');\n\n  return (\n    <div className=\"text-gray-600 bg-gray-50 rounded-lg p-2 min-h-[80px] text-xs\">\n      <h5 className=\"text-sm font-medium text-gray-700 mb-3\">Files</h5>\n      \n      {files.length === 0 ? (\n        // Upload area when no files exist\n        <div\n          className={`border-2 border-dashed rounded-lg p-4 text-center cursor-pointer transition-colors ${\n            isDragOver \n              ? 'border-blue-400 bg-blue-50' \n              : 'border-gray-300 hover:border-blue-400'\n          }`}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onDrop={handleDrop}\n          onClick={() => fileInputRef.current?.click()}\n        >\n          <div className=\"text-blue-500 mb-2\">\n            <Upload className=\"w-6 h-4 mx-auto\" />\n          </div>\n          <div className=\"text-xs text-gray-500\">\n            <span className=\"text-xs text-blue-600 mb-1\">Click to upload</span>\n            <br />\n            or drag and drop\n            <br />\n            PDF, DOC, XLS, images up to 10MB\n          </div>\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            className=\"hidden\"\n            accept=\".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png,.gif\"\n            onChange={(e) => handleFileSelect(e.target.files)}\n          />\n        </div>\n      ) : (\n        // File list when files exist\n        <div className=\"space-y-2\">\n          {files.map((file: any) => (\n            <div key={file.id} className=\"flex items-center justify-between p-2 bg-white rounded border\">\n              <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                {getFileIcon(file.mimeType)}\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"text-sm font-medium text-gray-900 truncate\">\n                    {file.originalName}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    {formatFileSize(file.fileSize)}\n                  </div>\n                </div>\n                {isImage(file.mimeType) && (\n                  <img\n                    src={`/api/sourcing/files/download/${file.id}`}\n                    alt={file.originalName}\n                    className=\"w-8 h-8 rounded object-cover\"\n                  />\n                )}\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"h-6 w-6 p-0\"\n                  onClick={() => window.open(`/api/sourcing/files/download/${file.id}`, '_blank')}\n                  data-testid={`download-file-${file.id}`}\n                >\n                  <Download className=\"w-3 h-3\" />\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"h-6 w-6 p-0 text-red-500 hover:text-red-700\"\n                  onClick={() => deleteFile.mutate(file.id)}\n                  data-testid={`delete-file-${file.id}`}\n                >\n                  <Trash2 className=\"w-3 h-3\" />\n                </Button>\n              </div>\n            </div>\n          ))}\n          \n          {/* Add more files button */}\n          <button\n            className=\"w-full p-2 border-2 border-dashed border-gray-300 rounded text-xs text-gray-500 hover:border-blue-400 hover:text-blue-600 transition-colors\"\n            onClick={() => fileInputRef.current?.click()}\n            data-testid={`add-more-files-${rowIndex}`}\n          >\n            + Add more files\n          </button>\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            className=\"hidden\"\n            accept=\".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png,.gif\"\n            onChange={(e) => handleFileSelect(e.target.files)}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function SourcingInbox() {\n  const { user, isLoading: isAuthLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [notesModalOpen, setNotesModalOpen] = useState(false);\n  const [editingNotes, setEditingNotes] = useState<{\n    rowIndex: number;\n    item: GoogleSheetsSourcingItem;\n    currentNotes: string;\n  } | null>(null);\n  const [notesText, setNotesText] = useState(\"\");\n\n  // Fetch sourcing items directly from Google Sheets\n  const {\n    data: sheetsData,\n    isLoading,\n    refetch,\n  } = useQuery({\n    queryKey: [\"/api/sourcing/sheets\"],\n    queryFn: () => apiRequest(\"/api/sourcing/sheets\"),\n    staleTime: 0,\n    gcTime: 0,\n    refetchOnWindowFocus: true,\n    refetchInterval: 10000,\n    refetchIntervalInBackground: true,\n  });\n\n  // Fetch archived items from database (only items where archived = true)\n  const { data: archivedData } = useQuery({\n    queryKey: [\"/api/sourcing/items\", \"archived\"],\n    queryFn: () => apiRequest(\"/api/sourcing/items?archived=true\"),\n    enabled: !!user,\n    staleTime: 0, // Force fresh data\n    gcTime: 0,\n  });\n\n  const sourcingItems: GoogleSheetsSourcingItem[] =\n    (sheetsData as any)?.items || [];\n  const archivedItems: any[] = (archivedData as any)?.items || [];\n\n  // Get list of archived ASINs for filtering (items that have been explicitly archived)\n  const archivedAsins = new Set(archivedItems.map((item: any) => item.asin));\n\n  // Filter out rows where essential fields are blank AND exclude archived items\n  // Also keep track of original row indices\n  const validItems = sourcingItems\n    .map((item: GoogleSheetsSourcingItem, originalIndex: number) => ({\n      ...item,\n      _originalRowIndex: originalIndex,\n    }))\n    .filter(\n      (item: GoogleSheetsSourcingItem & { _originalRowIndex: number }) => {\n        const productName = item[\"Product Name\"]?.trim();\n        const asin = item[\"ASIN\"]?.trim();\n        const hasValidData =\n          productName && productName !== \"\" && asin && asin !== \"\";\n        const isNotArchived = !archivedAsins.has(asin);\n        return hasValidData && isNotArchived;\n      },\n    );\n\n  // Update Product Review (Winner status)\n  const updateProductReview = useMutation({\n    mutationFn: async ({\n      rowIndex,\n      productReview,\n    }: {\n      rowIndex: number;\n      productReview: string;\n    }) => {\n      return apiRequest(\n        `/api/sourcing/sheets/${rowIndex}/product-review`,\n        \"PATCH\",\n        {\n          productReview,\n        },\n      );\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Success\",\n        description: `Product marked as ${variables.productReview}`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sourcing/sheets\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update product review\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update Sourcing Method\n  const updateSourcingMethod = useMutation({\n    mutationFn: async ({\n      rowIndex,\n      sourcingMethod,\n    }: {\n      rowIndex: number;\n      sourcingMethod: string;\n    }) => {\n      return apiRequest(\n        `/api/sourcing/sheets/${rowIndex}/sourcing-method`,\n        \"PATCH\",\n        {\n          sourcingMethod,\n        },\n      );\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Success\",\n        description: `Sourcing method updated to \"${variables.sourcingMethod}\"`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sourcing/sheets\"] });\n    },\n    onError: (error) => {\n      console.error(\"❌ Error updating sourcing method:\", error);\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update sourcing method\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update Notes\n  const updateNotes = useMutation({\n    mutationFn: async ({\n      rowIndex,\n      notes,\n    }: {\n      rowIndex: number;\n      notes: string;\n    }) => {\n      return apiRequest(`/api/sourcing/sheets/${rowIndex}/notes`, \"PATCH\", {\n        notes,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Notes updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sourcing/sheets\"] });\n      setNotesModalOpen(false);\n      setEditingNotes(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update notes\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // File upload mutations\n  const uploadFile = useMutation({\n    mutationFn: async ({ rowIndex, asin, file }: { rowIndex: number; asin: string; file: File }) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('rowIndex', rowIndex.toString());\n      formData.append('asin', asin);\n\n      const response = await fetch('/api/sourcing/files/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Success\", \n        description: \"File uploaded successfully\"\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/sourcing/files', variables.rowIndex] });\n    },\n    onError: (error: any) => {\n      console.error('Error uploading file:', error);\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to upload file\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteFile = useMutation({\n    mutationFn: async (fileId: string) => {\n      return apiRequest(`/api/sourcing/files/${fileId}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"File deleted successfully\"\n      });\n      // Need to invalidate all file queries since we don't know which row this file belongs to\n      queryClient.invalidateQueries({ queryKey: ['/api/sourcing/files'] });\n    },\n    onError: (error: any) => {\n      console.error('Error deleting file:', error);\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to delete file\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Save items to database\n  const saveItemsToDatabase = useMutation({\n    mutationFn: async (items: any[]) => {\n      return apiRequest(\"/api/sourcing/items/save\", \"POST\", items);\n    },\n    onSuccess: () => {\n      console.log(\"✅ Items saved to database successfully\");\n      toast({\n        title: \"Success\",\n        description: \"Items saved to database successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to save items to database\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Archive item with optimistic updates\n  const archiveItem = useMutation({\n    mutationFn: async (rowIndex: number) => {\n      return apiRequest(`/api/sourcing/items/${rowIndex}/archive`, \"POST\");\n    },\n    onMutate: async (rowIndex: number) => {\n      console.log(\n        \"🎯 OPTIMISTIC ARCHIVE - Starting onMutate for rowIndex:\",\n        rowIndex,\n      );\n\n      // Cancel outgoing refetches so they don't overwrite our optimistic update\n      await queryClient.cancelQueries({ queryKey: [\"/api/sourcing/sheets\"] });\n      console.log(\"🎯 OPTIMISTIC ARCHIVE - Cancelled queries\");\n\n      // Snapshot the previous value for rollback\n      const previousData = queryClient.getQueryData([\n        \"/api/sourcing/sheets\",\n      ]) as SheetsData | undefined;\n      console.log(\n        \"🎯 OPTIMISTIC ARCHIVE - Previous data:\",\n        previousData?.items?.length,\n        \"items\",\n      );\n\n      // Optimistically update to remove the item being archived\n      queryClient.setQueryData([\"/api/sourcing/sheets\"], (old: any) => {\n        console.log(\n          \"🎯 OPTIMISTIC ARCHIVE - Old data before filter:\",\n          old?.items?.length,\n          \"items\",\n        );\n        if (!old?.items) {\n          console.log(\n            \"🎯 OPTIMISTIC ARCHIVE - No items in old data, returning old\",\n          );\n          return old;\n        }\n\n        // Find the item that is being archived by _originalRowIndex\n        // The rowIndex parameter is the _originalRowIndex from the clicked item\n        const itemToRemove = old.items[rowIndex];\n        console.log(\n          \"🎯 OPTIMISTIC ARCHIVE - Item to remove at rowIndex\",\n          rowIndex,\n          \":\",\n          {\n            ASIN: itemToRemove?.ASIN,\n            ProductName:\n              itemToRemove?.[\"Product Name\"]?.substring(0, 50) + \"...\",\n          },\n        );\n\n        // Filter out the item at the specific rowIndex\n        const filteredItems = old.items.filter((item: any, index: number) => {\n          const shouldKeep = index !== rowIndex;\n          if (!shouldKeep) {\n            console.log(\n              \"🎯 OPTIMISTIC ARCHIVE - Removing item at index:\",\n              index,\n              \"ASIN:\",\n              item?.ASIN,\n            );\n          }\n          return shouldKeep;\n        });\n\n        console.log(\n          \"🎯 OPTIMISTIC ARCHIVE - Filtered to:\",\n          filteredItems.length,\n          \"items (removed 1)\",\n        );\n\n        return {\n          ...old,\n          items: filteredItems,\n        };\n      });\n\n      // Verify the update worked\n      const updatedData = queryClient.getQueryData([\"/api/sourcing/sheets\"]) as\n        | SheetsData\n        | undefined;\n      console.log(\n        \"🎯 OPTIMISTIC ARCHIVE - Updated data after setQueryData:\",\n        updatedData?.items?.length,\n        \"items\",\n      );\n\n      return { previousData };\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Item archived successfully\",\n      });\n      // Invalidate both queries to refresh the data\n      queryClient.invalidateQueries({ queryKey: [\"/api/sourcing/items\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sourcing/sheets\"] });\n    },\n    onError: (error, rowIndex, context) => {\n      // Revert the optimistic update\n      if (context?.previousData) {\n        queryClient.setQueryData(\n          [\"/api/sourcing/sheets\"],\n          context.previousData,\n        );\n      }\n\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to archive item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete item with optimistic updates\n  const deleteItem = useMutation({\n    mutationFn: async (rowIndex: number) => {\n      return apiRequest(`/api/sourcing/items/${rowIndex}`, \"DELETE\");\n    },\n    onMutate: async (rowIndex: number) => {\n      // Cancel outgoing refetches so they don't overwrite our optimistic update\n      await queryClient.cancelQueries({ queryKey: [\"/api/sourcing/sheets\"] });\n\n      // Snapshot the previous value for rollback\n      const previousData = queryClient.getQueryData([\"/api/sourcing/sheets\"]);\n\n      // Optimistically update to remove the item being deleted\n      queryClient.setQueryData([\"/api/sourcing/sheets\"], (old: any) => {\n        if (!old?.items) return old;\n\n        // Filter out the item at the specific rowIndex\n        const filteredItems = old.items.filter((item: any, index: number) => {\n          // Remove the item at the rowIndex being deleted\n          return index !== rowIndex;\n        });\n\n        return {\n          ...old,\n          items: filteredItems,\n        };\n      });\n\n      return { previousData };\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Item deleted successfully\",\n      });\n      // Refetch to get the accurate data\n      queryClient.invalidateQueries({ queryKey: [\"/api/sourcing/sheets\"] });\n    },\n    onError: (error, rowIndex, context) => {\n      // Revert the optimistic update\n      if (context?.previousData) {\n        queryClient.setQueryData(\n          [\"/api/sourcing/sheets\"],\n          context.previousData,\n        );\n      }\n\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditNotes = (\n    rowIndex: number,\n    item: GoogleSheetsSourcingItem,\n  ) => {\n    setEditingNotes({ rowIndex, item, currentNotes: item.Notes || \"\" });\n    setNotesText(item.Notes || \"\");\n    setNotesModalOpen(true);\n  };\n\n  const handleSaveNotes = () => {\n    if (editingNotes) {\n      updateNotes.mutate({\n        rowIndex: editingNotes.rowIndex,\n        notes: notesText,\n      });\n    }\n  };\n\n  const handleMarkAsWinner = (rowIndex: number) => {\n    updateProductReview.mutate({\n      rowIndex,\n      productReview: \"Winner\",\n    });\n  };\n\n  const handleArchiveItem = (\n    item: GoogleSheetsSourcingItem & { _originalRowIndex: number },\n  ) => {\n    console.log(\n      \"📦 Archiving item with ASIN:\",\n      item[\"ASIN\"],\n      \"Original row:\",\n      item._originalRowIndex,\n    );\n    archiveItem.mutate(item._originalRowIndex);\n  };\n\n  const handleDeleteItem = (\n    item: GoogleSheetsSourcingItem & { _originalRowIndex: number },\n  ) => {\n    if (\n      confirm(\n        \"Are you sure you want to delete this item? This will remove it from Google Sheets and cannot be undone.\",\n      )\n    ) {\n      console.log(\n        \"🗑️ Deleting item with original row index:\",\n        item._originalRowIndex,\n      );\n      deleteItem.mutate(item._originalRowIndex);\n    }\n  };\n\n  // Auto-sync filtered items to database\n  const syncItemsToDatabase = () => {\n    if (validItems.length > 0) {\n      const itemsToSave = validItems.map(\n        (\n          item: GoogleSheetsSourcingItem & { _originalRowIndex: number },\n          index: number,\n        ) => ({\n          rowIndex: index,\n          datum: item.Datum || \"\",\n          imageUrl: item[\"Image URL\"] || \"\",\n          brand: item.Brand || \"\",\n          productName: item[\"Product Name\"] || \"\",\n          asin: item.ASIN || \"\",\n          eanBarcode: item[\"EAN Barcode\"] || \"\",\n          sourceUrl: item[\"Source URL\"] || \"\",\n          amazonUrl: item[\"Amazon URL\"] || \"\",\n          costPrice: item[\"Cost Price\"] || \"\",\n          salePrice: item[\"Sale Price\"] || \"\",\n          buyBoxAverage: item[\"Buy Box (Average Last 90 Days)\"] || \"\",\n          profit: item.Profit || \"\",\n          profitMargin: item[\"Profit Margin\"] || \"\",\n          roi: item[\"R.O.I.\"] || \"\",\n          estimatedSales: item[\"Estimated Sales\"] || \"\",\n          fbaSellerCount: item[\"FBA Seller Count\"] || \"\",\n          fbmSellerCount: item[\"FBM Seller Count\"] || \"\",\n          productReview: item[\"Product Review\"] || \"\",\n          notes: item.Notes || \"\",\n          sourcingMethod: item[\"Sourcing Method\"] || \"\",\n        }),\n      );\n\n      saveItemsToDatabase.mutate(itemsToSave);\n    }\n  };\n\n  // Auto-sync on data load (only if user is authenticated and auth is loaded)\n  React.useEffect(() => {\n    if (\n      validItems.length > 0 &&\n      !saveItemsToDatabase.isPending &&\n      user &&\n      !isAuthLoading\n    ) {\n      console.log(\"🔄 Auto-syncing items to database...\");\n      syncItemsToDatabase();\n    }\n  }, [validItems.length, user, isAuthLoading]);\n\n  const formatPrice = (price: string) => {\n    if (!price) return \"€0.00\";\n    return price.includes(\"€\") ? price : `€${price}`;\n  };\n\n  const parsePrice = (price: string): number => {\n    if (!price) return 0;\n    return parseFloat(price.replace(/[^\\d.,]/g, \"\").replace(\",\", \".\")) || 0;\n  };\n\n  const getProfitColor = (profitStr: string) => {\n    const profit = parsePrice(profitStr);\n    if (profit > 15) return \"text-green-600 bg-green-50 border-green-200\";\n    if (profit > 5) return \"text-orange-600 bg-orange-50 border-orange-200\";\n    return \"text-red-600 bg-red-50 border-red-200\";\n  };\n\n  if (isLoading || isAuthLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50\">\n        <Sidebar />\n        <div className=\"flex-1 p-8\">\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <div className=\"flex-1 p-8 overflow-auto\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">\n                Sourcing Inbox\n              </h1>\n              <p className=\"text-gray-600 mt-2\">\n                {validItems.length} products from Google Sheets\n              </p>\n            </div>\n            <Button onClick={() => refetch()} variant=\"outline\">\n              Refresh Data\n            </Button>\n          </div>\n\n          {/* Product Cards */}\n          <div className=\"space-y-6\">\n            {validItems.map(\n              (\n                item: GoogleSheetsSourcingItem & { _originalRowIndex: number },\n                index: number,\n              ) => {\n                const isWinner =\n                  item[\"Product Review\"]?.toLowerCase() === \"winner\";\n                const buyPrice = parsePrice(item[\"Cost Price\"]);\n                const sellPrice = parsePrice(item[\"Sale Price\"]);\n                const profit = parsePrice(item[\"Profit\"]);\n                const roi = item[\"R.O.I.\"] || \"0%\";\n                const estSales = item[\"Estimated Sales\"] || \"0\";\n                const breakeven =\n                  profit > 0 ? Math.ceil(buyPrice / profit) : null;\n\n                return (\n                  <Card\n                    key={`${item.ASIN}-${index}`}\n                    className=\"border border-gray-200 shadow-sm hover:shadow-md transition-shadow bg-white\"\n                    data-testid={`product-card-${index}`}\n                  >\n                    <div className=\"p-6\">\n                      {/* Top Section: Product Info + Colored Metric Cards */}\n                      <div className=\"flex flex-col lg:flex-row gap-6\">\n                        {/* Left: Product Information */}\n                        <div className=\"flex-shrink-0 w-full lg:w-64\">\n                          {/* Date */}\n                          <div className=\"text-sm text-gray-500 mb-4\">\n                            {item.Datum || \"Feb 7, 2025\"}\n                            <br />\n                            00:00:00\n                          </div>\n\n                          {/* Product Image and Details */}\n                          <div className=\"flex items-start gap-3 mb-4\">\n                            {item[\"Image URL\"] ? (\n                              <img\n                                src={item[\"Image URL\"]}\n                                alt={item[\"Product Name\"] || \"Product\"}\n                                className=\"w-16 h-16 rounded-lg object-cover bg-gray-100\"\n                                onError={(e) => {\n                                  const target = e.target as HTMLImageElement;\n                                  target.style.display = \"none\";\n                                }}\n                              />\n                            ) : (\n                              <div className=\"w-16 h-16 rounded-lg bg-gray-100 flex items-center justify-center\">\n                                <span className=\"text-gray-400 text-xs\">\n                                  No Image\n                                </span>\n                              </div>\n                            )}\n                            <div className=\"flex-1\">\n                              <h3\n                                className=\"font-medium text-gray-900 text-sm leading-tight mb-1\"\n                                data-testid={`product-title-${index}`}\n                              >\n                                {item[\"Product Name\"] || \"Unknown Product\"}\n                              </h3>\n                              <p className=\"text-sm text-gray-600\">\n                                {item[\"Brand\"] || \"Unknown Brand\"}\n                              </p>\n                            </div>\n                          </div>\n\n                          {/* ASIN and EAN */}\n                          <div className=\"space-y-2 text-sm\">\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-600\">ASIN</span>\n                              <div className=\"flex items-center gap-2\">\n                                <span\n                                  className=\"text-gray-900 font-medium\"\n                                  data-testid={`product-asin-${index}`}\n                                >\n                                  {item[\"ASIN\"] || \"N/A\"}\n                                </span>\n                                {item[\"ASIN\"] && item[\"ASIN\"] !== \"N/A\" && (\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    className=\"h-4 w-4 p-0 text-gray-500 hover:text-gray-700\"\n                                    onClick={() => {\n                                      navigator.clipboard.writeText(item[\"ASIN\"]);\n                                      toast({\n                                        description: `ASIN ${item[\"ASIN\"]} copied to clipboard`,\n                                      });\n                                    }}\n                                    data-testid={`copy-asin-${index}`}\n                                  >\n                                    <Copy className=\"w-3 h-3\" />\n                                  </Button>\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-gray-600\">EAN</span>\n                              <div className=\"flex items-center gap-2\">\n                                <span\n                                  className=\"text-gray-900\"\n                                  data-testid={`product-ean-${index}`}\n                                >\n                                  {item[\"EAN Barcode\"] || \"N/A\"}\n                                </span>\n                                {item[\"EAN Barcode\"] && item[\"EAN Barcode\"] !== \"N/A\" && (\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    className=\"h-4 w-4 p-0 text-gray-500 hover:text-gray-700\"\n                                    onClick={() => {\n                                      navigator.clipboard.writeText(item[\"EAN Barcode\"]);\n                                      toast({\n                                        description: `EAN ${item[\"EAN Barcode\"]} copied to clipboard`,\n                                      });\n                                    }}\n                                    data-testid={`copy-ean-${index}`}\n                                  >\n                                    <Copy className=\"w-3 h-3\" />\n                                  </Button>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Right: Colored Metric Cards Grid */}\n                        <div className=\"flex-1\">\n                          <div className=\"grid grid-cols-2 lg:grid-cols-6 gap-3 mb-4\">\n                            {/* Buy Price - Blue */}\n                            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                              <div className=\"text-xs text-blue-600 font-medium mb-1\">\n                                Buy Price\n                              </div>\n                              <div className=\"text-sm font-bold text-blue-700\">\n                                {formatPrice(item[\"Cost Price\"])}\n                              </div>\n                            </div>\n\n                            {/* Sell Price - Green */}\n                            <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                              <div className=\"text-xs text-green-600 font-medium mb-1\">\n                                Sell Price\n                              </div>\n                              <div className=\"text-sm font-bold text-green-700\">\n                                {formatPrice(item[\"Sale Price\"])}\n                              </div>\n                              <div className=\"text-xs text-green-600\">\n                                90d:{\" \"}\n                                {formatPrice(\n                                  item[\"Buy Box (Average Last 90 Days)\"],\n                                )}\n                              </div>\n                            </div>\n\n                            {/* Profit - Light Green */}\n                            <div className=\"bg-emerald-50 border border-emerald-200 rounded-lg p-3\">\n                              <div className=\"text-xs text-emerald-600 font-medium mb-1\">\n                                Profit\n                              </div>\n                              <div className=\"text-sm font-bold text-emerald-700\">\n                                {formatPrice(item[\"Profit\"])}\n                              </div>\n                              <div className=\"text-xs text-emerald-600\">\n                                {item[\"Profit Margin\"] || \"0%\"} margin\n                              </div>\n                            </div>\n\n                            {/* ROI - Purple */}\n                            <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-3\">\n                              <div className=\"text-xs text-purple-600 font-medium mb-1\">\n                                ROI\n                              </div>\n                              <div className=\"text-sm font-bold text-purple-700\">\n                                {roi}\n                              </div>\n                            </div>\n\n                            {/* Est. Sales - Orange */}\n                            <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-3\">\n                              <div className=\"text-xs text-orange-600 font-medium mb-1\">\n                                Est. Sales\n                              </div>\n                              <div className=\"text-sm font-bold text-orange-700\">\n                                {estSales}/mo\n                              </div>\n                            </div>\n\n                            {/* Breakeven - Beige */}\n                            <div className=\"bg-stone-50 border border-stone-200 rounded-lg p-3\">\n                              <div className=\"text-xs text-stone-600 font-medium mb-1\">\n                                Breakeven\n                              </div>\n                              <div className=\"text-sm font-bold text-stone-700\">\n                                {breakeven ? `${breakeven} units` : \"N/A\"}\n                              </div>\n                              <div className=\"text-xs text-stone-600\">\n                                To recover costs\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"lg:grid-cols-3 grid-cols-1 grid gap-3\">\n                            <div className=\"border border-gray rounded-md p-3\">\n                              <h5 className=\"text-sm font-medium text-gray-700 mb-2\">\n                                Stock Levels\n                              </h5>\n                              <div className=\"space-y-1 text-xs\">\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-gray-600\">Amazon:</span>\n                                  <span className=\"font-medium\">150</span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-blue-600\">FBA:</span>\n                                  <span className=\"font-medium\">\n                                    {item[\"FBA Seller Count\"] || \"0\"}\n                                  </span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-green-600\">FBM:</span>\n                                  <span className=\"font-medium\">\n                                    {item[\"FBM Seller Count\"] || \"0\"}\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Active Offers */}\n                            <div className=\"border border-gray rounded-md p-3\">\n                              <h5 className=\"text-sm font-medium text-gray-700 mb-2\">\n                                Active Offers\n                              </h5>\n                              <div className=\"space-y-1 text-xs\">\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-blue-600\">\n                                    FBA Offers:\n                                  </span>\n                                  <span className=\"font-medium\">12</span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-green-600\">\n                                    FBM Offers:\n                                  </span>\n                                  <span className=\"font-medium\">8</span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-gray-600\">Total:</span>\n                                  <span className=\"font-medium\">20</span>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"lg:w-[300px] w-full grid grid-cols-1 gap-2\">\n                          {/* Product Status */}\n                          <Select\n                            defaultValue={item[\"Product Review\"] || \"\"}\n                            onValueChange={(value) => {\n                              updateProductReview.mutate({\n                                rowIndex: (item as any)._originalRowIndex,\n                                productReview: value,\n                              });\n                            }}\n                          >\n                            <SelectTrigger\n                              className=\"w-full h-8\"\n                              data-testid={`product-status-${index}`}\n                            >\n                              <SelectValue placeholder=\"Mark Status\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"Winner\">\n                                <div className=\"flex items-center gap-2 text-green-600\">\n                                  <CheckCircle2 className=\"w-4 h-4\" />\n                                  Winner\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Low Margin\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Low Margin\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Low ROI\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Low ROI\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Less than 50 sales a month\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Less than 50 sales a month\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Different product\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Different product\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Amazon active\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Amazon active\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Recent price increase\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Recent price increase\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Already submitted\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Already submitted\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Not enough profit for sale volume\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Not enough profit for sale volume\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Buy price changed\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Buy price changed\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Instable Price\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Instable Price\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Already selling\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Already selling\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Hazmat\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Hazmat\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Bad store\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Bad store\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Restricted Brand\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Restricted Brand\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Too heavy weight\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Too heavy weight\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Potential IP claims\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Potential IP claims\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Private Label\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Private Label\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"No Source URL\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  No Source URL\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Gated\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Gated\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Too many offers\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Too many offers\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Low stock\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Low stock\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Out of stock\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Out of stock\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"FBA Stock > 3 months sales\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  FBA Stock &gt; 3 months sales\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Transparency Code needed\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Transparency Code needed\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Buybox suppressed\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Buybox suppressed\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Different Amount\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Different Amount\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Brand active\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Brand active\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Review again\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  Review again\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"High MOV\">\n                                <div className=\"flex items-center gap-2 text-red-500\">\n                                  <X className=\"w-4 h-4\" />\n                                  High MOV\n                                </div>\n                              </SelectItem>\n                            </SelectContent>\n                          </Select>\n\n                          {/* Sourcing Method */}\n                          <Select\n                            defaultValue={\n                              item[\"Sourcing Method\"] || \"Online Arbitrage\"\n                            }\n                            onValueChange={(value) => {\n                              updateSourcingMethod.mutate({\n                                rowIndex: (item as any)._originalRowIndex,\n                                sourcingMethod: value,\n                              });\n                            }}\n                          >\n                            <SelectTrigger\n                              className=\"w-full h-8\"\n                              data-testid={`sourcing-method-${index}`}\n                            >\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"Profitpath\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Target className=\"w-4 h-4\" />\n                                  Profitpath\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Storefront Stalking\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Eye className=\"w-4 h-4\" />\n                                  Storefront Stalking\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Manual\">\n                                <div className=\"flex items-center gap-2\">\n                                  <User className=\"w-4 h-4\" />\n                                  Manual\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Idealo Scraper\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Search className=\"w-4 h-4\" />\n                                  Idealo Scraper\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Qogita price alert\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Bell className=\"w-4 h-4\" />\n                                  Qogita price alert\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Wholesale\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Package className=\"w-4 h-4\" />\n                                  Wholesale\n                                </div>\n                              </SelectItem>\n                              <SelectItem value=\"Idealo notifier\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Bell className=\"w-4 h-4\" />\n                                  Idealo notifier\n                                </div>\n                              </SelectItem>\n                            </SelectContent>\n                          </Select>\n                          {/* Notes */}\n                          <div className=\"text-gray-600 bg-gray-50 rounded-lg p-2 min-h-[80px]\">\n                            <div className=\"flex justify-between mb-2\">\n                              <h5 className=\"text-sm font-medium text-gray-700 \">\n                                Notes\n                              </h5>\n                              <button\n                                onClick={() =>\n                                  handleEditNotes(\n                                    (item as any)._originalRowIndex,\n                                    item as GoogleSheetsSourcingItem,\n                                  )\n                                }\n                                className=\"text-gray-500 hover:text-gray-700 cursor-pointer\"\n                                data-testid={`edit-notes-${index}`}\n                              >\n                                <SquarePen className=\"w-3 h-3\" />\n                              </button>\n                            </div>\n                            <div className=\"text-sm \">\n                              {item.Notes || (\n                                <span className=\"text-gray-400 italic\">\n                                  No notes yet\n                                </span>\n                              )}\n                            </div>\n                          </div>\n\n                          {/* Files */}\n                          <FileUploadSection \n                            rowIndex={(item as any)._originalRowIndex}\n                            asin={item.ASIN || ''}\n                            uploadFile={uploadFile}\n                            deleteFile={deleteFile}\n                          />\n\n                          {/* Action Buttons */}\n                          <div className=\"flex justify-end gap-1 pt-2 border-t border-gray-100 mt-2\">\n                            <Button size=\"sm\" variant=\"ghost\" className=\"w-6 h-6\" >\n                              <ExternalLink size={24} />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() =>\n                                handleArchiveItem(\n                                  item as GoogleSheetsSourcingItem & {\n                                    _originalRowIndex: number;\n                                  },\n                                )\n                              }\n                              disabled={archiveItem.isPending}\n                              className=\"text-orange-600 hover:text-orange-700 w-6 h-6\"\n                              data-testid={`archive-${index}`}\n                            >\n                              <Archive size={24} />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() =>\n                                handleDeleteItem(\n                                  item as GoogleSheetsSourcingItem & {\n                                    _originalRowIndex: number;\n                                  },\n                                )\n                              }\n                              disabled={deleteItem.isPending}\n                              className=\"text-red-600 hover:text-red-700 w-6 h-6\"\n                              data-testid={`delete-${index}`}\n                            >\n                              <Trash2  size={24} />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                );\n              },\n            )}\n          </div>\n\n          {validItems.length === 0 && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-500\">\n                No valid products found in Google Sheets.\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Notes Edit Modal */}\n      <Dialog open={notesModalOpen} onOpenChange={setNotesModalOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Notes</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-medium mb-2\">\n                {editingNotes?.item[\"Product Name\"] || \"Product\"}\n              </h4>\n              <p className=\"text-sm text-gray-600\">\n                ASIN: {editingNotes?.item[\"ASIN\"]}\n              </p>\n            </div>\n            <Textarea\n              value={notesText}\n              onChange={(e) => setNotesText(e.target.value)}\n              placeholder=\"Enter your notes here...\"\n              rows={4}\n              data-testid=\"notes-textarea\"\n            />\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setNotesModalOpen(false)}>\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSaveNotes}\n              disabled={updateNotes.isPending}\n              data-testid=\"save-notes-button\"\n            >\n              {updateNotes.isPending ? \"Saving...\" : \"Save Notes\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":60004},"client/src/pages/va-performance.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { TrendingUp, TrendingDown, Target, Award, BarChart3, Calendar, User } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Sidebar from \"@/components/sidebar\";\n\nexport default function VAPerformance() {\n  const { user } = useAuth();\n  const [selectedWeeks, setSelectedWeeks] = useState<string>(\"4\");\n  const [selectedUserId, setSelectedUserId] = useState<string>(\"\");\n\n  const userRole = (user as any)?.role || 'va';\n  const isAdmin = userRole === 'admin';\n  const currentUserId = (user as any)?.id || '';\n\n  // Set default user ID\n  const targetUserId = isAdmin && selectedUserId ? selectedUserId : currentUserId;\n\n  // Fetch VA performance data\n  const { data: performanceData, isLoading } = useQuery({\n    queryKey: ['/api/va/performance', targetUserId, selectedWeeks],\n    queryFn: () => apiRequest(`/api/va/performance/${targetUserId}?weeks=${selectedWeeks}`),\n    enabled: !!targetUserId,\n  });\n\n  // Fetch all users for admin dropdown\n  const { data: allUsers = [] } = useQuery({\n    queryKey: ['/api/users'],\n    queryFn: () => apiRequest('/api/users'),\n    enabled: isAdmin,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-gradient-to-br from-slate-50 via-white to-blue-50/30\">\n        <Sidebar />\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <header className=\"glass border-b border-black/10 backdrop-blur-xl\">\n            <div className=\"flex items-center justify-between h-20 px-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div>\n                  <h1 className=\"text-2xl font-bold gradient-text\">VA Performance</h1>\n                  <p className=\"text-xs text-muted-foreground mt-1\">Loading...</p>\n                </div>\n              </div>\n            </div>\n          </header>\n          <main className=\"flex-1 overflow-auto\">\n            <div className=\"p-8 space-y-6\">\n              <div className=\"grid gap-4\">\n                {[...Array(4)].map((_, i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardContent className=\"pt-6\">\n                      <div className=\"h-4 bg-muted rounded w-3/4 mb-4\"></div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  const weeklyStats = performanceData?.weeklyStats || [];\n  const totalStats = performanceData?.totalStats || {\n    avgProfit: 0,\n    totalDeals: 0,\n    totalWinners: 0,\n    successRate: 0,\n    totalProfit: 0,\n  };\n\n  const getPerformanceBadge = (value: number, threshold: number, isPercentage: boolean = false) => {\n    const isGood = value >= threshold;\n    const displayValue = isPercentage ? `${value.toFixed(1)}%` : value.toFixed(2);\n    \n    return (\n      <Badge variant={isGood ? \"default\" : \"secondary\"} className={isGood ? \"bg-green-600 text-white\" : \"\"}>\n        {isGood ? (\n          <TrendingUp className=\"h-3 w-3 mr-1\" />\n        ) : (\n          <TrendingDown className=\"h-3 w-3 mr-1\" />\n        )}\n        {displayValue}\n      </Badge>\n    );\n  };\n\n  const getWeeklyTrend = (currentValue: number, previousValue: number) => {\n    if (previousValue === 0) return 0;\n    return ((currentValue - previousValue) / previousValue) * 100;\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-gradient-to-br from-slate-50 via-white to-blue-50/30\">\n      <Sidebar />\n      \n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        {/* Header */}\n        <header className=\"glass border-b border-black/10 backdrop-blur-xl\">\n          <div className=\"flex items-center justify-between h-20 px-6\">\n            <div className=\"flex items-center space-x-4\">\n              <button className=\"lg:hidden p-3 rounded-xl text-muted-foreground hover:bg-black/5 transition-all duration-200\">\n                <i className=\"fas fa-bars\"></i>\n              </button>\n              <div>\n                <h1 className=\"text-2xl font-bold gradient-text\">VA Performance</h1>\n                <p className=\"text-xs text-muted-foreground mt-1\">Performance metrics and tracking</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-3 px-4 py-2 bg-purple-500/20 border border-purple-500/30 rounded-xl backdrop-blur-sm\">\n                <div className=\"w-3 h-3 bg-purple-400 rounded-full animate-glow\"></div>\n                <span className=\"text-sm font-medium text-purple-600\">{selectedWeeks} weeks tracking</span>\n              </div>\n              <button \n                className=\"p-3 text-muted-foreground hover:bg-black/5 rounded-xl transition-all duration-200\"\n                onClick={() => window.location.href = '/api/logout'}\n                data-testid=\"button-logout\"\n              >\n                <i className=\"fas fa-sign-out-alt text-lg\"></i>\n              </button>\n            </div>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"p-8 space-y-8\">\n            <div className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <h2 className=\"text-lg text-muted-foreground mb-2\">Performance Overview</h2>\n                  <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                    <div className=\"flex items-center space-x-1\">\n                      <User className=\"h-4 w-4 text-primary\" />\n                      <span>{isAdmin ? 'Admin view' : 'Personal metrics'}</span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex gap-2\">\n                  {isAdmin && (\n                    <Select value={selectedUserId} onValueChange={setSelectedUserId}>\n                      <SelectTrigger className=\"w-48\" data-testid=\"select-user\">\n                        <SelectValue placeholder=\"Select VA\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"\">All VAs</SelectItem>\n                        {allUsers.map((user: any) => (\n                          <SelectItem key={user.id} value={user.id}>\n                            {user.firstName} {user.lastName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  )}\n                  <Select value={selectedWeeks} onValueChange={setSelectedWeeks}>\n                    <SelectTrigger className=\"w-32\" data-testid=\"select-weeks\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"4\">4 Weeks</SelectItem>\n                      <SelectItem value=\"8\">8 Weeks</SelectItem>\n                      <SelectItem value=\"12\">12 Weeks</SelectItem>\n                      <SelectItem value=\"26\">26 Weeks</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Performance Summary Cards */}\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n                <Card className=\"card-hover\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Deals</CardTitle>\n                    <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{totalStats.totalDeals}</div>\n                    <div className=\"flex items-center space-x-2 text-xs text-muted-foreground mt-1\">\n                      <Target className=\"h-3 w-3\" />\n                      <span>Submitted products</span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"card-hover\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Winner Products</CardTitle>\n                    <Award className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\">{totalStats.totalWinners}</div>\n                    <div className=\"flex items-center space-x-2 text-xs text-muted-foreground mt-1\">\n                      <TrendingUp className=\"h-3 w-3\" />\n                      <span>Approved deals</span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"card-hover\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Success Rate</CardTitle>\n                    <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">\n                      {getPerformanceBadge(totalStats.successRate, 20, true)}\n                    </div>\n                    <div className=\"flex items-center space-x-2 text-xs text-muted-foreground mt-1\">\n                      <Target className=\"h-3 w-3\" />\n                      <span>Target: 20%+</span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"card-hover\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Average Profit</CardTitle>\n                    <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">\n                      {getPerformanceBadge(totalStats.avgProfit, 5, false)}\n                    </div>\n                    <div className=\"flex items-center space-x-2 text-xs text-muted-foreground mt-1\">\n                      <Target className=\"h-3 w-3\" />\n                      <span>Target: €5.00+</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Weekly Performance Breakdown */}\n              <Card className=\"card-hover\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-5 w-5\" />\n                    Weekly Performance Breakdown\n                  </CardTitle>\n                  <CardDescription>\n                    Detailed week-by-week performance metrics for the last {selectedWeeks} weeks\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {weeklyStats.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <BarChart3 className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                      <p>No performance data available for the selected period</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {weeklyStats.map((weekStat: any, index: number) => {\n                        const prevWeekStat = index > 0 ? weeklyStats[index - 1] : null;\n                        const profitTrend = prevWeekStat ? getWeeklyTrend(weekStat.avgProfit, prevWeekStat.avgProfit) : 0;\n                        const dealsTrend = prevWeekStat ? getWeeklyTrend(weekStat.totalDeals, prevWeekStat.totalDeals) : 0;\n\n                        return (\n                          <div key={weekStat.weekStart} className=\"border rounded-lg p-4 hover:bg-muted/50 transition-colors\">\n                            <div className=\"flex justify-between items-center mb-3\">\n                              <div>\n                                <h4 className=\"font-medium\">\n                                  Week of {new Date(weekStat.weekStart).toLocaleDateString()}\n                                </h4>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {weekStat.totalDeals} deals submitted • {weekStat.totalWinners} winners\n                                </p>\n                              </div>\n                              <div className=\"text-right\">\n                                <p className=\"text-lg font-semibold\">\n                                  {weekStat.successRate.toFixed(1)}% success rate\n                                </p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  €{weekStat.avgProfit.toFixed(2)} avg profit\n                                </p>\n                              </div>\n                            </div>\n\n                            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                              <div>\n                                <Label className=\"text-muted-foreground\">Deals Submitted</Label>\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"font-medium\">{weekStat.totalDeals}</span>\n                                  {prevWeekStat && (\n                                    <Badge variant={dealsTrend >= 0 ? \"default\" : \"secondary\"} className=\"text-xs\">\n                                      {dealsTrend >= 0 ? \"+\" : \"\"}{dealsTrend.toFixed(0)}%\n                                    </Badge>\n                                  )}\n                                </div>\n                              </div>\n                              <div>\n                                <Label className=\"text-muted-foreground\">Winners</Label>\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"font-medium text-green-600\">{weekStat.totalWinners}</span>\n                                </div>\n                              </div>\n                              <div>\n                                <Label className=\"text-muted-foreground\">Success Rate</Label>\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"font-medium\">{weekStat.successRate.toFixed(1)}%</span>\n                                  {weekStat.successRate >= 20 ? (\n                                    <TrendingUp className=\"h-3 w-3 text-green-600\" />\n                                  ) : (\n                                    <TrendingDown className=\"h-3 w-3 text-yellow-600\" />\n                                  )}\n                                </div>\n                              </div>\n                              <div>\n                                <Label className=\"text-muted-foreground\">Avg Profit</Label>\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"font-medium\">€{weekStat.avgProfit.toFixed(2)}</span>\n                                  {prevWeekStat && (\n                                    <Badge variant={profitTrend >= 0 ? \"default\" : \"secondary\"} className=\"text-xs\">\n                                      {profitTrend >= 0 ? \"+\" : \"\"}{profitTrend.toFixed(0)}%\n                                    </Badge>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Performance Goals */}\n              <Card className=\"card-hover\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Target className=\"h-5 w-5\" />\n                    Performance Goals & Targets\n                  </CardTitle>\n                  <CardDescription>\n                    Key performance indicators and targets for VA performance\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid gap-4 md:grid-cols-2\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between items-center p-3 bg-muted/50 rounded-lg\">\n                        <div>\n                          <h4 className=\"font-medium\">Success Rate Target</h4>\n                          <p className=\"text-sm text-muted-foreground\">Minimum 20% of deals approved</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant={totalStats.successRate >= 20 ? \"default\" : \"secondary\"}>\n                            {totalStats.successRate >= 20 ? \"✓ Met\" : \"⚠ Below Target\"}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex justify-between items-center p-3 bg-muted/50 rounded-lg\">\n                        <div>\n                          <h4 className=\"font-medium\">Quality Target</h4>\n                          <p className=\"text-sm text-muted-foreground\">Average profit per deal €5+</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant={totalStats.avgProfit >= 5 ? \"default\" : \"secondary\"}>\n                            {totalStats.avgProfit >= 5 ? \"✓ Met\" : \"⚠ Below Target\"}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between items-center p-3 bg-muted/50 rounded-lg\">\n                        <div>\n                          <h4 className=\"font-medium\">Activity Target</h4>\n                          <p className=\"text-sm text-muted-foreground\">Minimum 5 deals per week</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant=\"secondary\">\n                            Tracking\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex justify-between items-center p-3 bg-muted/50 rounded-lg\">\n                        <div>\n                          <h4 className=\"font-medium\">Consistency Target</h4>\n                          <p className=\"text-sm text-muted-foreground\">Regular weekly submissions</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant=\"secondary\">\n                            Tracking\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":19992},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/purchasing-overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ExternalLink, Package, TrendingUp, DollarSign } from \"lucide-react\";\n\ninterface PurchasingItem {\n  [key: string]: string;\n}\n\ninterface PurchasingData {\n  headers: string[];\n  items: PurchasingItem[];\n  totalRows: number;\n  lastUpdated: string;\n}\n\nexport default function PurchasingOverview() {\n  const { data: purchasingData, isLoading, error } = useQuery<PurchasingData>({\n    queryKey: [\"/api/purchasing/sheets\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"glass border-0 card-hover\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Package className=\"h-5 w-5\" />\n            Purchasing Queue\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center h-32\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"glass border-0 card-hover\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Package className=\"h-5 w-5\" />\n            Purchasing Queue\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-muted-foreground\">\n            Unable to load purchasing data. The Purchasing tab may not exist yet.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const items = purchasingData?.items || [];\n  \n  // Calculate totals\n  const totalProducts = items.length;\n  const totalCostPrice = items.reduce((sum: number, item: PurchasingItem) => {\n    const cost = parseFloat(item['Cost Price']?.replace(/[^\\d.,]/g, '').replace(',', '.')) || 0;\n    return sum + cost;\n  }, 0);\n  \n  const totalProfit = items.reduce((sum: number, item: PurchasingItem) => {\n    const profit = parseFloat(item['Profit']?.replace(/[^\\d.,]/g, '').replace(',', '.')) || 0;\n    return sum + profit;\n  }, 0);\n\n  return (\n    <Card className=\"glass border-0 card-hover\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Package className=\"h-5 w-5\" />\n            Purchasing Queue\n          </div>\n          <Badge variant=\"secondary\">{totalProducts} Winner Products</Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {totalProducts === 0 ? (\n          <div className=\"text-center py-8\">\n            <Package className=\"h-12 w-12 text-muted-foreground mx-auto mb-4 opacity-50\" />\n            <p className=\"text-sm text-muted-foreground\">\n              No products in purchasing queue yet.\n            </p>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Mark products as \"Winner\" to see them here.\n            </p>\n          </div>\n        ) : (\n          <>\n            {/* Summary Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n              <div className=\"bg-gradient-to-br from-blue-500/10 to-blue-400/10 border border-blue-500/20 rounded-xl p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Package className=\"h-8 w-8 text-blue-500\" />\n                  <div>\n                    <p className=\"text-2xl font-bold text-blue-600\">{totalProducts}</p>\n                    <p className=\"text-xs text-blue-500/70\">Products</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-gradient-to-br from-red-500/10 to-red-400/10 border border-red-500/20 rounded-xl p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <DollarSign className=\"h-8 w-8 text-red-500\" />\n                  <div>\n                    <p className=\"text-2xl font-bold text-red-600\">€{totalCostPrice.toFixed(2)}</p>\n                    <p className=\"text-xs text-red-500/70\">Total Cost</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-gradient-to-br from-green-500/10 to-green-400/10 border border-green-500/20 rounded-xl p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <TrendingUp className=\"h-8 w-8 text-green-500\" />\n                  <div>\n                    <p className=\"text-2xl font-bold text-green-600\">€{totalProfit.toFixed(2)}</p>\n                    <p className=\"text-xs text-green-500/70\">Est. Profit</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Product List */}\n            <div className=\"space-y-3\">\n              <h4 className=\"text-sm font-medium text-muted-foreground mb-3\">\n                Recent Winner Products\n              </h4>\n              \n              {items.slice(0, 5).map((item: PurchasingItem, index: number) => (\n                <div \n                  key={index} \n                  className=\"flex items-center justify-between p-3 bg-white/50 dark:bg-gray-800/50 rounded-lg border border-gray-200/50 dark:border-gray-700/50\"\n                >\n                  <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n                    {item['Image URL'] && (\n                      <img\n                        src={item['Image URL']}\n                        alt={item['Product Name'] || 'Product'}\n                        className=\"w-10 h-10 rounded-lg object-cover bg-gray-100\"\n                        onError={(e) => {\n                          const target = e.target as HTMLImageElement;\n                          target.style.display = 'none';\n                        }}\n                      />\n                    )}\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100 truncate\">\n                        {item['Product Name'] || 'Unknown Product'}\n                      </p>\n                      <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                        <span>{item['Brand'] || 'Unknown Brand'}</span>\n                        <span>•</span>\n                        <span>Cost: {item['Cost Price'] || '-'}</span>\n                        <span>•</span>\n                        <span>Profit: {item['Profit'] || '-'}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Badge \n                      variant=\"outline\" \n                      className=\"bg-green-50 text-green-700 border-green-200\"\n                    >\n                      Winner\n                    </Badge>\n                    \n                    {item['Amazon URL'] && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        className=\"h-8 w-8 p-0\"\n                        onClick={() => window.open(item['Amazon URL'], '_blank')}\n                      >\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ))}\n              \n              {items.length > 5 && (\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full mt-4\"\n                  onClick={() => window.location.href = '/purchasing'}\n                >\n                  View All {items.length} Products\n                </Button>\n              )}\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7962},"client/src/pages/purchasing-inbox.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  ExternalLink,\n  Box,\n  Upload,\n  Trash2,\n  Copy,\n  CheckCircle2,\n  Archive,\n  Truck,\n  SquarePen,\n  Target,\n  Eye,\n  User,\n  Search,\n  Bell,\n  Package,\n  X,\n  FileText,\n  Download,\n  Image as ImageIcon,\n  Paperclip,\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Sidebar from \"@/components/sidebar\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { GoogleSheetsSourcingItem, SourcingItem } from \"@shared/schema\";\n\ninterface SheetsData {\n  items?: GoogleSheetsSourcingItem[];\n  headers?: string[];\n  success?: boolean;\n}\n\ninterface FileUploadSectionProps {\n  rowIndex: number;\n  asin: string;\n  uploadFile: any;\n  deleteFile: any;\n}\n\nexport function FileUploadSection({\n  rowIndex,\n  asin,\n  uploadFile,\n  deleteFile,\n}: FileUploadSectionProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const fileInputRef = React.useRef<HTMLInputElement>(null);\n\n  // Fetch files for this row\n  const { data: filesData } = useQuery({\n    queryKey: [\"/api/purchasing/files\", rowIndex],\n    queryFn: async () => {\n      const response = await fetch(`/api/purchasing/files/${rowIndex}`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch files\");\n      }\n      return response.json();\n    },\n    enabled: !!rowIndex && rowIndex >= 0,\n    staleTime: 5 * 60 * 1000, // 5 minutes - prevent unnecessary refetches\n    gcTime: 10 * 60 * 1000, // 10 minutes - keep in cache longer\n    refetchOnWindowFocus: false, // Don't refetch when window regains focus\n  });\n\n  const files = filesData?.files || [];\n  const handleFileSelect = (selectedFiles: FileList | null) => {\n    if (!selectedFiles || selectedFiles.length === 0) return;\n\n    const file = selectedFiles[0];\n    if (file) {\n      uploadFile.mutate({ rowIndex, asin, file });\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    const droppedFiles = e.dataTransfer.files;\n    handleFileSelect(droppedFiles);\n  };\n\n  const getFileIcon = (mimeType: string) => {\n    if (mimeType.startsWith(\"image/\")) return <ImageIcon className=\"w-4 h-4\" />;\n    if (mimeType.includes(\"pdf\")) return <FileText className=\"w-4 h-4\" />;\n    return <Paperclip className=\"w-4 h-4\" />;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  return (\n    <div className=\"mt-4 space-y-2\">\n      {/* File Upload Area */}\n      <div\n        className={`border-2 border-dashed rounded-lg p-4 text-center cursor-pointer transition-colors ${\n          isDragOver\n            ? \"border-blue-400 bg-blue-50\"\n            : \"border-gray-300 hover:border-gray-400\"\n        }`}\n        onClick={() => fileInputRef.current?.click()}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          className=\"hidden\"\n          onChange={(e) => handleFileSelect(e.target.files)}\n          accept=\"image/*,.pdf,.doc,.docx,.txt\"\n        />\n        <Upload className=\"w-6 h-6 mx-auto mb-2 text-gray-400\" />\n        <p className=\"text-sm text-gray-600\">\n          Drop files here or click to upload\n        </p>\n        <p className=\"text-xs text-gray-500\">\n          Images, PDFs, Documents (Max 10MB)\n        </p>\n      </div>\n\n      {/* Uploaded Files List */}\n      {files.length > 0 && (\n        <div className=\"space-y-2\">\n          <h5 className=\"text-sm font-medium text-gray-700\">Uploaded Files:</h5>\n          {files.map((file: any) => (\n            <div\n              key={file.id}\n              className=\"flex items-center justify-between p-2 bg-gray-50 rounded border\"\n            >\n              <div className=\"flex items-center space-x-2\">\n                {getFileIcon(file.mimeType)}\n                <span className=\"text-sm text-gray-700\">{file.filename}</span>\n                <span className=\"text-xs text-gray-500\">\n                  ({formatFileSize(file.size)})\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() =>\n                    window.open(\n                      `/api/purchasing/files/download/${file.id}`,\n                      \"_blank\",\n                    )\n                  }\n                  className=\"h-6 w-6 p-0\"\n                >\n                  <Download className=\"w-3 h-3\" />\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() => deleteFile.mutate(file.id)}\n                  className=\"h-6 w-6 p-0 text-red-500 hover:text-red-700\"\n                >\n                  <X className=\"w-3 h-3\" />\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function PurchasingInbox() {\n  const { user, isLoading: isAuthLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [notesModalOpen, setNotesModalOpen] = useState(false);\n  const [editingNotes, setEditingNotes] = useState<{\n    rowIndex: number;\n    item: GoogleSheetsSourcingItem;\n    notes: string;\n  } | null>(null);\n  const lastSavedRef = React.useRef<string>(\"\");\n  // State to track purchased amounts for each row\n  const [purchasedAmounts, setPurchasedAmounts] = useState<Record<number, number>>({});\n\n  // Fetch purchasing items directly from Google Sheets\n  const {\n    data: sheetsData,\n    isLoading,\n    refetch,\n  } = useQuery({\n    queryKey: [\"/api/purchasing/sheets\"],\n    queryFn: () => apiRequest(\"/api/purchasing/sheets\"),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n    refetchOnWindowFocus: false,\n    refetchInterval: 30000, // 30 seconds\n    refetchIntervalInBackground: true,\n  });\n\n  // Fetch archived items from database (only items where archived = true)\n  const { data: archivedData } = useQuery({\n    queryKey: [\"/api/purchasing/items\", \"archived\"],\n    queryFn: () => apiRequest(\"/api/purchasing/items?archived=true\"),\n    enabled: !!user,\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000,\n    refetchOnWindowFocus: false,\n  });\n\n  const purchasingItems: GoogleSheetsSourcingItem[] =\n    (sheetsData as any)?.items || [];\n\n  // Add archived items to the display list and mark them as archived\n  const archivedItems = (archivedData as any) || [];\n  const archivedSheetItems = archivedItems.map((item: any) => ({\n    ...item,\n    _isArchived: true,\n    _originalRowIndex: item.originalRowIndex,\n  }));\n\n  // Filter out rows where essential fields are blank\n  const validItems = purchasingItems\n    .filter((item: GoogleSheetsSourcingItem) => {\n      const productName = item[\"Product Name\"]?.toString().trim();\n      const asin = item[\"ASIN\"]?.toString().trim();\n      return productName && productName !== \"\" && asin && asin !== \"\";\n    })\n    .map((item, originalIndex) => ({\n      ...item,\n      _originalRowIndex: originalIndex + 2, // +2 because sheets are 1-indexed and have header row\n    }))\n    .concat(\n      archivedSheetItems.filter((archivedItem: any) => {\n        const productName = archivedItem[\"Product Name\"]?.toString().trim();\n        const asin = archivedItem[\"ASIN\"]?.toString().trim();\n        return productName && productName !== \"\" && asin && asin !== \"\";\n      }),\n    );\n\n  // Update Status (from column V)\n  const updateStatus = useMutation({\n    mutationFn: async ({\n      rowIndex,\n      status,\n    }: {\n      rowIndex: number;\n      status: string;\n    }) => {\n      const response = await fetch(\"/api/purchasing/update-status\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ rowIndex, status }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to update status\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        description: `Status updated to \"${variables.status}\"`,\n      });\n\n      // Invalidate and refetch the sheets data to get updated information\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchasing/sheets\"] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          variant: \"destructive\",\n          description: \"Session expired. Please log in again.\",\n        });\n        window.location.href = \"/api/login\";\n        return;\n      }\n\n      toast({\n        variant: \"destructive\",\n        description: error.message || \"Failed to update status\",\n      });\n    },\n  });\n\n  // Update Sourcing Method\n  const updateSourcingMethod = useMutation({\n    mutationFn: async ({\n      rowIndex,\n      sourcingMethod,\n    }: {\n      rowIndex: number;\n      sourcingMethod: string;\n    }) => {\n      const response = await fetch(\"/api/purchasing/update-sourcing-method\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ rowIndex, sourcingMethod }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to update sourcing method\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        description: `Sourcing method updated to \"${variables.sourcingMethod}\"`,\n      });\n\n      // Invalidate and refetch the sheets data to get updated information\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchasing/sheets\"] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          variant: \"destructive\",\n          description: \"Session expired. Please log in again.\",\n        });\n        window.location.href = \"/api/login\";\n        return;\n      }\n\n      toast({\n        variant: \"destructive\",\n        description: error.message || \"Failed to update sourcing method\",\n      });\n    },\n  });\n\n  // Update Notes\n  const updateNotes = useMutation({\n    mutationFn: async ({\n      rowIndex,\n      notes,\n    }: {\n      rowIndex: number;\n      notes: string;\n    }) => {\n      const response = await fetch(\"/api/purchasing/update-notes\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ rowIndex, notes }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to update notes\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        description: \"Notes updated successfully\",\n      });\n\n      // Invalidate and refetch the sheets data to get updated information\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchasing/sheets\"] });\n      setNotesModalOpen(false);\n      setEditingNotes(null);\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          variant: \"destructive\",\n          description: \"Session expired. Please log in again.\",\n        });\n        window.location.href = \"/api/login\";\n        return;\n      }\n\n      toast({\n        variant: \"destructive\",\n        description: error.message || \"Failed to update notes\",\n      });\n    },\n  });\n\n  // File upload mutations\n  const uploadFile = useMutation({\n    mutationFn: async ({\n      rowIndex,\n      asin,\n      file,\n    }: {\n      rowIndex: number;\n      asin: string;\n      file: File;\n    }) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"rowIndex\", rowIndex.toString());\n      formData.append(\"asin\", asin);\n\n      const response = await fetch(\"/api/purchasing/files/upload\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to upload file\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        description: `File uploaded successfully`,\n      });\n\n      // Invalidate files query to refresh the file list\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/purchasing/files\", variables.rowIndex],\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        description: error.message || \"Failed to upload file\",\n      });\n    },\n  });\n\n  const deleteFile = useMutation({\n    mutationFn: async (fileId: string) => {\n      return apiRequest(`/api/purchasing/files/${fileId}`, \"DELETE\");\n    },\n    onSuccess: (data, fileId) => {\n      toast({\n        description: \"File deleted successfully\",\n      });\n\n      // Invalidate all file queries to refresh file lists\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/purchasing/files\"],\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        description: error.message || \"Failed to delete file\",\n      });\n    },\n  });\n\n  // Save items to database\n  const saveItemsToDatabase = useMutation({\n    mutationFn: async (items: any[]) => {\n      return apiRequest(\"/api/purchasing/items/save\", \"POST\", items);\n    },\n    onSuccess: () => {\n      console.log(\"✅ Items saved to database successfully\");\n    },\n    onError: (error: any) => {\n      console.error(\"❌ Failed to save items to database:\", error);\n      // Silent fail for auto-save\n    },\n  });\n\n  // Create shipment mutation\n  const createShipment = useMutation({\n    mutationFn: async ({\n      asin,\n      productName,\n      quantity,\n    }: {\n      asin: string;\n      productName: string;\n      quantity: number;\n    }) => {\n      return apiRequest(\"/api/purchasing/create-shipment\", \"POST\", {\n        asin,\n        productName,\n        quantity,\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        description: \"Shipment created successfully via PrepMyBusiness\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          variant: \"destructive\",\n          description: \"Session expired. Please log in again.\",\n        });\n        window.location.href = \"/api/login\";\n        return;\n      }\n\n      toast({\n        variant: \"destructive\",\n        description: error.message || \"Failed to create shipment\",\n      });\n    },\n  });\n\n  // Create Amazon Listing\n  const createAmazonListing = useMutation({\n    mutationFn: async ({\n      asin,\n      productName,\n      price,\n      buyPrice,\n      brand,\n    }: {\n      asin: string;\n      productName: string;\n      price?: string;\n      buyPrice?: string;\n      brand: string;\n    }) => {\n      return apiRequest(\"/api/purchasing/create-amazon-listing\", \"POST\", {\n        asin,\n        productName,\n        price,\n        buyPrice,\n        brand,\n      });\n    },\n    onSuccess: (data: any) => {\n      toast({\n        description: `Amazon listing created successfully. SKU: ${data.sku}`,\n      });\n      \n      // Refresh the data to show updated status\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchasing/sheets\"] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          variant: \"destructive\",\n          description: \"Session expired. Please log in again.\",\n        });\n        window.location.href = \"/api/login\";\n        return;\n      }\n\n      // Handle admin-only access\n      if (error.message?.includes(\"Admin role required\")) {\n        toast({\n          variant: \"destructive\",\n          description: \"Access denied. Only administrators can create Amazon listings.\",\n        });\n        return;\n      }\n\n      toast({\n        variant: \"destructive\",\n        description: error.message || \"Failed to create Amazon listing\",\n      });\n    },\n  });\n\n  // Auto-save items to database when data changes\n  React.useEffect(() => {\n    if (validItems.length > 0 && !isLoading && user) {\n      const itemsToSave = validItems\n        .filter((item) => !(item as any)._isArchived)\n        .map((item: any) => ({\n          originalRowIndex: item._originalRowIndex,\n          productName: item[\"Product Name\"] || \"\",\n          brand: item[\"Brand\"] || \"\",\n          asin: item[\"ASIN\"] || \"\",\n          eanBarcode: item[\"EAN Barcode\"] || \"\",\n          imageUrl: item[\"Image URL\"] || \"\",\n          costPrice: item[\"Cost Price\"] || \"\",\n          salePrice: item[\"Sale Price\"] || \"\",\n          buyBoxAverage: item[\"Buy Box (Average Last 90 Days)\"] || \"\",\n          profit: item[\"Profit\"] || \"\",\n          profitMargin: item[\"Profit Margin\"] || \"\",\n          roi: item[\"R.O.I.\"] || \"\",\n          estimatedSales: item[\"Estimated Sales\"] || \"\",\n          fbaSellerCount: item[\"FBA Seller Count\"] || \"\",\n          fbmSellerCount: item[\"FBM Seller Count\"] || \"\",\n          status: item[\"Status\"] || \"\",\n          notes: item[\"Notes\"] || \"\",\n          sourcingMethod: item[\"Sourcing Method\"] || \"\",\n          sourceUrl: item[\"Source URL\"] || \"\",\n          amazonUrl: item[\"Amazon URL\"] || \"\",\n          datum: item[\"Datum\"] || \"\",\n        }));\n\n    const serialized = JSON.stringify(itemsToSave);\n      if (lastSavedRef.current !== serialized) {\n        console.log(\"🔄 Auto-syncing items to database...\");\n        saveItemsToDatabase.mutate(itemsToSave);\n        lastSavedRef.current = serialized;\n      }\n    }\n  }, [validItems, isLoading, user]);\n\n  // Archive item with optimistic updates\n  const archiveItem = useMutation({\n    mutationFn: async (rowIndex: number) => {\n      return apiRequest(`/api/purchasing/items/${rowIndex}/archive`, \"POST\");\n    },\n    onMutate: async (rowIndex: number) => {\n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: [\"/api/purchasing/sheets\"] });\n\n      // Snapshot the previous value\n      const previousData = queryClient.getQueryData([\"/api/purchasing/sheets\"]);\n\n      // Optimistically update to hide the item\n      queryClient.setQueryData([\"/api/purchasing/sheets\"], (old: any) => {\n        if (!old || !old.items) return old;\n\n        return {\n          ...old,\n          items: old.items.map((item: any, index: number) => {\n            const currentRowIndex = index + 2; // +2 for 1-indexed sheets with header\n            if (currentRowIndex === rowIndex) {\n              return { ...item, _isArchived: true };\n            }\n            return item;\n          }),\n        };\n      });\n\n      // Return a context with the previous data\n      return { previousData };\n    },\n    onError: (err, rowIndex, context) => {\n      // If the mutation fails, use the context to roll back\n      if (context?.previousData) {\n        queryClient.setQueryData(\n          [\"/api/purchasing/sheets\"],\n          context.previousData,\n        );\n      }\n\n      if (isUnauthorizedError(err)) {\n        toast({\n          variant: \"destructive\",\n          description: \"Session expired. Please log in again.\",\n        });\n        window.location.href = \"/api/login\";\n        return;\n      }\n\n      toast({\n        variant: \"destructive\",\n        description: (err as any).message || \"Failed to archive item\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        description: \"Item archived successfully\",\n      });\n\n      // Refetch both sheets data and archived data\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchasing/sheets\"] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/purchasing/items\", \"archived\"],\n      });\n    },\n    onSettled: () => {\n      // Always refetch after error or success\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchasing/sheets\"] });\n    },\n  });\n\n  // Delete item with optimistic updates\n  const deleteItem = useMutation({\n    mutationFn: async (rowIndex: number) => {\n      return apiRequest(`/api/purchasing/items/${rowIndex}`, \"DELETE\");\n    },\n    onMutate: async (rowIndex: number) => {\n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: [\"/api/purchasing/sheets\"] });\n\n      // Snapshot the previous value\n      const previousData = queryClient.getQueryData([\"/api/purchasing/sheets\"]);\n\n      // Optimistically remove the item\n      queryClient.setQueryData([\"/api/purchasing/sheets\"], (old: any) => {\n        if (!old || !old.items) return old;\n\n        return {\n          ...old,\n          items: old.items.filter((_: any, index: number) => {\n            const currentRowIndex = index + 2; // +2 for 1-indexed sheets with header\n            return currentRowIndex !== rowIndex;\n          }),\n        };\n      });\n\n      // Return a context with the previous data\n      return { previousData };\n    },\n    onError: (err, rowIndex, context) => {\n      // If the mutation fails, use the context to roll back\n      if (context?.previousData) {\n        queryClient.setQueryData(\n          [\"/api/purchasing/sheets\"],\n          context.previousData,\n        );\n      }\n\n      if (isUnauthorizedError(err)) {\n        toast({\n          variant: \"destructive\",\n          description: \"Session expired. Please log in again.\",\n        });\n        window.location.href = \"/api/login\";\n        return;\n      }\n\n      toast({\n        variant: \"destructive\",\n        description: (err as any).message || \"Failed to delete item\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        description: \"Item deleted permanently\",\n      });\n\n      // Refetch data\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchasing/sheets\"] });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/purchasing/items\", \"archived\"],\n      });\n    },\n    onSettled: () => {\n      // Always refetch after error or success\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchasing/sheets\"] });\n    },\n  });\n\n  // Helper functions\n  const parsePrice = (priceStr: string | number | undefined): number => {\n    if (!priceStr) return 0;\n    const cleanPrice = priceStr.toString().replace(/[^\\d.,]/g, \"\");\n    if (!cleanPrice) return 0;\n    const price = parseFloat(cleanPrice.replace(\",\", \".\"));\n    return isNaN(price) ? 0 : price;\n  };\n\n  const formatPrice = (priceStr: string | number | undefined): string => {\n    const price = parsePrice(priceStr);\n    return new Intl.NumberFormat(\"de-DE\", {\n      style: \"currency\",\n      currency: \"EUR\",\n    }).format(price);\n  };\n\n  // Handle edit notes\n  const handleEditNotes = (item: any) => {\n    setEditingNotes({\n      rowIndex: item._originalRowIndex,\n      item: item,\n      notes: item[\"Notes\"] || \"\",\n    });\n    setNotesModalOpen(true);\n  };\n\n  // Handle archive item\n  const handleArchiveItem = (item: any) => {\n    archiveItem.mutate(item._originalRowIndex);\n  };\n\n  // Handle delete item\n  const handleDeleteItem = (item: any) => {\n    if (\n      window.confirm(\n        \"Are you sure you want to permanently delete this item? This action cannot be undone.\",\n      )\n    ) {\n      deleteItem.mutate(item._originalRowIndex);\n    }\n  };\n\n  if (isAuthLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Authentication Required</h1>\n          <p className=\"text-gray-600 mb-4\">\n            You need to be logged in to access this page.\n          </p>\n          <Button\n            onClick={() => (window.location.href = \"/api/login\")}\n            data-testid=\"login-button\"\n          >\n            Login\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      <Sidebar />\n\n      <div className=\"flex-1 overflow-auto\">\n        <div className=\"container mx-auto p-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">\n                Purchasing Inbox\n              </h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Manage and review purchasing products from Google Sheets\n              </p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Badge variant=\"secondary\" data-testid=\"product-count\">\n                {validItems.length} Products\n              </Badge>\n              <p className=\"text-sm text-muted-foreground\">\n                Last updated: {new Date().toLocaleTimeString()}\n              </p>\n            </div>\n            <Button onClick={() => refetch()} variant=\"outline\">\n              Refresh Data\n            </Button>\n          </div>\n\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : validItems.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                No purchasing products found\n              </h3>\n              <p className=\"text-gray-500\">\n                Products will appear here when added to the Google Sheets.\n              </p>\n            </div>\n          ) : (\n            <>\n              {/* Product Cards */}\n              <div className=\"space-y-6\">\n                {validItems.map(\n                  (\n                    item: GoogleSheetsSourcingItem & {\n                      _originalRowIndex: number;\n                    },\n                    index: number,\n                  ) => {\n                    const isFBAWarehouse =\n                      item[\"Status\"]?.toLowerCase() === \"fba warehouse\";\n                    const buyPrice = parsePrice(item[\"Cost Price\"]);\n                    const sellPrice = parsePrice(item[\"Sale Price\"]);\n                    const profit = parsePrice(item[\"Profit\"]);\n                    const roi = item[\"R.O.I.\"] || \"0%\";\n                    const estSales = item[\"Estimated Sales\"] || \"0\";\n                    const breakeven =\n                      profit > 0 ? Math.ceil(buyPrice / profit) : null;\n\n                    return (\n                      <Card\n                        key={`${item.ASIN}-${index}`}\n                        className=\"border border-gray-200 shadow-sm hover:shadow-md transition-shadow bg-white\"\n                        data-testid={`product-card-${index}`}\n                      >\n                        <div className=\"p-6\">\n                          {/* Top Section: Product Info + Colored Metric Cards */}\n                          <div className=\"flex flex-col lg:flex-row gap-6\">\n                            {/* Left: Product Information */}\n                            <div className=\"flex-shrink-0 w-full lg:w-64\">\n                              {/* Date */}\n                              <div className=\"text-sm text-gray-500 mb-4\">\n                                {item.Datum || \"Feb 7, 2025\"}\n                                <br />\n                                00:00:00\n                              </div>\n\n                              {/* Product Image and Details */}\n                              <div className=\"flex items-start gap-3 mb-4\">\n                                {item[\"Image URL\"] ? (\n                                  <img\n                                    src={item[\"Image URL\"]}\n                                    alt={item[\"Product Name\"] || \"Product\"}\n                                    className=\"w-16 h-16 rounded-lg object-cover bg-gray-100\"\n                                    onError={(e) => {\n                                      const target =\n                                        e.target as HTMLImageElement;\n                                      target.style.display = \"none\";\n                                    }}\n                                  />\n                                ) : (\n                                  <div className=\"w-16 h-16 rounded-lg bg-gray-100 flex items-center justify-center\">\n                                    <span className=\"text-gray-400 text-xs\">\n                                      No Image\n                                    </span>\n                                  </div>\n                                )}\n                                <div className=\"flex-1\">\n                                  <h3\n                                    className=\"font-medium text-gray-900 text-sm leading-tight mb-1\"\n                                    data-testid={`product-title-${index}`}\n                                  >\n                                    {item[\"Product Name\"] || \"Unknown Product\"}\n                                  </h3>\n                                  <p className=\"text-sm text-gray-600\">\n                                    {item[\"Brand\"] || \"Unknown Brand\"}\n                                  </p>\n                                </div>\n                              </div>\n\n                              {/* ASIN and EAN */}\n                              <div className=\"space-y-2 text-sm\">\n                                <div className=\"flex justify-between items-center\">\n                                  <span className=\"text-gray-600\">ASIN</span>\n                                  <div className=\"flex items-center gap-2\">\n                                    <span\n                                      className=\"text-gray-900 font-medium\"\n                                      data-testid={`product-asin-${index}`}\n                                    >\n                                      {item[\"ASIN\"] || \"N/A\"}\n                                    </span>\n                                    {item[\"ASIN\"] && item[\"ASIN\"] !== \"N/A\" && (\n                                      <Button\n                                        size=\"sm\"\n                                        variant=\"ghost\"\n                                        className=\"h-4 w-4 p-0 text-gray-500 hover:text-gray-700\"\n                                        onClick={() => {\n                                          navigator.clipboard.writeText(\n                                            item[\"ASIN\"],\n                                          );\n                                          toast({\n                                            description: `ASIN ${item[\"ASIN\"]} copied to clipboard`,\n                                          });\n                                        }}\n                                        data-testid={`copy-asin-${index}`}\n                                      >\n                                        <Copy className=\"w-3 h-3\" />\n                                      </Button>\n                                    )}\n                                  </div>\n                                </div>\n                                <div className=\"flex justify-between items-center\">\n                                  <span className=\"text-gray-600\">EAN</span>\n                                  <div className=\"flex items-center gap-2\">\n                                    <span\n                                      className=\"text-gray-900\"\n                                      data-testid={`product-ean-${index}`}\n                                    >\n                                      {item[\"EAN Barcode\"] || \"N/A\"}\n                                    </span>\n                                    {item[\"EAN Barcode\"] &&\n                                      item[\"EAN Barcode\"] !== \"N/A\" && (\n                                        <Button\n                                          size=\"sm\"\n                                          variant=\"ghost\"\n                                          className=\"h-4 w-4 p-0 text-gray-500 hover:text-gray-700\"\n                                          onClick={() => {\n                                            navigator.clipboard.writeText(\n                                              item[\"EAN Barcode\"],\n                                            );\n                                            toast({\n                                              description: `EAN ${item[\"EAN Barcode\"]} copied to clipboard`,\n                                            });\n                                          }}\n                                          data-testid={`copy-ean-${index}`}\n                                        >\n                                          <Copy className=\"w-3 h-3\" />\n                                        </Button>\n                                      )}\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Right: Colored Metric Cards Grid */}\n                            <div className=\"flex-1\">\n                              <div className=\"grid grid-cols-2 lg:grid-cols-6 gap-3 mb-4\">\n                                {/* Buy Price - Blue */}\n                                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                                  <div className=\"text-xs text-blue-600 font-medium mb-1\">\n                                    Buy Price\n                                  </div>\n                                  <div className=\"text-sm font-bold text-blue-700\">\n                                    {formatPrice(item[\"Cost Price\"])}\n                                  </div>\n                                </div>\n\n                                {/* Sell Price - Green */}\n                                <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                                  <div className=\"text-xs text-green-600 font-medium mb-1\">\n                                    Sell Price\n                                  </div>\n                                  <div className=\"text-sm font-bold text-green-700\">\n                                    {formatPrice(item[\"Sale Price\"])}\n                                  </div>\n                                  <div className=\"text-xs text-green-600\">\n                                    90d:{\" \"}\n                                    {formatPrice(\n                                      item[\"Buy Box (Average Last 90 Days)\"],\n                                    )}\n                                  </div>\n                                </div>\n\n                                {/* Profit - Light Green */}\n                                <div className=\"bg-emerald-50 border border-emerald-200 rounded-lg p-3\">\n                                  <div className=\"text-xs text-emerald-600 font-medium mb-1\">\n                                    Profit\n                                  </div>\n                                  <div className=\"text-sm font-bold text-emerald-700\">\n                                    {formatPrice(item[\"Profit\"])}\n                                  </div>\n                                  <div className=\"text-xs text-emerald-600\">\n                                    {item[\"Profit Margin\"] || \"0%\"} margin\n                                  </div>\n                                </div>\n\n                                {/* ROI - Purple */}\n                                <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-3\">\n                                  <div className=\"text-xs text-purple-600 font-medium mb-1\">\n                                    ROI\n                                  </div>\n                                  <div className=\"text-sm font-bold text-purple-700\">\n                                    {roi}\n                                  </div>\n                                </div>\n\n                                {/* Est. Sales - Orange */}\n                                <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-3\">\n                                  <div className=\"text-xs text-orange-600 font-medium mb-1\">\n                                    Est. Sales\n                                  </div>\n                                  <div className=\"text-sm font-bold text-orange-700\">\n                                    {estSales}/mo\n                                  </div>\n                                </div>\n\n                                {/* Breakeven - Beige */}\n                                <div className=\"bg-stone-50 border border-stone-200 rounded-lg p-3\">\n                                  <div className=\"text-xs text-stone-600 font-medium mb-1\">\n                                    Breakeven\n                                  </div>\n                                  <div className=\"text-sm font-bold text-stone-700\">\n                                    {breakeven ? `${breakeven} units` : \"N/A\"}\n                                  </div>\n                                  <div className=\"text-xs text-stone-600\">\n                                    To recover costs\n                                  </div>\n                                </div>\n                              </div>\n                              \n                              {/* Calculated Purchase Fields */}\n                              <div className=\"border-2 border-blue-200 bg-blue-50 rounded-lg p-4 my-4\">\n                                <h5 className=\"text-sm font-semibold text-blue-800 mb-3\">\n                                  Purchase Calculations\n                                </h5>\n                                <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3\">\n                                  {/* Purchased Amount - Editable */}\n                                  <div className=\"bg-white border border-blue-200 rounded-lg p-3\">\n                                    <div className=\"text-xs text-blue-600 font-medium mb-1\">\n                                      Purchased Amount\n                                    </div>\n                                    <Input\n                                      type=\"number\"\n                                      min=\"0\"\n                                      step=\"1\"\n                                      placeholder=\"0\"\n                                      value={purchasedAmounts[(item as any)._originalRowIndex] || ''}\n                                      onChange={(e) => {\n                                        const amount = parseFloat(e.target.value) || 0;\n                                        setPurchasedAmounts(prev => ({\n                                          ...prev,\n                                          [(item as any)._originalRowIndex]: amount\n                                        }));\n                                      }}\n                                      className=\"h-8 text-sm font-bold text-blue-700\"\n                                      data-testid={`purchased-amount-${index}`}\n                                    />\n                                    <div className=\"text-xs text-blue-600 mt-1\">\n                                      units\n                                    </div>\n                                  </div>\n\n                                  {/* Spent - Calculated */}\n                                  <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n                                    <div className=\"text-xs text-red-600 font-medium mb-1\">\n                                      Spent\n                                    </div>\n                                    <div className=\"text-sm font-bold text-red-700 h-8 flex items-center\">\n                                      {(() => {\n                                        const purchasedAmount = purchasedAmounts[(item as any)._originalRowIndex] || 0;\n                                        const costPrice = parsePrice(item[\"Cost Price\"]);\n                                        const spent = costPrice * purchasedAmount;\n                                        return formatPrice(spent);\n                                      })()}\n                                    </div>\n                                    <div className=\"text-xs text-red-600\">\n                                      Cost × Amount\n                                    </div>\n                                  </div>\n\n                                  {/* Revenue - Calculated */}\n                                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                                    <div className=\"text-xs text-green-600 font-medium mb-1\">\n                                      Revenue\n                                    </div>\n                                    <div className=\"text-sm font-bold text-green-700 h-8 flex items-center\">\n                                      {(() => {\n                                        const purchasedAmount = purchasedAmounts[(item as any)._originalRowIndex] || 0;\n                                        const salePrice = parsePrice(item[\"Sale Price\"]);\n                                        const revenue = salePrice * purchasedAmount;\n                                        return formatPrice(revenue);\n                                      })()}\n                                    </div>\n                                    <div className=\"text-xs text-green-600\">\n                                      Sale × Amount\n                                    </div>\n                                  </div>\n\n                                  {/* Profit - Calculated */}\n                                  <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-3\">\n                                    <div className=\"text-xs text-purple-600 font-medium mb-1\">\n                                      Total Profit\n                                    </div>\n                                    <div className=\"text-sm font-bold text-purple-700 h-8 flex items-center\">\n                                      {(() => {\n                                        const purchasedAmount = purchasedAmounts[(item as any)._originalRowIndex] || 0;\n                                        const profitPerUnit = parsePrice(item[\"Profit\"]);\n                                        const totalProfit = profitPerUnit * purchasedAmount;\n                                        return formatPrice(totalProfit);\n                                      })()}\n                                    </div>\n                                    <div className=\"text-xs text-purple-600\">\n                                      Profit × Amount\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n\n                              <div className=\"lg:grid-cols-3 grid-cols-1 grid gap-3\">\n                                <div className=\"border border-gray rounded-md p-3\">\n                                  <h5 className=\"text-sm font-medium text-gray-700 mb-2\">\n                                    Stock Levels\n                                  </h5>\n                                  <div className=\"space-y-1 text-xs\">\n                                    <div className=\"flex justify-between\">\n                                      <span className=\"text-gray-600\">\n                                        Amazon:\n                                      </span>\n                                      <span className=\"font-medium\">150</span>\n                                    </div>\n                                    <div className=\"flex justify-between\">\n                                      <span className=\"text-blue-600\">\n                                        FBA:\n                                      </span>\n                                      <span className=\"font-medium\">\n                                        {item[\"FBA Seller Count\"] || \"0\"}\n                                      </span>\n                                    </div>\n                                    <div className=\"flex justify-between\">\n                                      <span className=\"text-green-600\">\n                                        FBM:\n                                      </span>\n                                      <span className=\"font-medium\">\n                                        {item[\"FBM Seller Count\"] || \"0\"}\n                                      </span>\n                                    </div>\n                                  </div>\n                                </div>\n\n                                {/* Active Offers */}\n                                <div className=\"border border-gray rounded-md p-3\">\n                                  <h5 className=\"text-sm font-medium text-gray-700 mb-2\">\n                                    Active Offers\n                                  </h5>\n                                  <div className=\"space-y-1 text-xs\">\n                                    <div className=\"flex justify-between\">\n                                      <span className=\"text-blue-600\">\n                                        FBA Offers:\n                                      </span>\n                                      <span className=\"font-medium\">12</span>\n                                    </div>\n                                    <div className=\"flex justify-between\">\n                                      <span className=\"text-green-600\">\n                                        FBM Offers:\n                                      </span>\n                                      <span className=\"font-medium\">8</span>\n                                    </div>\n                                    <div className=\"flex justify-between\">\n                                      <span className=\"text-gray-600\">\n                                        Total:\n                                      </span>\n                                      <span className=\"font-medium\">20</span>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"lg:w-[300px] w-full grid grid-cols-1 gap-2\">\n                              {/* Status Dropdown */}\n                              <Select\n                                defaultValue={item[\"Status\"] || \"\"}\n                                onValueChange={(value) => {\n                                  updateStatus.mutate({\n                                    rowIndex: (item as any)._originalRowIndex,\n                                    status: value,\n                                  });\n                                }}\n                              >\n                                <SelectTrigger\n                                  className=\"w-full h-8\"\n                                  data-testid={`status-${index}`}\n                                >\n                                  <SelectValue placeholder=\"Select Status\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"Prep\">\n                                    <div className=\"flex items-center gap-2 text-blue-600\">\n                                      <Package className=\"w-4 h-4\" />\n                                      Prep\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"FBA Warehouse\">\n                                    <div className=\"flex items-center gap-2 text-green-600\">\n                                      <CheckCircle2 className=\"w-4 h-4\" />\n                                      FBA Warehouse\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"Gated\">\n                                    <div className=\"flex items-center gap-2 text-yellow-600\">\n                                      <Bell className=\"w-4 h-4\" />\n                                      Gated\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"Return\">\n                                    <div className=\"flex items-center gap-2 text-red-500\">\n                                      <X className=\"w-4 h-4\" />\n                                      Return\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"Cancelled\">\n                                    <div className=\"flex items-center gap-2 text-red-500\">\n                                      <X className=\"w-4 h-4\" />\n                                      Cancelled\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"Out of Stock\">\n                                    <div className=\"flex items-center gap-2 text-red-500\">\n                                      <X className=\"w-4 h-4\" />\n                                      Out of Stock\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"Low Stock\">\n                                    <div className=\"flex items-center gap-2 text-orange-500\">\n                                      <Bell className=\"w-4 h-4\" />\n                                      Low Stock\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"On hold\">\n                                    <div className=\"flex items-center gap-2 text-yellow-500\">\n                                      <Bell className=\"w-4 h-4\" />\n                                      On hold\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"Pre-Order\">\n                                    <div className=\"flex items-center gap-2 text-blue-500\">\n                                      <Target className=\"w-4 h-4\" />\n                                      Pre-Order\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"Not profitable anymore\">\n                                    <div className=\"flex items-center gap-2 text-red-500\">\n                                      <X className=\"w-4 h-4\" />\n                                      Not profitable anymore\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"Price changed\">\n                                    <div className=\"flex items-center gap-2 text-orange-500\">\n                                      <Bell className=\"w-4 h-4\" />\n                                      Price changed\n                                    </div>\n                                  </SelectItem>\n                                </SelectContent>\n                              </Select>\n\n                              {/* Sourcing Method */}\n                              <Select\n                                defaultValue={item[\"Sourcing Method\"] || \"\"}\n                                onValueChange={(value) => {\n                                  updateSourcingMethod.mutate({\n                                    rowIndex: (item as any)._originalRowIndex,\n                                    sourcingMethod: value,\n                                  });\n                                }}\n                              >\n                                <SelectTrigger\n                                  className=\"w-full h-8\"\n                                  data-testid={`sourcing-method-${index}`}\n                                >\n                                  <SelectValue placeholder=\"Select Sourcing Method\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"Profitpath\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <Target className=\"w-4 h-4\" />\n                                      Profitpath\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"Storefront Stalking\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <Eye className=\"w-4 h-4\" />\n                                      Storefront Stalking\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"Manual\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <User className=\"w-4 h-4\" />\n                                      Manual\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"Idealo Scraper\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <Search className=\"w-4 h-4\" />\n                                      Idealo Scraper\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"Qogita price alert\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <Bell className=\"w-4 h-4\" />\n                                      Qogita price alert\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"Wholesale\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <Package className=\"w-4 h-4\" />\n                                      Wholesale\n                                    </div>\n                                  </SelectItem>\n                                  <SelectItem value=\"Idealo notifier\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <Bell className=\"w-4 h-4\" />\n                                      Idealo notifier\n                                    </div>\n                                  </SelectItem>\n                                </SelectContent>\n                              </Select>\n\n                              {/* Notes and Action Buttons */}\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"w-full justify-start\"\n                                onClick={() => handleEditNotes(item)}\n                                data-testid={`edit-notes-${index}`}\n                              >\n                                <SquarePen className=\"w-4 h-4 mr-2\" />\n                                {item[\"Notes\"] ? \"Edit Notes\" : \"Add Notes\"}\n                              </Button>\n\n                              {/* File Upload Section */}\n                              <FileUploadSection\n                                rowIndex={item._originalRowIndex}\n                                asin={item[\"ASIN\"] || \"\"}\n                                uploadFile={uploadFile}\n                                deleteFile={deleteFile}\n                              />\n\n                              {/* Action Buttons */}\n                              <div className=\"flex gap-2\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"flex-1\"\n                                  onClick={() => handleArchiveItem(item)}\n                                  disabled={archiveItem.isPending}\n                                  data-testid={`archive-${index}`}\n                                >\n                                  <Archive className=\"w-4 h-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"flex-1 text-red-600 hover:text-red-700\"\n                                  onClick={() => handleDeleteItem(item)}\n                                  disabled={deleteItem.isPending}\n                                  data-testid={`delete-${index}`}\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n\n                                {/* Source URL */}\n                                {item[\"Source URL\"] && (\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    className=\"flex-1 justify-start\"\n                                    onClick={() =>\n                                      window.open(item[\"Source URL\"], \"_blank\")\n                                    }\n                                    data-testid={`source-link-${index}`}\n                                  >\n                                    <ExternalLink className=\"w-4 h-4\" />\n                                  </Button>\n                                )}\n\n                                {/* Amazon URL */}\n                                {item[\"Amazon URL\"] && (\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    className=\"flex-1 justify-start\"\n                                    onClick={() =>\n                                      window.open(item[\"Amazon URL\"], \"_blank\")\n                                    }\n                                    data-testid={`amazon-link-${index}`}\n                                  >\n                                    <ExternalLink className=\"w-4 h-4\" />\n                                  </Button>\n                                )}\n                              </div>\n\n                              <div className=\"flex gap-2\">\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"text-xs bg-amber-600 hover:bg-amber-500  text-white hover:text-white\"\n                                  onClick={() => {\n                                    createAmazonListing.mutate({\n                                      asin: item[\"ASIN\"] || \"\",\n                                      productName: item[\"Product Name\"] || \"\",\n                                      price: item[\"Sale Price\"] || \"\",\n                                      buyPrice: item[\"Cost Price\"] || \"\",\n                                      brand: item[\"Brand\"] || \"\",\n                                    });\n                                  }}\n                                  disabled={createAmazonListing.isPending}\n                                  data-testid={`amazon-listing-${index}`}\n                                >\n                                  <Box className=\"w-4 h-4\" />\n                                  {createAmazonListing.isPending ? \"Creating...\" : \"Amazon Listing\"}\n                                </Button>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"text-xs bg-green-600 hover:bg-green-500 text-white hover:text-white\"\n                                  onClick={() => {\n                                    const purchasedAmount = purchasedAmounts[(item as any)._originalRowIndex] || 1;\n                                    createShipment.mutate({\n                                      asin: item[\"ASIN\"] || \"\",\n                                      productName: item[\"Product Name\"] || \"\",\n                                      quantity: purchasedAmount,\n                                    });\n                                  }}\n                                  disabled={createShipment.isPending}\n                                  data-testid={`create-shipment-${index}`}\n                                >\n                                  <Truck className=\"w-4 h-4\" />\n                                  {createShipment.isPending ? \"Creating...\" : \"Create Shipment\"}\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </Card>\n                    );\n                  },\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Notes Dialog */}\n      <Dialog open={notesModalOpen} onOpenChange={setNotesModalOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              Edit Notes for {editingNotes?.item[\"Product Name\"] || \"Product\"}\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"py-4\">\n            <Textarea\n              placeholder=\"Add your notes here...\"\n              value={editingNotes?.notes || \"\"}\n              onChange={(e) => {\n                if (editingNotes) {\n                  setEditingNotes({\n                    ...editingNotes,\n                    notes: e.target.value,\n                  });\n                }\n              }}\n              className=\"min-h-[200px]\"\n              data-testid=\"notes-textarea\"\n            />\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setNotesModalOpen(false);\n                setEditingNotes(null);\n              }}\n              data-testid=\"cancel-notes\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={() => {\n                if (editingNotes) {\n                  updateNotes.mutate({\n                    rowIndex: editingNotes.rowIndex,\n                    notes: editingNotes.notes,\n                  });\n                }\n              }}\n              disabled={updateNotes.isPending}\n              data-testid=\"save-notes\"\n            >\n              {updateNotes.isPending ? \"Saving...\" : \"Save Notes\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":64333}},"version":1}